# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Add-AvailabilityAddressSpace
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    ${AccessMethod},

    [pscredential]
    ${Credentials},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${ForestName},

    [uri]
    ${TargetAutodiscoverEpr},

    [Parameter(ParameterSetName='AAS_Token')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetServiceEpr},

    [Parameter(ParameterSetName='AAS_Token')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetTenantId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credentials'))
            {
                $Credentials__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credentials'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credentials'] = Encrypt-Value -UnsecureString $Credentials__Unsecure;
            }
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Add-AvailabilityAddressSpace' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Add-DistributionGroupMember
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ValueFromPipeline=$true)]
    [ValidateNotNull()]
    ${Member}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Add-DistributionGroupMember' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Add-MailboxFolderPermission
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [System.Object[]]
    ${AccessRights},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ResetDelegateUserCollection', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${SendNotificationToUser},

    ${SharingPermissionFlags},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${User}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Add-MailboxFolderPermission' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Add-MailboxLocation
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Add-MailboxLocation' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Add-MailboxPermission
{
    [CmdletBinding(DefaultParameterSetName='AccessRights', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Instance')]
    [Parameter(ParameterSetName='AccessRights', Mandatory=$true)]
    [System.Object[]]
    ${AccessRights},

    [Parameter(ParameterSetName='Instance')]
    [Parameter(ParameterSetName='AccessRights')]
    ${AutoMapping},

    [Parameter(ParameterSetName='Instance')]
    [Parameter(ParameterSetName='AccessRights')]
    [switch]
    ${Deny},

    [Parameter(ParameterSetName='AccessRights')]
    [Parameter(ParameterSetName='Instance')]
    [Parameter(ParameterSetName='Owner')]
    [switch]
    ${GroupMailbox},

    [Parameter(ParameterSetName='Instance', Position=0)]
    [Parameter(ParameterSetName='AccessRights', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Owner', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ResetDefault', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ClearAutoMapping', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Parameter(ParameterSetName='Instance')]
    [Parameter(ParameterSetName='AccessRights')]
    [System.DirectoryServices.ActiveDirectorySecurityInheritance]
    ${InheritanceType},

    [Parameter(ParameterSetName='Owner', Mandatory=$true)]
    ${Owner},

    [Parameter(ParameterSetName='Instance')]
    [Parameter(ParameterSetName='AccessRights', Mandatory=$true)]
    ${User}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Add-MailboxPermission' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Add-ManagementRoleEntry
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${Overwrite},

    [Parameter(ParameterSetName='Identity')]
    [string[]]
    ${Parameters},

    [Parameter(ParameterSetName='ParentRoleEntry', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    ${ParentRoleEntry},

    [Parameter(ParameterSetName='ParentRoleEntry', Mandatory=$true)]
    ${Role},

    [Parameter(ParameterSetName='Identity')]
    ${Type}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Add-ManagementRoleEntry' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Add-PublicFolderClientPermission
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [System.Object[]]
    ${AccessRights},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${User}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Add-PublicFolderClientPermission' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Add-RecipientPermission
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${AccessRights},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Trustee}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Add-RecipientPermission' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Add-RoleGroupMember
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    ${Member}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Add-RoleGroupMember' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Add-UnifiedGroupLinks
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [System.Object[]]
    ${Links},

    [Parameter(Mandatory=$true)]
    ${LinkType}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Add-UnifiedGroupLinks' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Approve-ElevatedAccessRequest
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [Parameter(ParameterSetName='Default', Mandatory=$true)]
    [string]
    ${Comment},

    [Parameter(ParameterSetName='Default')]
    [hashtable]
    ${RequestContext},

    [Parameter(ParameterSetName='Default', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Alias('Identity')]
    [string]
    ${RequestId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Approve-ElevatedAccessRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Check-ExoInformationBarrierSymmetry
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${Organization}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Check-ExoInformationBarrierSymmetry' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Clear-ActiveSyncDevice
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${Cancel},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${NotificationEmailAddresses}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Clear-ActiveSyncDevice' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Clear-MobileDevice
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${AccountOnly},

    [switch]
    ${Cancel},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${NotificationEmailAddresses}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Clear-MobileDevice' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Complete-MigrationBatch
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${CompletePublicFolderMigrationWithDataLoss},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Partition},

    [switch]
    ${SyncAndComplete}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Complete-MigrationBatch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Debug-AdditionalCapacityProtection
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Debug-AdditionalCapacityProtection' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Delete-QuarantineMessage
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    ${EntityType},

    [switch]
    ${HardDelete},

    [Parameter(ParameterSetName='Identities', Mandatory=$true)]
    [System.Object[]]
    ${Identities},

    [Parameter(ParameterSetName='IdentityOnly', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Identities', ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNullOrEmpty()]
    ${Identity},

    [ValidateLength(1, 320)]
    [string[]]
    ${RecipientAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Delete-QuarantineMessage' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Deny-ElevatedAccessRequest
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [Parameter(ParameterSetName='Default', Mandatory=$true)]
    [string]
    ${Comment},

    [Parameter(ParameterSetName='Default', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Alias('Identity')]
    [string]
    ${RequestId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Deny-ElevatedAccessRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Disable-AntiPhishRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-AntiPhishRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Disable-App
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Mailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-App' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Disable-ATPEvaluationRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-ATPEvaluationRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Disable-ATPProtectionPolicyRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-ATPProtectionPolicyRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Disable-BirthdayCalendar
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Disable-BirthdayCalendar' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Disable-DnssecForVerifiedDomain
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${DomainName}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-DnssecForVerifiedDomain' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Disable-ElevatedAccessControl
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Disable-ElevatedAccessControl' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Disable-EOPProtectionPolicyRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-EOPProtectionPolicyRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Disable-HostedContentFilterRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-HostedContentFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Disable-HostedOutboundSpamFilterRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-HostedOutboundSpamFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Disable-InboxRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Mailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-InboxRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Disable-JournalArchiving
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${PreserveMailUser}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-JournalArchiving' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailControl-Help.xml
function script:Disable-JournalRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'disable-journalrule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Disable-Mailbox
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Archive')]
    [switch]
    ${Archive},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${PermanentlyDisable}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'disable-Mailbox' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Disable-MailPublicFolder
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-MailPublicFolder' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Disable-MalwareFilterRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-MalwareFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Disable-OutlookProtectionRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-OutlookProtectionRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Disable-ReportSubmissionRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-ReportSubmissionRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Disable-SafeAttachmentRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-SafeAttachmentRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Disable-SafeLinksRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-SafeLinksRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

function script:Disable-SmtpDaneInbound
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${DomainName}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-SmtpDaneInbound' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Disable-SweepRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Mailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-SweepRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Disable-TransportRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Disable-TransportRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Enable-AntiPhishRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-AntiPhishRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Enable-App
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Mailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-App' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Enable-ATPEvaluationRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-ATPEvaluationRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Enable-ATPProtectionPolicyRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-ATPProtectionPolicyRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Enable-BirthdayCalendar
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [bool]
    ${ForceCreateCalendarGroupEntryInFailure},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Enable-BirthdayCalendar' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Enable-DnssecForVerifiedDomain
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${DomainName}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-DnssecForVerifiedDomain' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Enable-ElevatedAccessControl
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [Parameter(ParameterSetName='Default', Mandatory=$true)]
    ${AdminGroup},

    [Parameter(ParameterSetName='Default', Mandatory=$true)]
    [AllowEmptyCollection()]
    [string[]]
    ${SystemAccounts}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Enable-ElevatedAccessControl' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Enable-EOPProtectionPolicyRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-EOPProtectionPolicyRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Enable-ExoInformationBarriersMultiSegment
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${Organization}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Enable-ExoInformationBarriersMultiSegment' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Enable-HostedContentFilterRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-HostedContentFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Enable-HostedOutboundSpamFilterRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-HostedOutboundSpamFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Enable-InboxRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Mailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-InboxRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailControl-Help.xml
function script:Enable-JournalRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'enable-journalrule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Enable-Mailbox
{
    [CmdletBinding(DefaultParameterSetName='User', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Archive')]
    [switch]
    ${Archive},

    [Parameter(ParameterSetName='Archive')]
    ${ArchiveName},

    [Parameter(ParameterSetName='AutoExpandingArchive')]
    [switch]
    ${AutoExpandingArchive},

    [switch]
    ${Force},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${RoleAssignmentPolicy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'enable-Mailbox' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Enable-MailPublicFolder
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${HiddenFromAddressListsEnabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${OverrideRecipientQuotas}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-MailPublicFolder' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Enable-MalwareFilterRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-MalwareFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Enable-OrganizationCustomization
{
    [CmdletBinding(DefaultParameterSetName='IdentityParameterSet', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-OrganizationCustomization' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Enable-OutlookProtectionRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-OutlookProtectionRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Enable-ReportSubmissionRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-ReportSubmissionRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Enable-SafeAttachmentRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-SafeAttachmentRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Enable-SafeLinksRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-SafeLinksRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

function script:Enable-SmtpDaneInbound
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${DomainName}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-SmtpDaneInbound' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Enable-SweepRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Mailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-SweepRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Enable-TransportRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Mode}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Enable-TransportRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Export-ApplicationData
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Export-ApplicationData' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Export-DlpPolicyCollection
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Export-DlpPolicyCollection' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Export-MailboxDiagnosticLogs
{
    [CmdletBinding(DefaultParameterSetName='MailboxLogParameterSet', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='MailboxLogParameterSet', Mandatory=$true)]
    [string]
    ${ComponentName},

    [Parameter(ParameterSetName='ExtendedPropertiesParameterSet', Mandatory=$true)]
    [switch]
    ${ExtendedProperties},

    [Parameter(ParameterSetName='MailboxLogParameterSet', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ExtendedPropertiesParameterSet', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='ExtendedPropertiesParameterSet')]
    [Parameter(ParameterSetName='MailboxLogParameterSet')]
    [switch]
    ${IncludeInactiveMailboxes},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Export-MailboxDiagnosticLogs' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Export-MigrationReport
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='StreamBased', Mandatory=$true)]
    [System.IO.Stream]
    ${CsvStream},

    [Parameter(ParameterSetName='StreamBased', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Paged', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Partition},

    [Parameter(ParameterSetName='Paged', Mandatory=$true)]
    [int]
    ${RowCount},

    [Parameter(ParameterSetName='Paged', Mandatory=$true)]
    [int]
    ${StartingRowIndex}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Export-MigrationReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Export-QuarantineMessage
{
    [CmdletBinding()]
    param(
    
    [switch]
    ${CompressOutput},

    ${EntityType},

    [switch]
    ${ForceConversionToMime},

    [Parameter(ParameterSetName='Identities', Mandatory=$true)]
    [System.Object[]]
    ${Identities},

    [Parameter(ParameterSetName='IdentityOnly', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Identities', ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNullOrEmpty()]
    ${Identity},

    [securestring]
    ${Password},

    [ValidateLength(1, 320)]
    [string]
    ${ReasonForExport},

    [ValidateLength(1, 320)]
    [string]
    ${RecipientAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Password'))
            {
                $Password__Unsecure = [System.Net.NetworkCredential]::new('', $PSCmdlet.MyInvocation.BoundParameters['Password']).Password;
                $PSCmdlet.MyInvocation.BoundParameters['Password'] = Encrypt-Value -UnsecureString $Password__Unsecure;
            }
            Execute-Command -CmdletName 'Export-QuarantineMessage' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Export-TransportRuleCollection
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${Format},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Export-TransportRuleCollection' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Get-AcceptedDomain
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AcceptedDomain' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-AccessToCustomerDataRequest
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [Parameter(ParameterSetName='Default')]
    [string]
    ${ApprovalStatus},

    [Parameter(ParameterSetName='Default')]
    ${CreatedAfter},

    [Parameter(ParameterSetName='Default')]
    [Alias('Identity')]
    [string]
    ${RequestId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AccessToCustomerDataRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Get-ActiveSyncDevice
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Mailbox', Mandatory=$true, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    ${Mailbox},

    ${OrganizationalUnit},

    ${ResultSize},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
            $NamedPositionalAndDynamicParameters = New-Object System.Collections.ArrayList;
            foreach ($param in $PSBoundParameters.GetEnumerator())
            {
                [void]$NamedPositionalAndDynamicParameters.Add($param.Key);
            }
    
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $pipelineObjectBoundParameterKey = $null
            $pipelineObjectBoundParameterValue =  $null
            foreach ($param in $PSBoundParameters.GetEnumerator())
            {          
                if(-not $NamedPositionalAndDynamicParameters.Contains($param.Key))
                {
                    $pipelineObjectBoundParameterKey = $param.Key
                    $pipelineObjectBoundParameterValue = $param.Value
                    break
                }
            }
            
            if ($pipelineObjectBoundParameterKey -ne $null)
            {
                # Extracting Type Information from $pipelineObjectBoundParameterValue. This will be stored in TypeName field for every Property
                # Ideally TypeName is same for every Property. Adding -Unique
                $pipelineObjectBoundParameterValueType = $pipelineObjectBoundParameterValue | Get-Member | select -ExpandProperty Typename -Unique -First 1
                
                if (($pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Configuration.Tasks.ActiveSyncDeviceIdParameter')) -and $pipelineObjectBoundParameterKey -ne 'Identity')
                    {
                        $PSBoundParameters['Identity'] = $PSBoundParameters[$pipelineObjectBoundParameterKey]
                        [void]$PSBoundParameters.Remove($pipelineObjectBoundParameterKey)
                
                        $parameterSetValidated = Validate-ParameterSet -CmdletName 'Get-ActiveSyncDevice' -ParameterList $PSBoundParameters.Keys
                        if($parameterSetValidated -eq $false)
                        {
                            $PSBoundParameters[$pipelineObjectBoundParameterKey] = $PSBoundParameters['Identity']
                            [void]$PSBoundParameters.Remove('Identity')
                        }
                    }
                
                if (($pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Configuration.Tasks.MailboxIdParameter') -or $pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Data.Directory.Management.Mailbox') -or $pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Data.Directory.Management.ConsumerMailbox')) -and $pipelineObjectBoundParameterKey -ne 'Mailbox')
                    {
                        $PSBoundParameters['Mailbox'] = $PSBoundParameters[$pipelineObjectBoundParameterKey]
                        [void]$PSBoundParameters.Remove($pipelineObjectBoundParameterKey)
                
                        $parameterSetValidated = Validate-ParameterSet -CmdletName 'Get-ActiveSyncDevice' -ParameterList $PSBoundParameters.Keys
                        if($parameterSetValidated -eq $false)
                        {
                            $PSBoundParameters[$pipelineObjectBoundParameterKey] = $PSBoundParameters['Mailbox']
                            [void]$PSBoundParameters.Remove('Mailbox')
                        }
                    }
                 
            }
            
            Execute-Command -CmdletName 'Get-ActiveSyncDevice' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Get-ActiveSyncDeviceAccessRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ActiveSyncDeviceAccessRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Get-ActiveSyncDeviceClass
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ActiveSyncDeviceClass' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Get-ActiveSyncDeviceStatistics
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [switch]
    ${GetMailboxLog},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Mailbox', Mandatory=$true, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    ${Mailbox},

    ${NotificationEmailAddresses},

    [switch]
    ${ShowRecoveryPassword}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ActiveSyncDeviceStatistics' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Get-ActiveSyncMailboxPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'get-ActiveSyncMailboxPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Get-ActiveSyncOrganizationSettings
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ActiveSyncOrganizationSettings' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-AdaptiveScope
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [ValidateNotNullOrEmpty()]
    ${AdministrativeUnits},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    ${LocationTypes}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AdaptiveScope' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-AddressBookPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AddressBookPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Get-AdminAuditLogConfig
{
    [CmdletBinding()]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AdminAuditLogConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-AdministrativeUnit
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-AdministrativeUnit' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-AggregateZapReport
{
    [CmdletBinding()]
    param(
    
    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${EndDate},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AggregateZapReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-AntiPhishPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [switch]
    ${Advanced},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${Impersonation},

    [switch]
    ${Spoof}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AntiPhishPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-AntiPhishRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${State}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AntiPhishRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-App
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Mailbox},

    [switch]
    ${OrganizationApp},

    [switch]
    ${PrivateCatalog}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-App' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-ApplicationAccessPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ApplicationAccessPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-ArcConfig
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ArcConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-ATPBuiltInProtectionRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${State}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ATPBuiltInProtectionRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-ATPEvaluationRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${State}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ATPEvaluationRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-AtpPolicyForO365
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AtpPolicyForO365' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-ATPProtectionPolicyRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${State}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ATPProtectionPolicyRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-ATPTotalTrafficReport
{
    [CmdletBinding()]
    param(
    
    ${Action},

    [string]
    ${AggregateBy},

    ${Direction},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Domain},

    ${EndDate},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    ${StartDate},

    ${SummarizeBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ATPTotalTrafficReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-AuditConfig
{
    [CmdletBinding()]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AuditConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-AuditConfigurationPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AuditConfigurationPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-AuditConfigurationRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AuditConfigurationRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Get-AuditLogSearch
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    ${CreatedAfter},

    [Parameter(ParameterSetName='Identity')]
    ${CreatedBefore},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Identity')]
    [ValidateRange(1, 250000)]
    [int]
    ${ResultSize},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${Type}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AuditLogSearch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-AuthenticationPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string]
    ${TenantId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AuthenticationPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-AuthServer
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AuthServer' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-AvailabilityAddressSpace
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AvailabilityAddressSpace' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-AvailabilityConfig
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-AvailabilityConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-BlockedConnector
{
    [CmdletBinding()]
    param(
    
    [guid]
    ${ConnectorId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-BlockedConnector' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-BlockedSenderAddress
{
    [CmdletBinding()]
    param(
    
    ${SenderAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-BlockedSenderAddress' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-BookingMailbox
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [ValidateNotNullOrEmpty()]
    [string]
    ${MailboxName},

    [ValidateNotNullOrEmpty()]
    ${RecipientTypeDetails},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-BookingMailbox' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-CalendarDiagnosticAnalysis
{
    [CmdletBinding(DefaultParameterSetName='DefaultSet')]
    param(
    
    [Parameter(ParameterSetName='DefaultSet', Mandatory=$true)]
    [System.Object[]]
    ${CalendarLogs},

    ${DetailLevel},

    [string]
    ${GlobalObjectId},

    [Parameter(ParameterSetName='LocationSet', Mandatory=$true)]
    [string[]]
    ${LogLocation},

    ${OutputAs}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-CalendarDiagnosticAnalysis' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-CalendarDiagnosticLog
{
    [CmdletBinding(DefaultParameterSetName='DoNotExportParameterSet')]
    param(
    
    ${EndDate},

    [string]
    ${EntryId},

    [bool]
    ${ExactMatch},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string[]]
    ${ItemClass},

    [string[]]
    ${ItemIds},

    [switch]
    ${Latest},

    [Parameter(ParameterSetName='ExportToMsgParameterSet', Mandatory=$true)]
    [string]
    ${LogLocation},

    [string]
    ${MeetingId},

    ${ResultSize},

    ${StartDate},

    [string]
    ${Subject}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-CalendarDiagnosticLog' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-CalendarDiagnosticObjects
{
    [CmdletBinding()]
    param(
    
    ${AnalyzeExceptionWithOriginalStartDate},

    [bool]
    ${AutoRequeryOnMeetingId},

    [string]
    ${ConfigurationName},

    [string[]]
    ${CustomPropertyNames},

    ${EndDate},

    [string]
    ${EntryId},

    [string]
    ${EwsId},

    [bool]
    ${ExactMatch},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string[]]
    ${ItemClass},

    [string[]]
    ${ItemIds},

    [int]
    ${MaxResults},

    [string]
    ${MeetingId},

    [string]
    ${ODataId},

    ${ResultSize},

    [bool]
    ${ShouldBindToItem},

    [bool]
    ${ShouldDecodeEnums},

    [bool]
    ${ShouldFetchAttendeeCollection},

    [bool]
    ${ShouldFetchRecurrenceExceptions},

    ${StartDate},

    [string]
    ${Subject}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-CalendarDiagnosticObjects' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-CalendarProcessing
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-CalendarProcessing' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-CalendarSettings
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-CalendarSettings' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-CalendarViewDiagnostics
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [switch]
    ${BindToResults},

    [string]
    ${CalendarId},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IgnoreCorruptItems},

    [switch]
    ${ReturnSeriesMasters},

    [string]
    ${TimeZonePreference},

    [Parameter(Mandatory=$true)]
    [datetime]
    ${WindowEndUtc},

    [Parameter(Mandatory=$true)]
    [datetime]
    ${WindowStartUtc}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-CalendarViewDiagnostics' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-CASMailbox
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [switch]
    ${ActiveSyncDebugLogging},

    [switch]
    ${ActiveSyncSuppressReadReceipt},

    [Parameter(ParameterSetName='AnrSet')]
    [ValidateLength(3, 5120)]
    [string]
    ${Anr},

    [pscredential]
    ${Credential},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    ${OrganizationalUnit},

    [switch]
    ${ProtocolSettings},

    [switch]
    ${ReadIsOptimizedForAccessibility},

    [switch]
    ${RecalculateHasActiveSyncDevicePartnership},

    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${RecipientTypeDetails},

    ${ResultSize},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credential'))
            {
                $Credential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credential'] = Encrypt-Value -UnsecureString $Credential__Unsecure;
            }
            Execute-Command -CmdletName 'Get-CASMailbox' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-CASMailboxPlan
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [pscredential]
    ${Credential},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    ${ResultSize},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credential'))
            {
                $Credential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credential'] = Encrypt-Value -UnsecureString $Credential__Unsecure;
            }
            Execute-Command -CmdletName 'Get-CASMailboxPlan' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Get-ClassificationRuleCollection
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ClassificationRuleCollection' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-CompliancePolicyFileSyncNotification
{
    [CmdletBinding()]
    param(
    
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-CompliancePolicyFileSyncNotification' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-CompliancePolicySyncNotification
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-CompliancePolicySyncNotification' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-ComplianceTag
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IncludingLabelState}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ComplianceTag' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-ComplianceTagStorage
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ComplianceTagStorage' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-CompromisedUserAggregateReport
{
    [CmdletBinding()]
    param(
    
    ${Action},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${EndDate},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-CompromisedUserAggregateReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-CompromisedUserDetailReport
{
    [CmdletBinding()]
    param(
    
    ${Action},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${EndDate},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-CompromisedUserDetailReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailControl-Help.xml
function script:Get-ConfigAnalyzerPolicyRecommendation
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [switch]
    ${IsAppliedToDisabled},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${RecommendedPolicyType}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ConfigAnalyzerPolicyRecommendation' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-Contact
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='AnrSet')]
    [ValidateLength(3, 5120)]
    [string]
    ${Anr},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${OrganizationalUnit},

    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${RecipientTypeDetails},

    ${ResultSize},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-Contact' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-ContentMalwareMdoAggregateReport
{
    [CmdletBinding()]
    param(
    
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${DetectionTechnology},

    ${EndDate},

    [int]
    ${Page},

    [int]
    ${PageSize},

    ${StartDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Workload}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ContentMalwareMdoAggregateReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-ContentMalwareMdoDetailReport
{
    [CmdletBinding()]
    param(
    
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${DetectionTechnology},

    ${EndDate},

    [int]
    ${Page},

    [int]
    ${PageSize},

    ${StartDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Workload}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ContentMalwareMdoDetailReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-CrossTenantAccessPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-CrossTenantAccessPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-CustomDlpEmailTemplates
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-CustomDlpEmailTemplates' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-CustomizedUserSubmission
{
    [CmdletBinding()]
    param(
    
    [string]
    ${AggregateBy},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${EndDate},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${StartDate},

    [string]
    ${SubmissionNetworkMessageId},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${SubmittedBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-CustomizedUserSubmission' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Get-DataClassification
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='RuleCollectionIdentity', Position=0)]
    ${ClassificationRuleCollectionIdentity},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DataClassification' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-DataClassificationConfig
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DataClassificationConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-DataEncryptionPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-DataEncryptionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-DataRetentionReport
{
    [CmdletBinding()]
    param(
    
    ${EndDate},

    [int]
    ${Page},

    [int]
    ${PageSize},

    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DataRetentionReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-DetailZapReport
{
    [CmdletBinding()]
    param(
    
    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${EndDate},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DetailZapReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-DeviceComplianceDetailsReport
{
    [CmdletBinding()]
    param(
    
    [guid]
    ${DeviceCompliancePolicy},

    [string]
    ${DeviceComplianceStatus},

    [string]
    ${DevicePlatform},

    [string]
    ${DeviceUserName},

    ${EndDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DeviceComplianceDetailsReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-DeviceComplianceDetailsReportFilter
{
    [CmdletBinding()]
    param(
    
    ${EndDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DeviceComplianceDetailsReportFilter' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-DeviceCompliancePolicyInventory
{
    [CmdletBinding()]
    param(
    
    ${EndDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DeviceCompliancePolicyInventory' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-DeviceComplianceReportDate
{
    [CmdletBinding()]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DeviceComplianceReportDate' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-DeviceComplianceSummaryReport
{
    [CmdletBinding()]
    param(
    
    [guid]
    ${DeviceCompliancePolicy},

    [string]
    ${DeviceComplianceStatus},

    [string]
    ${DevicePlatform},

    [string]
    ${DeviceUserName},

    ${EndDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DeviceComplianceSummaryReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-DeviceComplianceUserInventory
{
    [CmdletBinding()]
    param(
    
    ${EndDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DeviceComplianceUserInventory' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-DeviceComplianceUserReport
{
    [CmdletBinding()]
    param(
    
    ${EndDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DeviceComplianceUserReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-DeviceConditionalAccessPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DeviceConditionalAccessPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-DeviceConditionalAccessRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DeviceConditionalAccessRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-DeviceConfigurationPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DeviceConfigurationPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-DeviceConfigurationRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DeviceConfigurationRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-DevicePolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DevicePolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-DeviceTenantPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DeviceTenantPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-DeviceTenantRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DeviceTenantRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-DistributionGroup
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='AnrSet')]
    [ValidateLength(3, 5120)]
    [string]
    ${Anr},

    [pscredential]
    ${Credential},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IncludeAcceptMessagesOnlyFromDLMembersWithDisplayNames},

    [switch]
    ${IncludeAcceptMessagesOnlyFromSendersOrMembersWithDisplayNames},

    [switch]
    ${IncludeAcceptMessagesOnlyFromWithDisplayNames},

    [switch]
    ${IncludeBypassModerationFromSendersOrMembersWithDisplayNames},

    [switch]
    ${IncludeGrantSendOnBehalfToWithDisplayNames},

    [switch]
    ${IncludeModeratedByWithDisplayNames},

    [Parameter(ParameterSetName='ManagedBySet')]
    ${ManagedBy},

    ${OrganizationalUnit},

    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${RecipientTypeDetails},

    ${ResultSize},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credential'))
            {
                $Credential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credential'] = Encrypt-Value -UnsecureString $Credential__Unsecure;
            }
            Execute-Command -CmdletName 'Get-DistributionGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-DistributionGroupMember
{
    [CmdletBinding()]
    param(
    
    [pscredential]
    ${Credential},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    ${Identity},

    [switch]
    ${IncludeSoftDeletedObjects},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credential'))
            {
                $Credential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credential'] = Encrypt-Value -UnsecureString $Credential__Unsecure;
            }
            Execute-Command -CmdletName 'Get-DistributionGroupMember' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-DkimSigningConfig
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DkimSigningConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-DlpDetailReport
{
    [CmdletBinding()]
    param(
    
    ${Action},

    ${Actor},

    ${DlpCompliancePolicy},

    ${DlpComplianceRule},

    ${EndDate},

    ${EventType},

    [int]
    ${Page},

    [int]
    ${PageSize},

    ${Source},

    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DlpDetailReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-DlpDetectionsReport
{
    [CmdletBinding()]
    param(
    
    ${Action},

    [string]
    ${AggregateBy},

    ${DlpCompliancePolicy},

    ${DlpComplianceRule},

    ${EndDate},

    ${EventType},

    [int]
    ${Page},

    [int]
    ${PageSize},

    ${Source},

    ${StartDate},

    ${SummarizeBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DlpDetectionsReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-DlpIncidentDetailReport
{
    [CmdletBinding()]
    param(
    
    ${Action},

    ${Actor},

    ${DlpCompliancePolicy},

    ${DlpComplianceRule},

    ${EndDate},

    ${EventType},

    [int]
    ${Page},

    [int]
    ${PageSize},

    ${Source},

    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DlpIncidentDetailReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-DlpKeywordDictionary
{
    [CmdletBinding()]
    param(
    
    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DlpKeywordDictionary' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-DlpPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DlpPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-DlpPolicyTemplate
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DlpPolicyTemplate' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-DlpSensitiveInformationTypeConfig
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DlpSensitiveInformationTypeConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-DlpSensitiveInformationTypeRulePackage
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    ${Capability},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DlpSensitiveInformationTypeRulePackage' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-DlpSiDetectionsReport
{
    [CmdletBinding()]
    param(
    
    ${EndDate},

    ${SensitiveType}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-DlpSiDetectionsReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

function script:Get-DnssecStatusForVerifiedDomain
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${DomainName},

    [switch]
    ${SkipDnsValidation},

    [switch]
    ${SkipMtaStsValidation},

    [switch]
    ${SkipMxValidation}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-DnssecStatusForVerifiedDomain' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-DynamicDistributionGroup
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='AnrSet')]
    [ValidateLength(3, 5120)]
    [string]
    ${Anr},

    [pscredential]
    ${Credential},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IncludeAcceptMessagesOnlyFromDLMembersWithDisplayNames},

    [switch]
    ${IncludeAcceptMessagesOnlyFromSendersOrMembersWithDisplayNames},

    [switch]
    ${IncludeAcceptMessagesOnlyFromWithDisplayNames},

    [switch]
    ${IncludeBypassModerationFromSendersOrMembersWithDisplayNames},

    [switch]
    ${IncludeGrantSendOnBehalfToWithDisplayNames},

    [switch]
    ${IncludeModeratedByWithDisplayNames},

    [Parameter(ParameterSetName='ManagedBySet')]
    ${ManagedBy},

    ${OrganizationalUnit},

    ${ResultSize},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credential'))
            {
                $Credential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credential'] = Encrypt-Value -UnsecureString $Credential__Unsecure;
            }
            Execute-Command -CmdletName 'Get-DynamicDistributionGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-DynamicDistributionGroupMember
{
    [CmdletBinding()]
    param(
    
    [pscredential]
    ${Credential},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    ${Identity},

    [switch]
    ${IncludeSoftDeletedObjects},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credential'))
            {
                $Credential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credential'] = Encrypt-Value -UnsecureString $Credential__Unsecure;
            }
            Execute-Command -CmdletName 'Get-DynamicDistributionGroupMember' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ElevatedAccessApprovalPolicy
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [Parameter(ParameterSetName='Default')]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ElevatedAccessApprovalPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ElevatedAccessAuthorization
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [Parameter(ParameterSetName='Default')]
    [string]
    ${RequestId},

    [Parameter(ParameterSetName='Default')]
    [string]
    ${Requestor}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ElevatedAccessAuthorization' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ElevatedAccessRequest
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [Parameter(ParameterSetName='Default')]
    [Alias('Identity')]
    [string]
    ${RequestId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ElevatedAccessRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-EligibleDistributionGroupForMigration
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='ManagedBySet')]
    ${ManagedBy},

    ${OrganizationalUnit},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-EligibleDistributionGroupForMigration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-EmailAddressPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-EmailAddressPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-EmailTenantSettings
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-EmailTenantSettings' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-EOPProtectionPolicyRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${State}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-EOPProtectionPolicyRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-EtrLimits
{
    [CmdletBinding()]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-EtrLimits' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-EvaluationModeReport
{
    [CmdletBinding()]
    param(
    
    [string]
    ${AggregateBy},

    [string]
    ${ConnectorId},

    ${Direction},

    ${EndDate},

    [string]
    ${EventSubType},

    [string]
    ${EventType},

    [string]
    ${IsComplexRouted},

    [string]
    ${IsEvaluationMode},

    [string]
    ${IsScanAndDrop},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    ${RecipientDomain},

    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-EvaluationModeReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-EvaluationModeReportSeries
{
    [CmdletBinding()]
    param(
    
    [string]
    ${AggregateBy},

    ${ConnectorIds},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Domain},

    ${EndDate},

    ${EventSubType},

    ${EventType},

    ${GroupByFields},

    [string]
    ${IsComplexRouted},

    [string]
    ${IsEvaluationMode},

    [string]
    ${IsScanAndDrop},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-EvaluationModeReportSeries' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-EventsFromEmailConfiguration
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-EventsFromEmailConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ExoConnectivityTableSnapshot
{
    [CmdletBinding(DefaultParameterSetName='ReadAll')]
    param(
    
    [switch]
    ${All},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${Organization},

    [switch]
    ${ShowTimestampsOnly},

    [string]
    ${Timestamp}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ExoConnectivityTableSnapshot' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ExoInformationBarrierPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${ShowFriendlyValues}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ExoInformationBarrierPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ExoInformationBarrierRelationship
{
    [CmdletBinding()]
    param(
    
    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${RecipientId1},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${RecipientId2}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ExoInformationBarrierRelationship' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ExoInformationBarrierRelationshipTable
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${Horizontal},

    [switch]
    ${NoRelationshipTableVisualResult},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${Organization}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-ExoInformationBarrierRelationshipTable' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ExoInformationBarrierSegment
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${ShowFriendlyValues}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ExoInformationBarrierSegment' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ExoInformationBarrierUpgradeImpact
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${Organization}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ExoInformationBarrierUpgradeImpact' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-ExoPhishSimOverrideRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNull()]
    ${Policy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-ExoPhishSimOverrideRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ExoRecipientsStatus
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [ValidateNotNullOrEmpty()]
    ${Organization},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${RecipientIds}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-ExoRecipientsStatus' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-ExoSecOpsOverrideRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNull()]
    ${Policy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-ExoSecOpsOverrideRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ExoSegmentsSnapshot
{
    [CmdletBinding(DefaultParameterSetName='ReadAll')]
    param(
    
    [switch]
    ${All},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${Organization},

    [switch]
    ${ShowTimestampsOnly},

    [string]
    ${Timestamp}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ExoSegmentsSnapshot' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ExoUsersByIBSegment
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(Mandatory=$true)]
    ${Mode},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${Organization},

    [string]
    ${SegmentId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ExoUsersByIBSegment' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-ExternalInOutlook
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ExternalInOutlook' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-FailedContentIndexDocuments
{
    [CmdletBinding(DefaultParameterSetName='mailbox', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='mailbox')]
    [switch]
    ${Archive},

    ${EndDate},

    [ValidateRange(1, 200)]
    ${ErrorCode},

    ${FailureMode},

    [Parameter(ParameterSetName='mailbox', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Alias('mailbox')]
    [ValidateNotNullOrEmpty()]
    ${Identity},

    ${ResultSize},

    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-FailedContentIndexDocuments' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-FederationInformation
{
    [CmdletBinding()]
    param(
    
    [switch]
    ${BypassAdditionalDomainValidation},

    [Parameter(Mandatory=$true)]
    ${DomainName},

    [switch]
    ${Force},

    ${TrustedHostnames}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-FederationInformation' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-FederationTrust
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-FederationTrust' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-FfoMigrationReport
{
    [CmdletBinding()]
    param(
    
    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-FfoMigrationReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-Group
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='AnrSet')]
    [ValidateLength(3, 5120)]
    [string]
    ${Anr},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${OrganizationalUnit},

    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${RecipientTypeDetails},

    ${ResultSize},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-Group' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-HistoricalSearch
{
    [CmdletBinding()]
    param(
    
    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${JobId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-HistoricalSearch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-HostedConnectionFilterPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-HostedConnectionFilterPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-HostedContentFilterPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-HostedContentFilterPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-HostedContentFilterRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${State}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-HostedContentFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-HostedOutboundSpamFilterPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-HostedOutboundSpamFilterPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-HostedOutboundSpamFilterRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${State}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-HostedOutboundSpamFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Get-HybridMailflowDatacenterIPs
{
    [CmdletBinding()]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-HybridMailflowDatacenterIPs' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-InboundConnector
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-InboundConnector' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-InboxRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [switch]
    ${BypassScopeCheck},

    [string]
    ${DescriptionTimeFormat},

    ${DescriptionTimeZone},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IncludeHidden},

    ${Mailbox},

    ${ResultSize},

    [int]
    ${SkipCount},

    [switch]
    ${UseCustomRouting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$false -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-InboxRule' -Parameters $PSBoundParameters -ParameterBasedRoutingHintDelegate Get-MailboxIDBasedRoutingHint -ParameterBasedRoutingHintParameterValue $Mailbox -UseParameterBasedRouting (Should-UseCustomRoutingHint $UseCustomRouting.IsPresent) -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-InformationBarrierReportDetails
{
    [CmdletBinding()]
    param(
    
    ${Action},

    [string]
    ${AggregateBy},

    ${EndDate},

    ${EventType},

    ${InformationBarrierPolicy},

    [string]
    ${InitiatingUser},

    [int]
    ${Page},

    [int]
    ${PageSize},

    ${Source},

    ${StartDate},

    ${TargetUsers}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-InformationBarrierReportDetails' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-InformationBarrierReportSummary
{
    [CmdletBinding()]
    param(
    
    ${Action},

    ${EndDate},

    ${EventType},

    ${InformationBarrierPolicy},

    [string]
    ${InitiatingUser},

    [int]
    ${Page},

    [int]
    ${PageSize},

    ${Source},

    ${StartDate},

    ${TargetUsers}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-InformationBarrierReportSummary' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-IntraOrganizationConfiguration
{
    [CmdletBinding()]
    param(
    
    [Parameter(Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${OrganizationGuid}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-IntraOrganizationConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-IntraOrganizationConnector
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-IntraOrganizationConnector' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailControl-Help.xml
function script:Get-IRMConfiguration
{
    [CmdletBinding()]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-IRMConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-JitConfiguration
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-JitConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailControl-Help.xml
function script:Get-JournalRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-JournalRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-LinkedUser
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='AnrSet')]
    [ValidateLength(3, 5120)]
    [string]
    ${Anr},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${OrganizationalUnit},

    ${ResultSize},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-LinkedUser' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-LogonStatistics
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='AuditLog')]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-LogonStatistics' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-M365CrossTenantAccessPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${ObjectId},

    [string]
    ${PartnerIdentifier},

    ${PolicyType}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-M365CrossTenantAccessPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-M365DataAtRestEncryptionPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-M365DataAtRestEncryptionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-M365DataAtRestEncryptionPolicyAssignment
{
    [CmdletBinding()]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-M365DataAtRestEncryptionPolicyAssignment' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-Mailbox
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='AnrSet')]
    [ValidateLength(3, 5120)]
    [string]
    ${Anr},

    [switch]
    ${Archive},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [switch]
    ${GroupMailbox},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${InactiveMailboxOnly},

    [switch]
    ${IncludeAcceptMessagesOnlyFromDLMembersWithDisplayNames},

    [switch]
    ${IncludeAcceptMessagesOnlyFromSendersOrMembersWithDisplayNames},

    [switch]
    ${IncludeAcceptMessagesOnlyFromWithDisplayNames},

    [switch]
    ${IncludeEmailAddressDisplayNames},

    [switch]
    ${IncludeInactiveMailbox},

    [Parameter(ParameterSetName='MailboxPlanSet', ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    ${MailboxPlan},

    [switch]
    ${Migration},

    ${OrganizationalUnit},

    [switch]
    ${PublicFolder},

    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${RecipientTypeDetails},

    ${ResultSize},

    [switch]
    ${SoftDeletedMailbox},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
            $NamedPositionalAndDynamicParameters = New-Object System.Collections.ArrayList;
            foreach ($param in $PSBoundParameters.GetEnumerator())
            {
                [void]$NamedPositionalAndDynamicParameters.Add($param.Key);
            }
    
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $pipelineObjectBoundParameterKey = $null
            $pipelineObjectBoundParameterValue =  $null
            foreach ($param in $PSBoundParameters.GetEnumerator())
            {          
                if(-not $NamedPositionalAndDynamicParameters.Contains($param.Key))
                {
                    $pipelineObjectBoundParameterKey = $param.Key
                    $pipelineObjectBoundParameterValue = $param.Value
                    break
                }
            }
            
            if ($pipelineObjectBoundParameterKey -ne $null)
            {
                # Extracting Type Information from $pipelineObjectBoundParameterValue. This will be stored in TypeName field for every Property
                # Ideally TypeName is same for every Property. Adding -Unique
                $pipelineObjectBoundParameterValueType = $pipelineObjectBoundParameterValue | Get-Member | select -ExpandProperty Typename -Unique -First 1
                
                if (($pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Configuration.Tasks.MailboxIdParameter') -or $pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Data.Directory.Management.Mailbox') -or $pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Data.Directory.Management.ConsumerMailbox')) -and $pipelineObjectBoundParameterKey -ne 'Identity')
                    {
                        $PSBoundParameters['Identity'] = $PSBoundParameters[$pipelineObjectBoundParameterKey]
                        [void]$PSBoundParameters.Remove($pipelineObjectBoundParameterKey)
                
                        $parameterSetValidated = Validate-ParameterSet -CmdletName 'Get-Mailbox' -ParameterList $PSBoundParameters.Keys
                        if($parameterSetValidated -eq $false)
                        {
                            $PSBoundParameters[$pipelineObjectBoundParameterKey] = $PSBoundParameters['Identity']
                            [void]$PSBoundParameters.Remove('Identity')
                        }
                    }
                
                if (($pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Configuration.Tasks.MailboxPlanIdParameter')) -and $pipelineObjectBoundParameterKey -ne 'MailboxPlan')
                    {
                        $PSBoundParameters['MailboxPlan'] = $PSBoundParameters[$pipelineObjectBoundParameterKey]
                        [void]$PSBoundParameters.Remove($pipelineObjectBoundParameterKey)
                
                        $parameterSetValidated = Validate-ParameterSet -CmdletName 'Get-Mailbox' -ParameterList $PSBoundParameters.Keys
                        if($parameterSetValidated -eq $false)
                        {
                            $PSBoundParameters[$pipelineObjectBoundParameterKey] = $PSBoundParameters['MailboxPlan']
                            [void]$PSBoundParameters.Remove('MailboxPlan')
                        }
                    }
                 
            }
            
            Execute-Command -CmdletName 'Get-Mailbox' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-MailboxAnalysisRequest
{
    [CmdletBinding(DefaultParameterSetName='Filtering')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    ${Identity},

    [Parameter(ParameterSetName='Filtering')]
    [ValidateNotNull()]
    ${Mailbox},

    ${ResultSize},

    [Parameter(ParameterSetName='Filtering')]
    [ValidateNotNull()]
    [System.Object[]]
    ${SyncProtocol}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailboxAnalysisRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-MailboxAnalysisRequestStatistics
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='IncludeAnalysisResult')]
    [Parameter(ParameterSetName='IncludeMappingResult')]
    [byte[]]
    ${CSVData},

    [string]
    ${DiagnosticInfo},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='IncludeAnalysisResult', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='IncludeMappingResult', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    ${Identity},

    [Parameter(ParameterSetName='IncludeAnalysisResult', Mandatory=$true)]
    [switch]
    ${IncludeAnalysisResult},

    [Parameter(ParameterSetName='IncludeAnalysisResult')]
    [Parameter(ParameterSetName='IncludeMappingResult')]
    [switch]
    ${IncludeFolderDetails},

    [Parameter(ParameterSetName='IncludeMappingResult', Mandatory=$true)]
    [switch]
    ${IncludeMappingResult},

    [switch]
    ${IncludeReport},

    [Parameter(ParameterSetName='IncludeAnalysisResult')]
    [Parameter(ParameterSetName='IncludeMappingResult')]
    [string]
    ${ItemsStartTime},

    [switch]
    ${ReportOnly}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailboxAnalysisRequestStatistics' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Get-MailboxAuditBypassAssociation
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailboxAuditBypassAssociation' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-MailboxAutoReplyConfiguration
{
    [CmdletBinding()]
    param(
    
    [pscredential]
    ${Credential},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${ReadFromDomainController},

    ${ResultSize},

    [switch]
    ${UseCustomRouting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$false -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credential'))
            {
                $Credential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credential'] = Encrypt-Value -UnsecureString $Credential__Unsecure;
            }
            Execute-Command -CmdletName 'Get-MailboxAutoReplyConfiguration' -Parameters $PSBoundParameters -ParameterBasedRoutingHintDelegate Get-MailboxIDBasedRoutingHint -ParameterBasedRoutingHintParameterValue $Identity -UseParameterBasedRouting (Should-UseCustomRoutingHint $UseCustomRouting.IsPresent) -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-MailboxCalendarConfiguration
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='MailboxLocation')]
    ${MailboxLocation}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailboxCalendarConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-MailboxCalendarFolder
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${UseCustomRouting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$false -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailboxCalendarFolder' -Parameters $PSBoundParameters -ParameterBasedRoutingHintDelegate Get-MailboxFolderIDBasedRoutingHint -ParameterBasedRoutingHintParameterValue $Identity -UseParameterBasedRouting (Should-UseCustomRoutingHint $UseCustomRouting.IsPresent) -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

function script:Get-MailboxExtendedProperty
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailboxExtendedProperty' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-MailboxFolderPermission
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [switch]
    ${GroupMailbox},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${ResultSize},

    [int]
    ${SkipCount},

    ${User},

    [switch]
    ${UseCustomRouting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$false -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailboxFolderPermission' -Parameters $PSBoundParameters -ParameterBasedRoutingHintDelegate Get-MailboxFolderIDBasedRoutingHint -ParameterBasedRoutingHintParameterValue $Identity -UseParameterBasedRouting (Should-UseCustomRoutingHint $UseCustomRouting.IsPresent) -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Get-MailboxFolderStatistics
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${Archive},

    [Parameter(ParameterSetName='Database', Mandatory=$true)]
    ${Database},

    [string]
    ${DiagnosticInfo},

    ${FolderScope},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='AuditLog')]
    ${Identity},

    [switch]
    ${IncludeAnalysis},

    [switch]
    ${IncludeOldestAndNewestItems},

    [switch]
    ${IncludeSoftDeletedRecipients},

    ${ResultSize},

    [int]
    ${SkipCount},

    [Parameter(ParameterSetName='Database', Mandatory=$true)]
    ${StoreMailboxIdentity},

    [switch]
    ${UseCustomRouting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$false -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailboxFolderStatistics' -Parameters $PSBoundParameters -ParameterBasedRoutingHintDelegate Get-MailboxIDBasedRoutingHint -ParameterBasedRoutingHintParameterValue $Identity -UseParameterBasedRouting (Should-UseCustomRoutingHint $UseCustomRouting.IsPresent) -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MailboxIRMAccess
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${User}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailboxIRMAccess' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-MailboxJunkEmailConfiguration
{
    [CmdletBinding()]
    param(
    
    [pscredential]
    ${Credential},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${ReadFromDomainController},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credential'))
            {
                $Credential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credential'] = Encrypt-Value -UnsecureString $Credential__Unsecure;
            }
            Execute-Command -CmdletName 'Get-MailboxJunkEmailConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-MailboxLocation
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0)]
    ${Identity},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='MailUniversalDistributionGroup')]
    [Parameter(ParameterSetName='Organization')]
    [switch]
    ${IncludePreviousPrimary},

    ${MailboxLocationType},

    ${ResultSize},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipeline=$true)]
    ${User}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-MailboxLocation' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-MailboxMessageConfiguration
{
    [CmdletBinding()]
    param(
    
    [pscredential]
    ${Credential},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${ReadFromDomainController},

    ${ResultSize},

    [string]
    ${SignatureName},

    [switch]
    ${UseCustomRouting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$false -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credential'))
            {
                $Credential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credential'] = Encrypt-Value -UnsecureString $Credential__Unsecure;
            }
            Execute-Command -CmdletName 'Get-MailboxMessageConfiguration' -Parameters $PSBoundParameters -ParameterBasedRoutingHintDelegate Get-MailboxIDBasedRoutingHint -ParameterBasedRoutingHintParameterValue $Identity -UseParameterBasedRouting (Should-UseCustomRoutingHint $UseCustomRouting.IsPresent) -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-MailboxOverrideConfiguration
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailboxOverrideConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-MailboxPermission
{
    [CmdletBinding(DefaultParameterSetName='AccessRights')]
    param(
    
    [pscredential]
    ${Credential},

    [Parameter(ParameterSetName='AccessRights')]
    [Parameter(ParameterSetName='Owner')]
    [switch]
    ${GroupMailbox},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='AccessRights')]
    [switch]
    ${IncludeSoftDeletedUserPermissions},

    [Parameter(ParameterSetName='AccessRights')]
    [switch]
    ${IncludeUnresolvedPermissions},

    [Parameter(ParameterSetName='Owner')]
    [switch]
    ${Owner},

    [switch]
    ${ReadFromDomainController},

    ${ResultSize},

    [Parameter(ParameterSetName='AccessRights')]
    [switch]
    ${SoftDeletedMailbox},

    [Parameter(ParameterSetName='AccessRights')]
    ${User},

    [switch]
    ${UseCustomRouting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$false -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credential'))
            {
                $Credential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credential'] = Encrypt-Value -UnsecureString $Credential__Unsecure;
            }
            Execute-Command -CmdletName 'Get-MailboxPermission' -Parameters $PSBoundParameters -ParameterBasedRoutingHintDelegate Get-MailboxIDBasedRoutingHint -ParameterBasedRoutingHintParameterValue $Identity -UseParameterBasedRouting (Should-UseCustomRoutingHint $UseCustomRouting.IsPresent) -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-MailboxPlan
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [switch]
    ${AllMailboxPlanReleases},

    [pscredential]
    ${Credential},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    ${ResultSize},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credential'))
            {
                $Credential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credential'] = Encrypt-Value -UnsecureString $Credential__Unsecure;
            }
            Execute-Command -CmdletName 'Get-MailboxPlan' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-MailboxRegionalConfiguration
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${Archive},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='MailboxLocation')]
    ${MailboxLocation},

    [switch]
    ${VerifyDefaultFolderNameLanguage},

    [switch]
    ${UseCustomRouting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$false -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailboxRegionalConfiguration' -Parameters $PSBoundParameters -ParameterBasedRoutingHintDelegate Get-MailboxIDBasedRoutingHint -ParameterBasedRoutingHintParameterValue $Identity -UseParameterBasedRouting (Should-UseCustomRoutingHint $UseCustomRouting.IsPresent) -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-MailboxRestoreRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Filtering')]
    [string]
    ${BatchName},

    [Parameter(ParameterSetName='Filtering')]
    [bool]
    ${HighPriority},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Filtering')]
    [string]
    ${Name},

    ${ResultSize},

    [Parameter(ParameterSetName='Filtering')]
    ${Status},

    [Parameter(ParameterSetName='Filtering')]
    [bool]
    ${Suspend},

    [Parameter(ParameterSetName='Filtering')]
    [ValidateNotNull()]
    ${TargetMailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailboxRestoreRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-MailboxRestoreRequestStatistics
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [string]
    ${DiagnosticInfo},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    ${Identity},

    [switch]
    ${IncludeReport},

    [switch]
    ${IncludeSkippedItems},

    [switch]
    ${ReportOnly}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailboxRestoreRequestStatistics' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Get-MailboxSearch
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='InPlaceHoldIdentity', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${InPlaceHoldIdentity},

    ${ResultSize},

    [switch]
    ${ShowDeletionInProgressSearches}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailboxSearch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-MailboxSpellingConfiguration
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailboxSpellingConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MailboxStatistics
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${Archive},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='AuditLog')]
    ${Identity},

    [switch]
    ${IncludeMoveHistory},

    [switch]
    ${IncludeMoveReport},

    [switch]
    ${IncludeSoftDeletedRecipients},

    [switch]
    ${UseCustomRouting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$false -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailboxStatistics' -Parameters $PSBoundParameters -ParameterBasedRoutingHintDelegate Get-MailboxIDBasedRoutingHint -ParameterBasedRoutingHintParameterValue $Identity -UseParameterBasedRouting (Should-UseCustomRoutingHint $UseCustomRouting.IsPresent) -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-MailboxUserConfiguration
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(Mandatory=$true)]
    ${Mailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-MailboxUserConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-MailContact
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='AnrSet')]
    [ValidateLength(3, 5120)]
    [string]
    ${Anr},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${OrganizationalUnit},

    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${RecipientTypeDetails},

    ${ResultSize},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailContact' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MailDetailATPReport
{
    [CmdletBinding()]
    param(
    
    [string]
    ${DataSource},

    ${Direction},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Domain},

    ${EndDate},

    ${EventType},

    ${MalwareName},

    ${MessageId},

    ${MessageTraceId},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    ${RecipientAddress},

    ${SenderAddress},

    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailDetailATPReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MailDetailDlpPolicyReport
{
    [CmdletBinding()]
    param(
    
    ${Action},

    ${Direction},

    ${DlpPolicy},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Domain},

    ${EndDate},

    ${EventType},

    ${MessageId},

    ${MessageTraceId},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    ${RecipientAddress},

    ${SenderAddress},

    ${StartDate},

    ${TransportRule}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailDetailDlpPolicyReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MailDetailEncryptionReport
{
    [CmdletBinding()]
    param(
    
    [string]
    ${AggregateBy},

    ${Direction},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Domain},

    ${EndDate},

    ${EventType},

    ${MessageId},

    ${MessageTraceId},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailDetailEncryptionReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MailDetailEvaluationModeReport
{
    [CmdletBinding()]
    param(
    
    [string]
    ${ConnectorId},

    ${EndDate},

    [string]
    ${EventSubType},

    [string]
    ${EventType},

    [string]
    ${IsComplexRouted},

    [string]
    ${IsEvaluationMode},

    [string]
    ${IsScanAndDrop},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    ${RecipientDomain},

    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailDetailEvaluationModeReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MailDetailTransportRuleReport
{
    [CmdletBinding()]
    param(
    
    ${Action},

    ${Direction},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Domain},

    ${EndDate},

    ${EventType},

    ${MessageId},

    ${MessageTraceId},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    ${RecipientAddress},

    ${SenderAddress},

    ${StartDate},

    ${TransportRule}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailDetailTransportRuleReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MailFilterListReport
{
    [CmdletBinding()]
    param(
    
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Domain},

    [string]
    ${ProbeTag},

    ${SelectionTarget}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailFilterListReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MailFlowStatusReport
{
    [CmdletBinding()]
    param(
    
    ${Direction},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Domain},

    ${EndDate},

    ${EventType},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailFlowStatusReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-MailPublicFolder
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='AnrSet')]
    [ValidateLength(3, 5120)]
    [string]
    ${Anr},

    [pscredential]
    ${Credential},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    ${ResultSize},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credential'))
            {
                $Credential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credential'] = Encrypt-Value -UnsecureString $Credential__Unsecure;
            }
            Execute-Command -CmdletName 'Get-MailPublicFolder' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MailTrafficATPReport
{
    [CmdletBinding()]
    param(
    
    ${Action},

    [string]
    ${AggregateBy},

    ${Direction},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Domain},

    ${EndDate},

    ${EventType},

    [int]
    ${NumberOfRows},

    [int]
    ${Page},

    [int]
    ${PageSize},

    ${PivotBy},

    [string]
    ${ProbeTag},

    ${StartDate},

    ${SummarizeBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailTrafficATPReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MailTrafficEncryptionReport
{
    [CmdletBinding()]
    param(
    
    ${Action},

    [string]
    ${AggregateBy},

    ${Direction},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Domain},

    ${EndDate},

    ${EventType},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    ${StartDate},

    ${SummarizeBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailTrafficEncryptionReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MailTrafficPolicyReport
{
    [CmdletBinding()]
    param(
    
    ${Action},

    [string]
    ${AggregateBy},

    ${Direction},

    ${DlpPolicy},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Domain},

    ${EndDate},

    ${EventType},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    ${StartDate},

    ${SummarizeBy},

    ${TransportRule}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailTrafficPolicyReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MailTrafficSummaryReport
{
    [CmdletBinding()]
    param(
    
    [string]
    ${Category},

    ${DlpPolicy},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Domain},

    ${EndDate},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    ${StartDate},

    ${TransportRule}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MailTrafficSummaryReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-MailUser
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='AnrSet')]
    [ValidateLength(3, 5120)]
    [string]
    ${Anr},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='LOBAppAccount')]
    [switch]
    ${LOBAppAccount},

    ${OrganizationalUnit},

    ${ResultSize},

    [switch]
    ${SharedWithMailUser},

    [switch]
    ${SoftDeletedMailUser},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'get-MailUser' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-MalwareFilterPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MalwareFilterPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-MalwareFilterRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${State}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MalwareFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ManagementRole
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [string]
    ${Cmdlet},

    [Parameter(ParameterSetName='Identity')]
    [string[]]
    ${CmdletParameters},

    [Parameter(ParameterSetName='GetChildren', Mandatory=$true)]
    [switch]
    ${GetChildren},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Script', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Recurse', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='GetChildren', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Recurse', Mandatory=$true)]
    [switch]
    ${Recurse},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='Recurse')]
    [Parameter(ParameterSetName='GetChildren')]
    ${RoleType},

    [Parameter(ParameterSetName='Script')]
    [string]
    ${Script},

    [Parameter(ParameterSetName='Script')]
    [string[]]
    ${ScriptParameters}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ManagementRole' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ManagementRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='RoleAssignee')]
    [System.Object[]]
    ${AssignmentMethod},

    ${ConfigWriteScope},

    [ValidateNotNullOrEmpty()]
    ${CustomRecipientWriteScope},

    [bool]
    ${Delegating},

    [bool]
    ${Enabled},

    [bool]
    ${Exclusive},

    [ValidateNotNullOrEmpty()]
    ${ExclusiveRecipientWriteScope},

    [switch]
    ${GetEffectiveUsers},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    ${RecipientAdministrativeUnitScope},

    [ValidateNotNullOrEmpty()]
    ${RecipientGroupScope},

    [ValidateNotNullOrEmpty()]
    ${RecipientOrganizationalUnitScope},

    ${RecipientWriteScope},

    [Parameter(ParameterSetName='RoleAssignee', ValueFromPipeline=$true)]
    ${Role},

    [Parameter(ParameterSetName='RoleAssignee')]
    ${RoleAssignee},

    ${RoleAssigneeType},

    [ValidateNotNullOrEmpty()]
    ${WritableRecipient}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
            $NamedPositionalAndDynamicParameters = New-Object System.Collections.ArrayList;
            foreach ($param in $PSBoundParameters.GetEnumerator())
            {
                [void]$NamedPositionalAndDynamicParameters.Add($param.Key);
            }
    
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $pipelineObjectBoundParameterKey = $null
            $pipelineObjectBoundParameterValue =  $null
            foreach ($param in $PSBoundParameters.GetEnumerator())
            {          
                if(-not $NamedPositionalAndDynamicParameters.Contains($param.Key))
                {
                    $pipelineObjectBoundParameterKey = $param.Key
                    $pipelineObjectBoundParameterValue = $param.Value
                    break
                }
            }
            
            if ($pipelineObjectBoundParameterKey -ne $null)
            {
                # Extracting Type Information from $pipelineObjectBoundParameterValue. This will be stored in TypeName field for every Property
                # Ideally TypeName is same for every Property. Adding -Unique
                $pipelineObjectBoundParameterValueType = $pipelineObjectBoundParameterValue | Get-Member | select -ExpandProperty Typename -Unique -First 1
                
                if (($pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Configuration.Tasks.RoleAssignmentIdParameter')) -and $pipelineObjectBoundParameterKey -ne 'Identity')
                    {
                        $PSBoundParameters['Identity'] = $PSBoundParameters[$pipelineObjectBoundParameterKey]
                        [void]$PSBoundParameters.Remove($pipelineObjectBoundParameterKey)
                
                        $parameterSetValidated = Validate-ParameterSet -CmdletName 'Get-ManagementRoleAssignment' -ParameterList $PSBoundParameters.Keys
                        if($parameterSetValidated -eq $false)
                        {
                            $PSBoundParameters[$pipelineObjectBoundParameterKey] = $PSBoundParameters['Identity']
                            [void]$PSBoundParameters.Remove('Identity')
                        }
                    }
                
                if (($pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Configuration.Tasks.RoleIdParameter') -or $pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Data.Directory.SystemConfiguration.ExchangeRole')) -and $pipelineObjectBoundParameterKey -ne 'Role')
                    {
                        $PSBoundParameters['Role'] = $PSBoundParameters[$pipelineObjectBoundParameterKey]
                        [void]$PSBoundParameters.Remove($pipelineObjectBoundParameterKey)
                
                        $parameterSetValidated = Validate-ParameterSet -CmdletName 'Get-ManagementRoleAssignment' -ParameterList $PSBoundParameters.Keys
                        if($parameterSetValidated -eq $false)
                        {
                            $PSBoundParameters[$pipelineObjectBoundParameterKey] = $PSBoundParameters['Role']
                            [void]$PSBoundParameters.Remove('Role')
                        }
                    }
                 
            }
            
            Execute-Command -CmdletName 'Get-ManagementRoleAssignment' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ManagementRoleEntry
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string[]]
    ${Parameters},

    [string]
    ${PSSnapinName},

    ${ResultSize},

    [System.Object[]]
    ${Type}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ManagementRoleEntry' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ManagementScope
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [bool]
    ${Exclusive},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${Orphan}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ManagementScope' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-MessageCategory
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Mailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MessageCategory' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Get-MessageClassification
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IncludeLocales}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MessageClassification' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MessageTrace
{
    [CmdletBinding()]
    param(
    
    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${EndDate},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FromIP},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${MessageId},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${MessageTraceId},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${RecipientAddress},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${SenderAddress},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${StartDate},

    ${Status},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ToIP}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MessageTrace' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MessageTraceDetail
{
    [CmdletBinding()]
    param(
    
    ${Action},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${EndDate},

    ${Event},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${MessageId},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [guid]
    ${MessageTraceId},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RecipientAddress},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SenderAddress},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MessageTraceDetail' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-MessageTraceDetailV2
{
    [CmdletBinding()]
    param(
    
    ${Action},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('Torus','EAC','TenantAdmin','LocalABTest','OnlineABTest')]
    [string]
    ${CmdletCaller},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${EndDate},

    ${Event},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${MessageId},

    [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [guid]
    ${MessageTraceId},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RecipientAddress},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SenderAddress},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MessageTraceDetailV2' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-MessageTraceV2
{
    [CmdletBinding()]
    param(
    
    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('Torus','EAC','TenantAdmin','LocalABTest','OnlineABTest')]
    [string]
    ${CmdletCaller},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${EndDate},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FromIP},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${MessageId},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${MessageTraceId},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${RecipientAddress},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${SenderAddress},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${StartDate},

    ${Status},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Subject},

    [Parameter(ValueFromPipelineByPropertyName=$true, HelpMessage='Supported filter type: Contains,StartWith,EndWith')]
    [ValidateSet('contains','startswith','endswith')]
    [string]
    ${SubjectFilterType},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ToIP}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MessageTraceV2' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-MessageTrackingReport
{
    [CmdletBinding()]
    param(
    
    [switch]
    ${BypassDelegateChecking},

    [switch]
    ${DoNotResolve},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${RecipientPathFilter},

    [string[]]
    ${Recipients},

    ${ReportTemplate},

    ${ResultSize},

    ${Status}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MessageTrackingReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-MigrationBatch
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [string]
    ${DiagnosticInfo},

    [Parameter(ParameterSetName='BatchesByEndpoint')]
    ${Endpoint},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IncludeReport},

    ${Partition},

    ${ResultSize},

    [Parameter(ParameterSetName='BatchesByStatus')]
    ${Status}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MigrationBatch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-MigrationConfig
{
    [CmdletBinding()]
    param(
    
    ${Partition}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MigrationConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-MigrationEndpoint
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [string]
    ${DiagnosticInfo},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Partition},

    [Parameter(ParameterSetName='TypeFilter', Mandatory=$true)]
    ${Type}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MigrationEndpoint' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-MigrationStatistics
{
    [CmdletBinding()]
    param(
    
    [string]
    ${DiagnosticInfo},

    ${Partition}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MigrationStatistics' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-MigrationUser
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='StatusAndBatchId')]
    [ValidateNotNullOrEmpty()]
    ${BatchId},

    [Parameter(ParameterSetName='EmailAddress', Mandatory=$true)]
    [ValidateNotNull()]
    ${EmailAddress},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IncludeAssociatedUsers},

    [Parameter(ParameterSetName='MailboxGuid', Mandatory=$true)]
    [ValidateNotNull()]
    ${MailboxGuid},

    ${Partition},

    ${ResultSize},

    [Parameter(ParameterSetName='StatusAndBatchId')]
    [ValidateNotNull()]
    ${Status},

    [Parameter(ParameterSetName='StatusAndBatchId')]
    [ValidateNotNull()]
    ${StatusSummary}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MigrationUser' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-MigrationUserStatistics
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [string]
    ${DiagnosticInfo},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IncludeCopilotReport},

    [switch]
    ${IncludeReport},

    [switch]
    ${IncludeSkippedItems},

    ${LimitSkippedItemsTo},

    ${Partition},

    [switch]
    ${SkipSubscription}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MigrationUserStatistics' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Get-MobileDevice
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [switch]
    ${ActiveSync},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Mailbox', Mandatory=$true, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    ${Mailbox},

    ${OrganizationalUnit},

    [switch]
    ${OWAforDevices},

    [switch]
    ${RestApi},

    ${ResultSize},

    [string]
    ${SortBy},

    [switch]
    ${UniversalOutlook}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
            $NamedPositionalAndDynamicParameters = New-Object System.Collections.ArrayList;
            foreach ($param in $PSBoundParameters.GetEnumerator())
            {
                [void]$NamedPositionalAndDynamicParameters.Add($param.Key);
            }
    
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $pipelineObjectBoundParameterKey = $null
            $pipelineObjectBoundParameterValue =  $null
            foreach ($param in $PSBoundParameters.GetEnumerator())
            {          
                if(-not $NamedPositionalAndDynamicParameters.Contains($param.Key))
                {
                    $pipelineObjectBoundParameterKey = $param.Key
                    $pipelineObjectBoundParameterValue = $param.Value
                    break
                }
            }
            
            if ($pipelineObjectBoundParameterKey -ne $null)
            {
                # Extracting Type Information from $pipelineObjectBoundParameterValue. This will be stored in TypeName field for every Property
                # Ideally TypeName is same for every Property. Adding -Unique
                $pipelineObjectBoundParameterValueType = $pipelineObjectBoundParameterValue | Get-Member | select -ExpandProperty Typename -Unique -First 1
                
                if (($pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Configuration.Tasks.MobileDeviceIdParameter')) -and $pipelineObjectBoundParameterKey -ne 'Identity')
                    {
                        $PSBoundParameters['Identity'] = $PSBoundParameters[$pipelineObjectBoundParameterKey]
                        [void]$PSBoundParameters.Remove($pipelineObjectBoundParameterKey)
                
                        $parameterSetValidated = Validate-ParameterSet -CmdletName 'Get-MobileDevice' -ParameterList $PSBoundParameters.Keys
                        if($parameterSetValidated -eq $false)
                        {
                            $PSBoundParameters[$pipelineObjectBoundParameterKey] = $PSBoundParameters['Identity']
                            [void]$PSBoundParameters.Remove('Identity')
                        }
                    }
                
                if (($pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Configuration.Tasks.MailboxIdParameter') -or $pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Data.Directory.Management.Mailbox') -or $pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Data.Directory.Management.ConsumerMailbox')) -and $pipelineObjectBoundParameterKey -ne 'Mailbox')
                    {
                        $PSBoundParameters['Mailbox'] = $PSBoundParameters[$pipelineObjectBoundParameterKey]
                        [void]$PSBoundParameters.Remove($pipelineObjectBoundParameterKey)
                
                        $parameterSetValidated = Validate-ParameterSet -CmdletName 'Get-MobileDevice' -ParameterList $PSBoundParameters.Keys
                        if($parameterSetValidated -eq $false)
                        {
                            $PSBoundParameters[$pipelineObjectBoundParameterKey] = $PSBoundParameters['Mailbox']
                            [void]$PSBoundParameters.Remove('Mailbox')
                        }
                    }
                 
            }
            
            Execute-Command -CmdletName 'Get-MobileDevice' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MobileDeviceDashboardSummaryReport
{
    [CmdletBinding()]
    param(
    
    [ValidateSet('EAS','Intune')]
    [string]
    ${DeviceType},

    ${EndDate},

    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MobileDeviceDashboardSummaryReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Get-MobileDeviceMailboxPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'get-MobileDeviceMailboxPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Get-MobileDeviceStatistics
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [switch]
    ${ActiveSync},

    [switch]
    ${GetMailboxLog},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Mailbox', Mandatory=$true, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    ${Mailbox},

    ${NotificationEmailAddresses},

    [switch]
    ${OWAforDevices},

    [switch]
    ${RestApi},

    [switch]
    ${ShowRecoveryPassword},

    [switch]
    ${UniversalOutlook},

    [switch]
    ${UseCustomRouting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$false -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MobileDeviceStatistics' -Parameters $PSBoundParameters -ParameterBasedRoutingHintDelegate Get-MailboxIDBasedRoutingHint -ParameterBasedRoutingHintParameterValue $Mailbox -UseParameterBasedRouting (Should-UseCustomRoutingHint $UseCustomRouting.IsPresent) -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-MoveRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Filtering')]
    [string]
    ${BatchName},

    [Parameter(ParameterSetName='Filtering')]
    ${Flags},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Filtering')]
    [bool]
    ${Offline},

    ${ProxyToMailbox},

    [Parameter(ParameterSetName='Filtering')]
    ${RemoteHostName},

    ${ResultSize},

    [Parameter(ParameterSetName='Filtering')]
    [Alias('MoveStatus')]
    ${Status},

    [Parameter(ParameterSetName='Filtering')]
    [bool]
    ${Suspend},

    [Parameter(ParameterSetName='Filtering')]
    [bool]
    ${SuspendWhenReadyToComplete}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MoveRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-MoveRequestStatistics
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${Analysis},

    [string]
    ${DiagnosticInfo},

    [switch]
    ${DiagnosticOnly},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    ${Identity},

    [switch]
    ${IncludeReport},

    ${ProxyToMailbox},

    [switch]
    ${ReportOnly}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MoveRequestStatistics' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MxRecordReport
{
    [CmdletBinding()]
    param(
    
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Domain},

    [string]
    ${ProbeTag}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MxRecordReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-MxRecordsReport
{
    [CmdletBinding()]
    param(
    
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Domain},

    [string]
    ${ProbeTag}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-MxRecordsReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-Notification
{
    [CmdletBinding(DefaultParameterSetName='Filter')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Filter')]
    [Parameter(ParameterSetName='Settings', Mandatory=$true)]
    ${ProcessType},

    [Parameter(ParameterSetName='Filter')]
    ${ResultSize},

    [Parameter(ParameterSetName='Filter')]
    ${StartDate},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='Filter')]
    [switch]
    ${Summary}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-Notification' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-OMEConfiguration
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-OMEConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-OnlineMeetingConfiguration
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-OnlineMeetingConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-OnPremisesOrganization
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-OnPremisesOrganization' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-OnPremServerExemptionQuota
{
    [CmdletBinding()]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-OnPremServerExemptionQuota' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-OnPremServerReportInfo
{
    [CmdletBinding()]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-OnPremServerReportInfo' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-OrganizationalUnit
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IncludeContainers},

    ${ResultSize},

    [Parameter(ParameterSetName='SearchSet')]
    [string]
    ${SearchText},

    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${SingleNodeOnly}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-OrganizationalUnit' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Get-OrganizationConfig
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-OrganizationConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-OrganizationRelationship
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-OrganizationRelationship' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-OutboundConnector
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${IncludeTestModeConnectors},

    [bool]
    ${IsTransportRuleScoped},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-OutboundConnector' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-OutboundConnectorReport
{
    [CmdletBinding()]
    param(
    
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Domain},

    [string]
    ${ProbeTag}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-OutboundConnectorReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Get-OutlookProtectionRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-OutlookProtectionRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-OwaMailboxPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-OwaMailboxPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-PartnerApplication
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-PartnerApplication' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-PerimeterConfig
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-PerimeterConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Get-PerimeterMessageTrace
{
    [CmdletBinding()]
    param(
    
    [datetime]
    ${End},

    [Parameter(Mandatory=$true)]
    [string]
    ${Recipient},

    [string]
    ${Sender},

    [datetime]
    ${Start}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-PerimeterMessageTrace' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-PhishSimOverridePolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-PhishSimOverridePolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-PhishSimOverrideRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNull()]
    ${Policy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-PhishSimOverrideRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-Place
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${ResultSize},

    [Parameter(ParameterSetName='AllPlaces')]
    ${Type}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-Place' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-PolicyConfig
{
    [CmdletBinding()]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-PolicyConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-PolicyTipConfig
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Paramters')]
    ${Action},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Paramters')]
    [cultureinfo]
    ${Locale},

    [Parameter(ParameterSetName='Paramters')]
    [switch]
    ${Original}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-PolicyTipConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-PublicFolder
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='GetChildren', Mandatory=$true)]
    [switch]
    ${GetChildren},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Recurse', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='GetChildren', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='LostAndFound', Mandatory=$true)]
    [switch]
    ${LostAndFound},

    [ValidateNotNull()]
    ${Mailbox},

    [Parameter(ParameterSetName='Recurse', Mandatory=$true)]
    [switch]
    ${Recurse},

    [switch]
    ${ResidentFolders},

    [Parameter(ParameterSetName='Recurse')]
    [Parameter(ParameterSetName='GetChildren')]
    [Parameter(ParameterSetName='LostAndFound')]
    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-PublicFolder' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-PublicFolderClientPermission
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNull()]
    ${Mailbox},

    ${ResultSize},

    ${User}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-PublicFolderClientPermission' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-PublicFolderItemStatistics
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNull()]
    ${Mailbox},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-PublicFolderItemStatistics' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-PublicFolderMailboxDiagnostics
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IncludeDumpsterInfo},

    [switch]
    ${IncludeHierarchyInfo}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-PublicFolderMailboxDiagnostics' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-PublicFolderMailboxMigrationRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Filtering')]
    [string]
    ${BatchName},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Filtering')]
    [string]
    ${Name},

    ${ResultSize},

    [Parameter(ParameterSetName='Filtering')]
    ${Status},

    [Parameter(ParameterSetName='Filtering')]
    [bool]
    ${Suspend}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-PublicFolderMailboxMigrationRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-PublicFolderMailboxMigrationRequestStatistics
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [string]
    ${DiagnosticInfo},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    ${Identity},

    [switch]
    ${IncludeReport},

    [switch]
    ${IncludeSkippedItems},

    [switch]
    ${ReportOnly}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-PublicFolderMailboxMigrationRequestStatistics' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-PublicFolderMoveRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='Filtering', ValueFromPipeline=$true)]
    [ValidateNotNull()]
    ${AccountPartition},

    [Parameter(ParameterSetName='Filtering')]
    [string]
    ${BatchName},

    [ValidateNotNull()]
    ${DomainController},

    [Parameter(ParameterSetName='Filtering')]
    [bool]
    ${HighPriority},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Filtering')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='Filtering')]
    [ValidateNotNull()]
    ${Organization},

    [Parameter(ParameterSetName='Filtering')]
    [ValidateNotNull()]
    ${RequestQueue},

    ${ResultSize},

    [Parameter(ParameterSetName='Filtering')]
    ${Status},

    [Parameter(ParameterSetName='Filtering')]
    [bool]
    ${Suspend}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-PublicFolderMoveRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-PublicFolderMoveRequestStatistics
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [string]
    ${DiagnosticInfo},

    [ValidateNotNull()]
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    ${Identity},

    [switch]
    ${IncludeReport},

    [switch]
    ${IncludeSkippedItems},

    [switch]
    ${ReportOnly},

    [Parameter(ParameterSetName='MigrationRequestQueue')]
    [guid]
    ${RequestGuid},

    [Parameter(ParameterSetName='MigrationRequestQueue', Mandatory=$true)]
    [ValidateNotNull()]
    ${RequestQueue}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-PublicFolderMoveRequestStatistics' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-PublicFolderStatistics
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNull()]
    ${Mailbox},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-PublicFolderStatistics' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-QuarantineMessage
{
    [CmdletBinding(DefaultParameterSetName='Summary')]
    param(
    
    [Parameter(ParameterSetName='Summary')]
    ${Direction},

    [Parameter(ParameterSetName='Summary')]
    [string[]]
    ${Domain},

    [Parameter(ParameterSetName='Summary')]
    ${EndExpiresDate},

    [Parameter(ParameterSetName='Summary')]
    ${EndReceivedDate},

    ${EntityType},

    [Parameter(ParameterSetName='Details', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNullOrEmpty()]
    ${Identity},

    [Parameter(ParameterSetName='Summary')]
    [switch]
    ${IncludeMessagesFromBlockedSenderAddress},

    [Parameter(ParameterSetName='Summary')]
    [ValidateLength(1, 320)]
    [string]
    ${MessageId},

    [Parameter(ParameterSetName='Summary')]
    [switch]
    ${MyItems},

    [Parameter(ParameterSetName='Summary')]
    ${Page},

    [Parameter(ParameterSetName='Summary')]
    [ValidateRange(1, 1000)]
    ${PageSize},

    [Parameter(ParameterSetName='Summary')]
    [ValidateLength(1, 320)]
    [string]
    ${PolicyName},

    [Parameter(ParameterSetName='Summary')]
    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${PolicyTypes},

    [Parameter(ParameterSetName='Summary')]
    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${QuarantineTypes},

    [Parameter(ParameterSetName='Summary')]
    [Parameter(ParameterSetName='Details')]
    [ValidateLength(1, 320)]
    [string[]]
    ${RecipientAddress},

    [Parameter(ParameterSetName='Summary')]
    [string[]]
    ${RecipientTag},

    [Parameter(ParameterSetName='Summary')]
    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${ReleaseStatus},

    [Parameter(ParameterSetName='Summary')]
    [ValidateNotNullOrEmpty()]
    ${Reported},

    [ValidateLength(1, 320)]
    [string[]]
    ${SenderAddress},

    [Parameter(ParameterSetName='Summary')]
    ${StartExpiresDate},

    [Parameter(ParameterSetName='Summary')]
    ${StartReceivedDate},

    [Parameter(ParameterSetName='Summary')]
    [ValidateLength(1, 320)]
    [string]
    ${Subject},

    [Parameter(ParameterSetName='Summary')]
    ${Type}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-QuarantineMessage' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-QuarantineMessageHeader
{
    [CmdletBinding()]
    param(
    
    ${EntityType},

    [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateLength(1, 320)]
    [string]
    ${RecipientAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-QuarantineMessageHeader' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-QuarantinePolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${QuarantinePolicyType}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-QuarantinePolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-RbacDiagnosticInfo
{
    [CmdletBinding()]
    param(
    
    [Parameter(Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${UserName}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-RbacDiagnosticInfo' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-Recipient
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='AnrSet')]
    [ValidateLength(3, 5120)]
    [string]
    ${Anr},

    ${AuthenticationType},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${BookmarkDisplayName},

    ${Capabilities},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${IncludeBookmarkObject},

    [switch]
    ${IncludeSoftDeletedRecipients},

    ${OrganizationalUnit},

    [string[]]
    ${Properties},

    ${PropertySet},

    [Parameter(ParameterSetName='RecipientPreviewFilterSet')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${RecipientPreviewFilter},

    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${RecipientType},

    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${RecipientTypeDetails},

    ${ResultSize},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-Recipient' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-RecipientPermission
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    ${AccessRights},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${ReadFromDomainController},

    ${ResultSize},

    ${Trustee}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-RecipientPermission' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-RecipientStatisticsReport
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-RecipientStatisticsReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Get-RemoteDomain
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-RemoteDomain' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-ReportExecutionInstance
{
    [CmdletBinding()]
    param(
    
    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${ScheduleId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ReportExecutionInstance' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-ReportSchedule
{
    [CmdletBinding()]
    param(
    
    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [switch]
    ${IncludeDLP},

    [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${ScheduleId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ReportSchedule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-ReportScheduleList
{
    [CmdletBinding()]
    param(
    
    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [switch]
    ${IncludeDLP}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ReportScheduleList' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-ReportSubmissionPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ReportSubmissionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-ReportSubmissionRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${State}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ReportSubmissionRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-ResourceConfig
{
    [CmdletBinding()]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ResourceConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-RetentionEvent
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [switch]
    ${AllStatus},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-RetentionEvent' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Get-RetentionPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'get-RetentionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Get-RetentionPolicyTag
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IncludeSystemTags},

    [Parameter(ParameterSetName='ParameterSetMailboxTask')]
    ${Mailbox},

    [Parameter(ParameterSetName='ParameterSetMailboxTask')]
    [switch]
    ${OptionalInMailbox},

    [System.Object[]]
    ${Types}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-RetentionPolicyTag' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailControl-Help.xml
function script:Get-RMSTemplate
{
    [CmdletBinding(DefaultParameterSetName='OrganizationSet')]
    param(
    
    [Parameter(Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${ResultSize},

    ${TrustedPublishingDomain},

    ${Type}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-RMSTemplate' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-RoleAssignmentPolicy
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-RoleAssignmentPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-RoleGroup
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${ResultSize},

    [switch]
    ${ShowPartnerLinked},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-RoleGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-RoleGroupMember
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    ${Identity},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-RoleGroupMember' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-SafeAttachmentPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SafeAttachmentPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-SafeAttachmentRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${State}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SafeAttachmentRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-SafeLinksAggregateReport
{
    [CmdletBinding()]
    param(
    
    ${Action},

    ${AppNameList},

    ${EndDate},

    ${StartDate},

    [string]
    ${SummarizeBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SafeLinksAggregateReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-SafeLinksDetailReport
{
    [CmdletBinding()]
    param(
    
    ${Action},

    ${AppNameList},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Domain},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${EndDate},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${RecipientAddress},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SafeLinksDetailReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-SafeLinksPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SafeLinksPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-SafeLinksRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${State}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SafeLinksRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-SCInsights
{
    [CmdletBinding()]
    param(
    
    ${EndDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SCInsights' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ScopeEntities
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${OrganizationalUnit},

    ${ResultSize},

    [string]
    ${Scenario},

    [string[]]
    ${ScopeIds},

    [string]
    ${ScopeRecipientType},

    [string]
    ${SortBy},

    [string]
    ${Workload}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ScopeEntities' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-SearchDocumentFormat
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SearchDocumentFormat' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-SecOpsOverridePolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SecOpsOverridePolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-SecOpsOverrideRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNull()]
    ${Policy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Get-SecOpsOverrideRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-SecurityPrincipal
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    ${OrganizationalUnit},

    ${ResultSize},

    [switch]
    ${RoleGroupAssignable},

    ${Types}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SecurityPrincipal' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-SensitivityLabelActivityDetailsReport
{
    [CmdletBinding()]
    param(
    
    ${EndDate},

    ${MIPLabelName},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    ${Sender},

    ${Source},

    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SensitivityLabelActivityDetailsReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-SensitivityLabelActivityReport
{
    [CmdletBinding()]
    param(
    
    [string]
    ${AggregateBy},

    ${EndDate},

    ${MIPLabelName},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    ${Source},

    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SensitivityLabelActivityReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-ServiceDeliveryReport
{
    [CmdletBinding()]
    param(
    
    [string]
    ${ProbeTag},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Recipient}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ServiceDeliveryReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ServicePrincipal
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Organization}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ServicePrincipal' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-ServiceStatus
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [uint]
    ${MaintenanceWindowDays}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ServiceStatus' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Get-SharingPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SharingPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-SmimeConfig
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SmimeConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

function script:Get-SmtpDaneInboundStatus
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${DomainName}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SmtpDaneInboundStatus' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-SpoofIntelligenceInsight
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SpoofIntelligenceInsight' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-SpoofMailReport
{
    [CmdletBinding()]
    param(
    
    ${Action},

    ${Direction},

    ${EndDate},

    ${EventType},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [string]
    ${ProbeTag},

    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SpoofMailReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-SupervisoryReviewActivity
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true)]
    ${EndDate},

    [Parameter(ParameterSetName='Identity', Mandatory=$true)]
    [string]
    ${PolicyId},

    [Parameter(ParameterSetName='Identity', Mandatory=$true)]
    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SupervisoryReviewActivity' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-SupervisoryReviewPolicyReport
{
    [CmdletBinding()]
    param(
    
    ${EndDate},

    [int]
    ${Page},

    [int]
    ${PageSize},

    ${Policies},

    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SupervisoryReviewPolicyReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-SupervisoryReviewPolicyV2
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SupervisoryReviewPolicyV2' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Get-SupervisoryReviewReport
{
    [CmdletBinding()]
    param(
    
    ${EndDate},

    [int]
    ${Page},

    [int]
    ${PageSize},

    ${Policies},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${Reviewers},

    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SupervisoryReviewReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-SupervisoryReviewRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNull()]
    ${Policy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SupervisoryReviewRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-SweepRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [switch]
    ${BypassScopeCheck},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Mailbox},

    [string]
    ${Provider},

    ${ResultSize},

    [int]
    ${SkipCount}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SweepRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-SyncConfig
{
    [CmdletBinding()]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SyncConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-SyncRequest
{
    [CmdletBinding(DefaultParameterSetName='Filtering')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    ${Identity},

    [Parameter(ParameterSetName='Filtering', ValueFromPipeline=$true)]
    [ValidateNotNull()]
    ${Mailbox},

    ${ResultSize},

    [Parameter(ParameterSetName='Filtering')]
    [ValidateNotNull()]
    [System.Object[]]
    ${SyncProtocol},

    [Parameter(ParameterSetName='Filtering')]
    [ValidateNotNull()]
    ${WorkloadType}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
            $NamedPositionalAndDynamicParameters = New-Object System.Collections.ArrayList;
            foreach ($param in $PSBoundParameters.GetEnumerator())
            {
                [void]$NamedPositionalAndDynamicParameters.Add($param.Key);
            }
    
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $pipelineObjectBoundParameterKey = $null
            $pipelineObjectBoundParameterValue =  $null
            foreach ($param in $PSBoundParameters.GetEnumerator())
            {          
                if(-not $NamedPositionalAndDynamicParameters.Contains($param.Key))
                {
                    $pipelineObjectBoundParameterKey = $param.Key
                    $pipelineObjectBoundParameterValue = $param.Value
                    break
                }
            }
            
            if ($pipelineObjectBoundParameterKey -ne $null)
            {
                # Extracting Type Information from $pipelineObjectBoundParameterValue. This will be stored in TypeName field for every Property
                # Ideally TypeName is same for every Property. Adding -Unique
                $pipelineObjectBoundParameterValueType = $pipelineObjectBoundParameterValue | Get-Member | select -ExpandProperty Typename -Unique -First 1
                
                if (($pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.MailboxReplicationService.SyncRequestIdParameter')) -and $pipelineObjectBoundParameterKey -ne 'Identity')
                    {
                        $PSBoundParameters['Identity'] = $PSBoundParameters[$pipelineObjectBoundParameterKey]
                        [void]$PSBoundParameters.Remove($pipelineObjectBoundParameterKey)
                
                        $parameterSetValidated = Validate-ParameterSet -CmdletName 'Get-SyncRequest' -ParameterList $PSBoundParameters.Keys
                        if($parameterSetValidated -eq $false)
                        {
                            $PSBoundParameters[$pipelineObjectBoundParameterKey] = $PSBoundParameters['Identity']
                            [void]$PSBoundParameters.Remove('Identity')
                        }
                    }
                
                if (($pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Configuration.Tasks.MailboxLocationIdParameter') -or $pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Data.Directory.Management.Mailbox') -or $pipelineObjectBoundParameterValueType.EndsWith('Microsoft.Exchange.Data.Directory.Management.ConsumerMailbox')) -and $pipelineObjectBoundParameterKey -ne 'Mailbox')
                    {
                        $PSBoundParameters['Mailbox'] = $PSBoundParameters[$pipelineObjectBoundParameterKey]
                        [void]$PSBoundParameters.Remove($pipelineObjectBoundParameterKey)
                
                        $parameterSetValidated = Validate-ParameterSet -CmdletName 'Get-SyncRequest' -ParameterList $PSBoundParameters.Keys
                        if($parameterSetValidated -eq $false)
                        {
                            $PSBoundParameters[$pipelineObjectBoundParameterKey] = $PSBoundParameters['Mailbox']
                            [void]$PSBoundParameters.Remove('Mailbox')
                        }
                    }
                 
            }
            
            Execute-Command -CmdletName 'Get-SyncRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-SyncRequestStatistics
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [string]
    ${DiagnosticInfo},

    [switch]
    ${DiagnosticOnly},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    ${Identity},

    [switch]
    ${IncludeReport},

    [switch]
    ${IncludeSkippedItems},

    [switch]
    ${IncludeSlaReport},

    [switch]
    ${ReportOnly}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-SyncRequestStatistics' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-TDPReport
{
    [CmdletBinding()]
    param(
    
    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${EndDate},

    [int]
    ${Page},

    [int]
    ${PageSize},

    [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('NDR','OutboundExternalRecipients')]
    [string]
    ${ReportType},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-TDPReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-TeamsProtectionPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-TeamsProtectionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-TeamsProtectionPolicyRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${State}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-TeamsProtectionPolicyRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-TenantAllowBlockListItems
{
    [CmdletBinding(DefaultParameterSetName='Expiration')]
    param(
    
    [Parameter(ParameterSetName='Expiration')]
    [Parameter(ParameterSetName='NoExpiration')]
    [switch]
    ${Allow},

    [Parameter(ParameterSetName='Expiration')]
    [Parameter(ParameterSetName='NoExpiration')]
    [switch]
    ${Block},

    [Parameter(ParameterSetName='Expiration')]
    [Parameter(ParameterSetName='NoExpiration')]
    [string]
    ${Entry},

    [Parameter(ParameterSetName='Expiration')]
    [datetime]
    ${ExpirationDate},

    [Parameter(ParameterSetName='Expiration')]
    [Parameter(ParameterSetName='NoExpiration')]
    [System.Object[]]
    ${ListSubType},

    [Parameter(Mandatory=$true)]
    ${ListType},

    [Parameter(ParameterSetName='NoExpiration', Mandatory=$true)]
    [switch]
    ${NoExpiration},

    [switch]
    ${OutputJson}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-TenantAllowBlockListItems' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-TenantAllowBlockListSpoofItems
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [string]
    ${Action},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string]
    ${SpoofType}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-TenantAllowBlockListSpoofItems' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-TenantExemptionInfo
{
    [CmdletBinding()]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${BlockingScenario}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-TenantExemptionInfo' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-TenantExemptionQuota
{
    [CmdletBinding()]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${BlockingScenario}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-TenantExemptionQuota' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-TenantExemptionQuotaEligibility
{
    [CmdletBinding()]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${BlockingScenario}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-TenantExemptionQuotaEligibility' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Get-TenantScanRequestStatistics
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    ${Identity},

    ${Partition}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-TenantScanRequestStatistics' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Get-TextMessagingAccount
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [pscredential]
    ${Credential},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${ReadFromDomainController},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credential'))
            {
                $Credential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credential'] = Encrypt-Value -UnsecureString $Credential__Unsecure;
            }
            Execute-Command -CmdletName 'Get-TextMessagingAccount' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-ToolInformation
{
    [CmdletBinding()]
    param(
    
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [version]
    ${Version}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ToolInformation' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Get-TransportConfig
{
    [CmdletBinding()]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-TransportConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-TransportRule
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [string]
    ${DlpPolicy},

    [bool]
    ${ExcludeConditionActionDetails},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${ResultSize},

    ${State}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-TransportRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-TransportRuleAction
{
    [CmdletBinding()]
    param(
    
    [Parameter(Position=0)]
    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-TransportRuleAction' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Get-TransportRulePredicate
{
    [CmdletBinding()]
    param(
    
    [Parameter(Position=0)]
    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-TransportRulePredicate' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-UnifiedAuditSetting
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-UnifiedAuditSetting' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-UnifiedGroup
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='AnrSet')]
    [ValidateLength(3, 5120)]
    [string]
    ${Anr},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IncludeAcceptMessagesOnlyFromSendersOrMembersWithDisplayNames},

    [switch]
    ${IncludeAllProperties},

    [switch]
    ${IncludeBypassModerationFromSendersOrMembersWithDisplayNames},

    [switch]
    ${IncludeGrantSendOnBehalfToWithDisplayNames},

    [switch]
    ${IncludeModeratedByWithDisplayNames},

    [switch]
    ${IncludeRejectMessagesFromSendersOrMembersWithDisplayNames},

    [switch]
    ${IncludeSoftDeletedGroups},

    ${ResultSize},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-UnifiedGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-UnifiedGroupLinks
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(Mandatory=$true)]
    ${LinkType},

    ${ResultSize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-UnifiedGroupLinks' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Get-User
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='AnrSet')]
    [ValidateLength(3, 5120)]
    [string]
    ${Anr},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IsVIP},

    ${OrganizationalUnit},

    [switch]
    ${PublicFolder},

    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${RecipientTypeDetails},

    ${ResultSize},

    [string]
    ${SortBy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'get-User' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Import-DlpPolicyCollection
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true, Position=0)]
    [byte[]]
    ${FileData},

    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Import-DlpPolicyCollection' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Import-RecipientDataProperty
{
    [CmdletBinding(DefaultParameterSetName='ImportPicture', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [byte[]]
    ${FileData},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='ImportPicture')]
    [switch]
    ${Picture},

    [Parameter(ParameterSetName='ImportSpokenName')]
    [switch]
    ${SpokenName}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Import-RecipientDataProperty' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Import-TransportRuleCollection
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='CustomRuleCollection', Mandatory=$true, Position=0)]
    [byte[]]
    ${FileData},

    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Import-TransportRuleCollection' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Invoke-BirthdayCalendarSync
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Invoke-BirthdayCalendarSync' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:New-ActiveSyncDeviceAccessRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    ${AccessLevel},

    [Parameter(Mandatory=$true)]
    ${Characteristic},

    [Parameter(Mandatory=$true)]
    [string]
    ${QueryString}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-ActiveSyncDeviceAccessRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:New-ActiveSyncMailboxPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${AllowApplePushNotifications},

    ${AllowBluetooth},

    [bool]
    ${AllowBrowser},

    [bool]
    ${AllowCamera},

    [bool]
    ${AllowConsumerEmail},

    [bool]
    ${AllowDesktopSync},

    [bool]
    ${AllowExternalDeviceManagement},

    [bool]
    ${AllowHTMLEmail},

    [bool]
    ${AllowInternetSharing},

    [bool]
    ${AllowIrDA},

    [bool]
    ${AllowMobileOTAUpdate},

    [bool]
    ${AllowNonProvisionableDevices},

    [bool]
    ${AllowPOPIMAPEmail},

    [bool]
    ${AllowRemoteDesktop},

    [bool]
    ${AllowSimpleDevicePassword},

    ${AllowSMIMEEncryptionAlgorithmNegotiation},

    [bool]
    ${AllowSMIMESoftCerts},

    [bool]
    ${AllowStorageCard},

    [bool]
    ${AllowTextMessaging},

    [bool]
    ${AllowUnsignedApplications},

    [bool]
    ${AllowUnsignedInstallationPackages},

    [bool]
    ${AllowWiFi},

    [bool]
    ${AlphanumericDevicePasswordRequired},

    ${ApprovedApplicationList},

    [bool]
    ${AttachmentsEnabled},

    [bool]
    ${DeviceEncryptionEnabled},

    [bool]
    ${DevicePasswordEnabled},

    ${DevicePasswordExpiration},

    [int]
    ${DevicePasswordHistory},

    ${DevicePolicyRefreshInterval},

    [bool]
    ${IrmEnabled},

    [bool]
    ${IsDefault},

    [bool]
    ${IsDefaultPolicy},

    ${MaxAttachmentSize},

    ${MaxCalendarAgeFilter},

    ${MaxDevicePasswordFailedAttempts},

    ${MaxEmailAgeFilter},

    ${MaxEmailBodyTruncationSize},

    ${MaxEmailHTMLBodyTruncationSize},

    ${MaxInactivityTimeDeviceLock},

    [int]
    ${MinDevicePasswordComplexCharacters},

    ${MinDevicePasswordLength},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [bool]
    ${PasswordRecoveryEnabled},

    [bool]
    ${RequireDeviceEncryption},

    [bool]
    ${RequireEncryptedSMIMEMessages},

    ${RequireEncryptionSMIMEAlgorithm},

    [bool]
    ${RequireManualSyncWhenRoaming},

    ${RequireSignedSMIMEAlgorithm},

    [bool]
    ${RequireSignedSMIMEMessages},

    [bool]
    ${RequireStorageCardEncryption},

    ${UnapprovedInROMApplicationList},

    [bool]
    ${UNCAccessEnabled},

    [bool]
    ${WSSAccessEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-ActiveSyncMailboxPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:New-AdminAuditLogSearch
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${Cmdlets},

    [Parameter(Mandatory=$true)]
    ${EndDate},

    ${ExternalAccess},

    [string]
    ${Name},

    ${ObjectIds},

    ${Parameters},

    [Parameter(Mandatory=$true)]
    ${StartDate},

    [Parameter(Mandatory=$true)]
    ${StatusMailRecipients},

    ${UserIds}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-AdminAuditLogSearch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-AntiPhishPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${AdminDisplayName},

    ${AuthenticationFailAction},

    ${DmarcQuarantineAction},

    ${DmarcRejectAction},

    [bool]
    ${Enabled},

    [bool]
    ${EnableFirstContactSafetyTips},

    [bool]
    ${EnableMailboxIntelligence},

    [bool]
    ${EnableMailboxIntelligenceProtection},

    [bool]
    ${EnableOrganizationDomainsProtection},

    [bool]
    ${EnableSimilarDomainsSafetyTips},

    [bool]
    ${EnableSimilarUsersSafetyTips},

    [bool]
    ${EnableSpoofIntelligence},

    [bool]
    ${EnableTargetedDomainsProtection},

    [bool]
    ${EnableTargetedUserProtection},

    [bool]
    ${EnableUnauthenticatedSender},

    [bool]
    ${EnableUnusualCharactersSafetyTips},

    [bool]
    ${EnableViaTag},

    ${ExcludedDomains},

    ${ExcludedSenders},

    [bool]
    ${HonorDmarcPolicy},

    ${ImpersonationProtectionState},

    ${MailboxIntelligenceProtectionAction},

    ${MailboxIntelligenceProtectionActionRecipients},

    [string]
    ${MailboxIntelligenceQuarantineTag},

    [switch]
    ${MakeDefault},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [int]
    ${PhishThresholdLevel},

    [string]
    ${PolicyTag},

    ${RecommendedPolicyType},

    [string]
    ${SimilarUsersSafetyTipsCustomText},

    [string]
    ${SpoofQuarantineTag},

    ${TargetedDomainActionRecipients},

    ${TargetedDomainProtectionAction},

    [string]
    ${TargetedDomainQuarantineTag},

    ${TargetedDomainsToProtect},

    ${TargetedUserActionRecipients},

    ${TargetedUserProtectionAction},

    [string]
    ${TargetedUserQuarantineTag},

    ${TargetedUsersToProtect},

    [string]
    ${UnusualCharactersSafetyTipsCustomText}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-AntiPhishPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-AntiPhishRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${AntiPhishPolicy},

    [string]
    ${Comments},

    [bool]
    ${Enabled},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [int]
    ${Priority},

    [System.Object[]]
    ${RecipientDomainIs},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-AntiPhishRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:New-App
{
    [CmdletBinding(DefaultParameterSetName='ExtensionFileData', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AddInOverrides},

    [switch]
    ${AllowReadWriteMailbox},

    ${AllowSetting},

    [string]
    ${AppState},

    [string]
    ${AppType},

    ${DefaultStateForUser},

    [switch]
    ${DownloadOnly},

    [bool]
    ${Enabled},

    [Parameter(ParameterSetName='ExtensionOfficeMarketplace')]
    [string]
    ${Etoken},

    [Parameter(ParameterSetName='ExtensionFileData')]
    [byte[]]
    ${FileData},

    [Parameter(ParameterSetName='ExtensionFileStream')]
    [System.IO.Stream]
    ${FileStream},

    [string]
    ${Identity},

    ${Mailbox},

    [Parameter(ParameterSetName='ExtensionOfficeMarketplace')]
    [string]
    ${MarketplaceAssetID},

    [Parameter(ParameterSetName='ExtensionOfficeMarketplace')]
    [string]
    ${MarketplaceCorrelationID},

    [Parameter(ParameterSetName='ExtensionOfficeMarketplace')]
    [string]
    ${MarketplaceQueryMarket},

    [Parameter(ParameterSetName='ExtensionOfficeMarketplace')]
    [string]
    ${MarketplaceServicesUrl},

    [Parameter(ParameterSetName='ExtensionOfficeMarketplace')]
    [string]
    ${MarketplaceUserProfileType},

    [switch]
    ${OrganizationApp},

    [switch]
    ${PrivateCatalog},

    ${ProvidedTo},

    [switch]
    ${UpdateAppState},

    [Parameter(ParameterSetName='ExtensionPrivateURL')]
    [uri]
    ${Url},

    ${UserList},

    [string]
    ${Version}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-App' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:New-ApplicationAccessPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    ${AccessRight},

    [Parameter(Mandatory=$true)]
    [string[]]
    ${AppId},

    [string]
    ${Description},

    [Parameter(Mandatory=$true)]
    ${PolicyScopeGroupId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-ApplicationAccessPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-ATPBuiltInProtectionRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [string]
    ${Name},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${SafeAttachmentPolicy},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${SafeLinksPolicy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-ATPBuiltInProtectionRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-ATPEvaluationRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AntiPhishPolicy},

    [string]
    ${Comments},

    [bool]
    ${Enabled},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [System.Object[]]
    ${RecipientDomainIs},

    ${SafeAttachmentPolicy},

    ${SafeLinksPolicy},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf},

    [bool]
    ${ShareWithMicrosoft}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-ATPEvaluationRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-ATPProtectionPolicyRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [bool]
    ${Enabled},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [int]
    ${Priority},

    [System.Object[]]
    ${RecipientDomainIs},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${SafeAttachmentPolicy},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${SafeLinksPolicy},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-ATPProtectionPolicyRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-AuthenticationPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${AllowBasicAuthActiveSync},

    [switch]
    ${AllowBasicAuthAutodiscover},

    [switch]
    ${AllowBasicAuthImap},

    [switch]
    ${AllowBasicAuthMapi},

    [switch]
    ${AllowBasicAuthOfflineAddressBook},

    [switch]
    ${AllowBasicAuthOutlookService},

    [switch]
    ${AllowBasicAuthPop},

    [switch]
    ${AllowBasicAuthPowershell},

    [switch]
    ${AllowBasicAuthReportingWebServices},

    [switch]
    ${AllowBasicAuthRpc},

    [switch]
    ${AllowBasicAuthSmtp},

    [switch]
    ${AllowBasicAuthWebServices},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-AuthenticationPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:New-AvailabilityConfig
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AllowedTenantIds},

    ${OrgWideAccount}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-AvailabilityConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:New-ClassificationRuleCollection
{
    [CmdletBinding(DefaultParameterSetName='ArbitraryCollection', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='ArbitraryCollection', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [byte[]]
    ${FileData}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-ClassificationRuleCollection' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-CompliancePolicySyncNotification
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${FullSync},

    [Parameter(Mandatory=$true)]
    [string]
    ${Identity},

    ${SyncChangeInfos},

    [switch]
    ${SyncNow},

    [Parameter(Mandatory=$true)]
    [string]
    ${SyncSvcUrl},

    ${Workload}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-CompliancePolicySyncNotification' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:New-DatabaseMaintenanceRequest
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [ValidateLength(1, 255)]
    [string]
    ${BatchName},

    [System.Collections.Generic.Dictionary[string,string]]
    ${CallerData},

    [timespan]
    ${IncrementalSyncInterval},

    [System.Object[]]
    ${InternalFlags},

    ${Priority},

    ${RequestExpiryInterval},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${TargetDatabase},

    [Parameter(Mandatory=$true)]
    ${WorkloadType}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-DatabaseMaintenanceRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:New-DataClassification
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${ClassificationRuleCollectionIdentity},

    [Parameter(Mandatory=$true)]
    [ValidateLength(1, 256)]
    [string]
    ${Description},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Fingerprints},

    [ValidateNotNull()]
    [cultureinfo]
    ${Locale},

    [Parameter(Mandatory=$true, Position=0)]
    [ValidateLength(1, 256)]
    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-DataClassification' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:New-DataEncryptionPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    ${AzureKeyIDs},

    [string]
    ${Description},

    ${DomainController},

    [bool]
    ${Enabled},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-DataEncryptionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:New-DistributionGroup
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [ValidateNotNullOrEmpty()]
    [string]
    ${Alias},

    [bool]
    ${BccBlocked},

    [bool]
    ${BypassNestedModerationEnabled},

    [switch]
    ${CopyOwnerToMember},

    ${Description},

    [string]
    ${DisplayName},

    [switch]
    ${HiddenGroupMembershipEnabled},

    [switch]
    ${IgnoreNamingPolicy},

    ${ManagedBy},

    ${MemberDepartRestriction},

    ${MemberJoinRestriction},

    ${Members},

    ${ModeratedBy},

    [bool]
    ${ModerationEnabled},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [string]
    ${Notes},

    ${OrganizationalUnit},

    ${PrimarySmtpAddress},

    [bool]
    ${RequireSenderAuthenticationEnabled},

    [switch]
    ${RoomList},

    ${SendModerationNotifications},

    ${Type}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-DistributionGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-DkimSigningConfig
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${AdminDisplayName},

    ${BodyCanonicalization},

    [Parameter(Mandatory=$true, Position=0)]
    ${DomainName},

    [Parameter(Mandatory=$true, Position=1)]
    [bool]
    ${Enabled},

    ${HeaderCanonicalization},

    [ValidateSet('1024','2048')]
    [ushort]
    ${KeySize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-DkimSigningConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-DkimSigningConfigSelectorCnames
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true, Position=0)]
    ${DomainName}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-DkimSigningConfigSelectorCnames' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-DlpPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Description},

    ${Mode},

    [Parameter(Position=0)]
    [string]
    ${Name},

    [hashtable]
    ${Parameters},

    ${State},

    [string]
    ${Template},

    [byte[]]
    ${TemplateData}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-DlpPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:New-DynamicDistributionGroup
{
    [CmdletBinding(DefaultParameterSetName='PrecannedFilter', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [ValidateNotNullOrEmpty()]
    [string]
    ${Alias},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalCompany},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalCustomAttribute1},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalCustomAttribute10},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalCustomAttribute11},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalCustomAttribute12},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalCustomAttribute13},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalCustomAttribute14},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalCustomAttribute15},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalCustomAttribute2},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalCustomAttribute3},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalCustomAttribute4},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalCustomAttribute5},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalCustomAttribute6},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalCustomAttribute7},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalCustomAttribute8},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalCustomAttribute9},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalDepartment},

    [Parameter(ParameterSetName='PrecannedFilter')]
    ${ConditionalStateOrProvince},

    [bool]
    ${DirectMembershipOnly},

    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='PrecannedFilter', Mandatory=$true)]
    ${IncludedRecipients},

    ${ModeratedBy},

    [bool]
    ${ModerationEnabled},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    ${OrganizationalUnit},

    ${PrimarySmtpAddress},

    ${RecipientContainer},

    [Parameter(ParameterSetName='CustomFilter', Mandatory=$true)]
    [string]
    ${RecipientFilter},

    ${SendModerationNotifications}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-DynamicDistributionGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-ElevatedAccessApprovalPolicy
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [Parameter(ParameterSetName='RoleGroupParams', Mandatory=$true)]
    [Parameter(ParameterSetName='RoleParams', Mandatory=$true)]
    [Parameter(ParameterSetName='TaskParams', Mandatory=$true)]
    ${ApprovalType},

    [Parameter(ParameterSetName='RoleGroupParams')]
    [Parameter(ParameterSetName='RoleParams')]
    [Parameter(ParameterSetName='TaskParams')]
    ${ApproverGroup},

    [Parameter(ParameterSetName='RoleParams', Mandatory=$true)]
    ${Role},

    [Parameter(ParameterSetName='RoleGroupParams', Mandatory=$true)]
    ${RoleGroup},

    [Parameter(ParameterSetName='TaskParams', Mandatory=$true)]
    ${Task}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'New-ElevatedAccessApprovalPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-ElevatedAccessRequest
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [Parameter(ParameterSetName='RoleGroupParams', Mandatory=$true)]
    [Parameter(ParameterSetName='RoleParams', Mandatory=$true)]
    [Parameter(ParameterSetName='TaskParams', Mandatory=$true)]
    [int]
    ${DurationHours},

    [Parameter(ParameterSetName='RoleGroupParams')]
    [Parameter(ParameterSetName='RoleParams')]
    [Parameter(ParameterSetName='TaskParams')]
    [string]
    ${ExternalIdentity},

    [Parameter(ParameterSetName='RoleGroupParams', Mandatory=$true)]
    [Parameter(ParameterSetName='RoleParams', Mandatory=$true)]
    [Parameter(ParameterSetName='TaskParams', Mandatory=$true)]
    [string]
    ${Reason},

    [Parameter(ParameterSetName='RoleGroupParams')]
    [Parameter(ParameterSetName='RoleParams')]
    [Parameter(ParameterSetName='TaskParams')]
    [hashtable]
    ${RequestContext},

    [Parameter(ParameterSetName='RoleParams')]
    [string]
    ${Role},

    [Parameter(ParameterSetName='RoleGroupParams')]
    [string]
    ${RoleGroup},

    [Parameter(ParameterSetName='TaskParams')]
    [string]
    ${Task}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'New-ElevatedAccessRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-EmailAddressPolicy
{
    [CmdletBinding(DefaultParameterSetName='SMTPTemplateWithPrecannedFilter', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='AllTemplatesWithCustomFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='AllTemplatesWithPrecannedFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='AllTemplatesForUnifiedGroupRecipientsFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='AllTemplatesForSchedulingMailboxRecipientsFilter', Mandatory=$true)]
    ${EnabledEmailAddressTemplates},

    [Parameter(ParameterSetName='SMTPTemplateWithCustomFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='SMTPTemplateWithPrecannedFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='SMTPTemplateForUnifiedGroupRecipientsFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='SMTPTemplateForSchedulingMailboxRecipientsFilter', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${EnabledPrimarySMTPAddressTemplate},

    [Parameter(ParameterSetName='SMTPTemplateForUnifiedGroupRecipientsFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='AllTemplatesForUnifiedGroupRecipientsFilter', Mandatory=$true)]
    [switch]
    ${IncludeUnifiedGroupRecipients},

    [Parameter(ParameterSetName='SMTPTemplateForUnifiedGroupRecipientsFilter')]
    [Parameter(ParameterSetName='AllTemplatesForUnifiedGroupRecipientsFilter')]
    [string]
    ${ManagedByFilter},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    ${Priority}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-EmailAddressPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-EOPProtectionPolicyRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${AntiPhishPolicy},

    [string]
    ${Comments},

    [bool]
    ${Enabled},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${HostedContentFilterPolicy},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${MalwareFilterPolicy},

    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [int]
    ${Priority},

    [System.Object[]]
    ${RecipientDomainIs},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-EOPProtectionPolicyRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-ExoPhishSimOverrideRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Default')]
    [string]
    ${Comment},

    ${DomainController},

    [Parameter(ParameterSetName='Default')]
    ${Domains},

    [Parameter(ParameterSetName='Default')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='Default', Mandatory=$true)]
    [Parameter(ParameterSetName='SetRawXml', Mandatory=$true)]
    [Parameter(ParameterSetName='ComplianceTag', Mandatory=$true)]
    [Parameter(ParameterSetName='PublishComplianceTag', Mandatory=$true)]
    [ValidateNotNull()]
    ${Policy},

    [Parameter(ParameterSetName='Default', Mandatory=$true)]
    ${SenderIpRanges}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-ExoPhishSimOverrideRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-ExoSecOpsOverrideRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Default')]
    [string]
    ${Comment},

    ${DomainController},

    [Parameter(ParameterSetName='Default')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='Default', Mandatory=$true)]
    [Parameter(ParameterSetName='SetRawXml', Mandatory=$true)]
    [Parameter(ParameterSetName='ComplianceTag', Mandatory=$true)]
    [Parameter(ParameterSetName='PublishComplianceTag', Mandatory=$true)]
    [ValidateNotNull()]
    ${Policy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-ExoSecOpsOverrideRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:New-Fingerprint
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [ValidateLength(1, 256)]
    [string]
    ${Description},

    [Parameter(Position=0)]
    [byte[]]
    ${FileData}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-Fingerprint' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-HostedConnectionFilterPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${AdminDisplayName},

    [string]
    ${ConfigurationXmlRaw},

    [bool]
    ${EnableSafeList},

    ${IPAllowList},

    ${IPBlockList},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-HostedConnectionFilterPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-HostedContentFilterPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${AddXHeaderValue},

    [string]
    ${AdminDisplayName},

    ${AllowedSenderDomains},

    ${AllowedSenders},

    ${BlockedSenderDomains},

    ${BlockedSenders},

    [string]
    ${BulkQuarantineTag},

    ${BulkSpamAction},

    [int]
    ${BulkThreshold},

    [bool]
    ${DownloadLink},

    [bool]
    ${EnableEndUserSpamNotifications},

    [bool]
    ${EnableLanguageBlockList},

    [bool]
    ${EnableRegionBlockList},

    ${EndUserSpamNotificationCustomFromAddress},

    [string]
    ${EndUserSpamNotificationCustomFromName},

    [string]
    ${EndUserSpamNotificationCustomSubject},

    [int]
    ${EndUserSpamNotificationFrequency},

    ${EndUserSpamNotificationLanguage},

    [int]
    ${EndUserSpamNotificationLimit},

    ${HighConfidencePhishAction},

    [string]
    ${HighConfidencePhishQuarantineTag},

    ${HighConfidenceSpamAction},

    [string]
    ${HighConfidenceSpamQuarantineTag},

    ${IncreaseScoreWithBizOrInfoUrls},

    ${IncreaseScoreWithImageLinks},

    ${IncreaseScoreWithNumericIps},

    ${IncreaseScoreWithRedirectToOtherPort},

    [bool]
    ${InlineSafetyTipsEnabled},

    ${IntraOrgFilterState},

    ${LanguageBlockList},

    ${MarkAsSpamBulkMail},

    ${MarkAsSpamEmbedTagsInHtml},

    ${MarkAsSpamEmptyMessages},

    ${MarkAsSpamFormTagsInHtml},

    ${MarkAsSpamFramesInHtml},

    ${MarkAsSpamFromAddressAuthFail},

    ${MarkAsSpamJavaScriptInHtml},

    ${MarkAsSpamNdrBackscatter},

    ${MarkAsSpamObjectTagsInHtml},

    ${MarkAsSpamSensitiveWordList},

    ${MarkAsSpamSpfRecordHardFail},

    ${MarkAsSpamWebBugsInHtml},

    [string]
    ${ModifySubjectValue},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [string]
    ${PhishQuarantineTag},

    ${PhishSpamAction},

    [bool]
    ${PhishZapEnabled},

    [int]
    ${QuarantineRetentionPeriod},

    ${RecommendedPolicyType},

    ${RedirectToRecipients},

    ${RegionBlockList},

    ${SpamAction},

    [string]
    ${SpamQuarantineTag},

    [bool]
    ${SpamZapEnabled},

    ${TestModeAction},

    ${TestModeBccToRecipients}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-HostedContentFilterPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-HostedContentFilterRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [bool]
    ${Enabled},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${HostedContentFilterPolicy},

    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [int]
    ${Priority},

    [System.Object[]]
    ${RecipientDomainIs},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-HostedContentFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-HostedOutboundSpamFilterPolicy
{
    [CmdletBinding()]
    param(
    
    ${ActionWhenThresholdReached},

    [string]
    ${AdminDisplayName},

    ${AutoForwardingMode},

    ${BccSuspiciousOutboundAdditionalRecipients},

    [bool]
    ${BccSuspiciousOutboundMail},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [bool]
    ${NotifyOutboundSpam},

    ${NotifyOutboundSpamRecipients},

    [uint]
    ${RecipientLimitExternalPerHour},

    [uint]
    ${RecipientLimitInternalPerHour},

    [uint]
    ${RecipientLimitPerDay},

    ${RecommendedPolicyType}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'New-HostedOutboundSpamFilterPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-HostedOutboundSpamFilterRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [bool]
    ${Enabled},

    [System.Object[]]
    ${ExceptIfFrom},

    [System.Object[]]
    ${ExceptIfFromMemberOf},

    [System.Object[]]
    ${ExceptIfSenderDomainIs},

    [System.Object[]]
    ${From},

    [System.Object[]]
    ${FromMemberOf},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${HostedOutboundSpamFilterPolicy},

    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [int]
    ${Priority},

    [System.Object[]]
    ${SenderDomainIs}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-HostedOutboundSpamFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-InboundConnector
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AssociatedAcceptedDomains},

    ${ClientHostNames},

    [bool]
    ${CloudServicesMailEnabled},

    [string]
    ${Comment},

    ${ConnectorSource},

    ${ConnectorType},

    ${EFSkipIPs},

    [bool]
    ${EFSkipLastIP},

    ${EFSkipMailGateway},

    [bool]
    ${EFTestMode},

    ${EFUsers},

    [bool]
    ${Enabled},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [bool]
    ${RequireTls},

    [bool]
    ${RestrictDomainsToCertificate},

    [bool]
    ${RestrictDomainsToIPAddresses},

    ${ScanAndDropRecipients},

    [Parameter(Mandatory=$true)]
    ${SenderDomains},

    ${SenderIPAddresses},

    ${TlsSenderCertificateName},

    [bool]
    ${TreatMessagesAsInternal},

    ${TrustedOrganizations}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-InboundConnector' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-InboxRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    [Parameter(ParameterSetName='Identity')]
    ${ApplyCategory},

    [Parameter(ParameterSetName='Identity')]
    ${ApplySystemCategory},

    [Parameter(ParameterSetName='Identity')]
    ${BodyContainsWords},

    [Parameter(ParameterSetName='Identity')]
    ${CopyToFolder},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${DeleteMessage},

    [Parameter(ParameterSetName='Identity')]
    ${DeleteSystemCategory},

    [Parameter(ParameterSetName='Identity')]
    ${ExceptIfBodyContainsWords},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${ExceptIfFlaggedForAction},

    [Parameter(ParameterSetName='Identity')]
    [System.Object[]]
    ${ExceptIfFrom},

    [Parameter(ParameterSetName='Identity')]
    ${ExceptIfFromAddressContainsWords},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${ExceptIfHasAttachment},

    [Parameter(ParameterSetName='Identity')]
    [System.Object[]]
    ${ExceptIfHasClassification},

    [Parameter(ParameterSetName='Identity')]
    ${ExceptIfHeaderContainsWords},

    [Parameter(ParameterSetName='Identity')]
    ${ExceptIfMessageTypeMatches},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${ExceptIfMyNameInCcBox},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${ExceptIfMyNameInToBox},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${ExceptIfMyNameInToOrCcBox},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${ExceptIfMyNameNotInToBox},

    [Parameter(ParameterSetName='Identity')]
    ${ExceptIfReceivedAfterDate},

    [Parameter(ParameterSetName='Identity')]
    ${ExceptIfReceivedBeforeDate},

    [Parameter(ParameterSetName='Identity')]
    ${ExceptIfRecipientAddressContainsWords},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${ExceptIfSentOnlyToMe},

    [Parameter(ParameterSetName='Identity')]
    [System.Object[]]
    ${ExceptIfSentTo},

    [Parameter(ParameterSetName='Identity')]
    ${ExceptIfSubjectContainsWords},

    [Parameter(ParameterSetName='Identity')]
    ${ExceptIfSubjectOrBodyContainsWords},

    [Parameter(ParameterSetName='Identity')]
    ${ExceptIfWithImportance},

    [Parameter(ParameterSetName='Identity')]
    ${ExceptIfWithinSizeRangeMaximum},

    [Parameter(ParameterSetName='Identity')]
    ${ExceptIfWithinSizeRangeMinimum},

    [Parameter(ParameterSetName='Identity')]
    ${ExceptIfWithSensitivity},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${FlaggedForAction},

    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity')]
    [System.Object[]]
    ${ForwardAsAttachmentTo},

    [Parameter(ParameterSetName='Identity')]
    [System.Object[]]
    ${ForwardTo},

    [Parameter(ParameterSetName='Identity')]
    [System.Object[]]
    ${From},

    [Parameter(ParameterSetName='Identity')]
    ${FromAddressContainsWords},

    [Parameter(ParameterSetName='FromMessage', Mandatory=$true)]
    ${FromMessageId},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${HasAttachment},

    [Parameter(ParameterSetName='Identity')]
    [System.Object[]]
    ${HasClassification},

    [Parameter(ParameterSetName='Identity')]
    ${HeaderContainsWords},

    ${Mailbox},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${MarkAsRead},

    [Parameter(ParameterSetName='Identity')]
    ${MarkImportance},

    [Parameter(ParameterSetName='Identity')]
    ${MessageTypeMatches},

    [Parameter(ParameterSetName='Identity')]
    ${MoveToFolder},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${MyNameInCcBox},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${MyNameInToBox},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${MyNameInToOrCcBox},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${MyNameNotInToBox},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${PinMessage},

    [Parameter(ParameterSetName='Identity')]
    [int]
    ${Priority},

    [Parameter(ParameterSetName='Identity')]
    ${ReceivedAfterDate},

    [Parameter(ParameterSetName='Identity')]
    ${ReceivedBeforeDate},

    [Parameter(ParameterSetName='Identity')]
    ${RecipientAddressContainsWords},

    [Parameter(ParameterSetName='Identity')]
    [System.Object[]]
    ${RedirectTo},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${SentOnlyToMe},

    [Parameter(ParameterSetName='Identity')]
    [System.Object[]]
    ${SentTo},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${SoftDeleteMessage},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${StopProcessingRules},

    [Parameter(ParameterSetName='Identity')]
    ${SubjectContainsWords},

    [Parameter(ParameterSetName='Identity')]
    ${SubjectOrBodyContainsWords},

    [Parameter(ParameterSetName='FromMessage', Mandatory=$true)]
    [switch]
    ${ValidateOnly},

    [Parameter(ParameterSetName='Identity')]
    ${WithImportance},

    [Parameter(ParameterSetName='Identity')]
    ${WithinSizeRangeMaximum},

    [Parameter(ParameterSetName='Identity')]
    ${WithinSizeRangeMinimum},

    [Parameter(ParameterSetName='Identity')]
    ${WithSensitivity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-InboxRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:New-IntraOrganizationConnector
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [uri]
    ${DiscoveryEndpoint},

    [bool]
    ${Enabled},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [Parameter(Mandatory=$true)]
    ${TargetAddressDomains},

    [uri]
    ${TargetSharingEpr}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-IntraOrganizationConnector' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailControl-Help.xml
function script:New-JournalRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${Enabled},

    [Parameter(Mandatory=$true)]
    ${JournalEmailAddress},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    ${Recipient},

    ${Scope}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'new-journalrule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:New-M365DataAtRestEncryptionPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    ${AzureKeyIDs},

    [string]
    ${Description},

    ${DomainController},

    [bool]
    ${Enabled},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-M365DataAtRestEncryptionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-Mailbox
{
    [CmdletBinding(DefaultParameterSetName='User', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${ActiveSyncMailboxPolicy},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Alias},

    [switch]
    ${Archive},

    [Parameter(ParameterSetName='Discovery', Mandatory=$true)]
    [switch]
    ${Discovery},

    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='EnableRoomMailboxAccount', Mandatory=$true)]
    [bool]
    ${EnableRoomMailboxAccount},

    [Parameter(ParameterSetName='Equipment', Mandatory=$true)]
    [switch]
    ${Equipment},

    [Parameter(ParameterSetName='FederatedUser', Mandatory=$true)]
    [Parameter(ParameterSetName='MicrosoftOnlineServicesFederatedUser', Mandatory=$true)]
    [string]
    ${FederatedIdentity},

    [string]
    ${FirstName},

    [switch]
    ${Force},

    [Parameter(ParameterSetName='PublicFolder')]
    [switch]
    ${HoldForMigration},

    [string]
    ${ImmutableId},

    [Parameter(ParameterSetName='WindowsLiveID', ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='MicrosoftOnlineServicesID', ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='WindowsLiveCustomDomains', ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='InactiveMailbox', Mandatory=$true, ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='User', ValueFromPipeline=$true)]
    ${InactiveMailbox},

    [string]
    ${Initials},

    [Parameter(ParameterSetName='PublicFolder')]
    [bool]
    ${IsExcludedFromServingHierarchy},

    [string]
    ${LastName},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='WindowsLiveID')]
    [Parameter(ParameterSetName='WindowsLiveCustomDomains')]
    [Parameter(ParameterSetName='MailboxPlan')]
    [Parameter(ParameterSetName='DisabledUser')]
    [Parameter(ParameterSetName='ImportLiveId')]
    [Parameter(ParameterSetName='RemovedMailbox')]
    [Parameter(ParameterSetName='InactiveMailbox')]
    [Parameter(ParameterSetName='FederatedUser')]
    [Parameter(ParameterSetName='MicrosoftOnlineServicesFederatedUser')]
    [Parameter(ParameterSetName='RemoteArchive')]
    [Parameter(ParameterSetName='MicrosoftOnlineServicesID')]
    ${MailboxPlan},

    [ValidateNotNullOrEmpty()]
    [string]
    ${MailboxRegion},

    [Parameter(ParameterSetName='MicrosoftOnlineServicesID', Mandatory=$true)]
    [Parameter(ParameterSetName='MicrosoftOnlineServicesFederatedUser', Mandatory=$true)]
    [Parameter(ParameterSetName='EnableRoomMailboxAccount')]
    ${MicrosoftOnlineServicesID},

    [Parameter(ParameterSetName='Migration', Mandatory=$true)]
    [switch]
    ${Migration},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Shared')]
    [Parameter(ParameterSetName='TeamMailboxIW')]
    [Parameter(ParameterSetName='TeamMailboxITPro')]
    [Parameter(ParameterSetName='Linked')]
    [Parameter(ParameterSetName='LinkedWithSyncMailbox')]
    [Parameter(ParameterSetName='LinkedRoomMailbox')]
    [Parameter(ParameterSetName='Room')]
    [Parameter(ParameterSetName='Equipment')]
    [Parameter(ParameterSetName='WindowsLiveID')]
    [Parameter(ParameterSetName='MicrosoftOnlineServicesID')]
    [Parameter(ParameterSetName='MailboxPlan')]
    [Parameter(ParameterSetName='WindowsLiveCustomDomains')]
    [Parameter(ParameterSetName='ImportLiveId')]
    [Parameter(ParameterSetName='DisabledUser')]
    [Parameter(ParameterSetName='RemovedMailbox')]
    [Parameter(ParameterSetName='InactiveMailbox')]
    [Parameter(ParameterSetName='RemoteArchive')]
    [Parameter(ParameterSetName='GroupMailbox')]
    ${ModeratedBy},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Shared')]
    [Parameter(ParameterSetName='TeamMailboxIW')]
    [Parameter(ParameterSetName='TeamMailboxITPro')]
    [Parameter(ParameterSetName='Linked')]
    [Parameter(ParameterSetName='LinkedWithSyncMailbox')]
    [Parameter(ParameterSetName='LinkedRoomMailbox')]
    [Parameter(ParameterSetName='Room')]
    [Parameter(ParameterSetName='Equipment')]
    [Parameter(ParameterSetName='WindowsLiveID')]
    [Parameter(ParameterSetName='MicrosoftOnlineServicesID')]
    [Parameter(ParameterSetName='MailboxPlan')]
    [Parameter(ParameterSetName='WindowsLiveCustomDomains')]
    [Parameter(ParameterSetName='ImportLiveId')]
    [Parameter(ParameterSetName='DisabledUser')]
    [Parameter(ParameterSetName='RemovedMailbox')]
    [Parameter(ParameterSetName='InactiveMailbox')]
    [Parameter(ParameterSetName='RemoteArchive')]
    [bool]
    ${ModerationEnabled},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name},

    [Parameter(ParameterSetName='Room')]
    [Parameter(ParameterSetName='LinkedRoomMailbox')]
    [string]
    ${Office},

    ${OrganizationalUnit},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Linked')]
    [Parameter(ParameterSetName='LinkedWithSyncMailbox')]
    [Parameter(ParameterSetName='LinkedRoomMailbox')]
    [Parameter(ParameterSetName='Room')]
    [Parameter(ParameterSetName='Equipment')]
    [Parameter(ParameterSetName='Scheduling')]
    [Parameter(ParameterSetName='Shared')]
    [Parameter(ParameterSetName='TeamMailboxIW')]
    [Parameter(ParameterSetName='TeamMailboxITPro')]
    [Parameter(ParameterSetName='WindowsLiveID', Mandatory=$true)]
    [Parameter(ParameterSetName='Arbitration')]
    [Parameter(ParameterSetName='Migration')]
    [Parameter(ParameterSetName='Discovery')]
    [Parameter(ParameterSetName='DisabledUser')]
    [Parameter(ParameterSetName='RemovedMailbox')]
    [Parameter(ParameterSetName='InactiveMailbox')]
    [Parameter(ParameterSetName='RemoteArchive', Mandatory=$true)]
    [Parameter(ParameterSetName='MicrosoftOnlineServicesID')]
    [securestring]
    ${Password},

    [Parameter(ParameterSetName='Room')]
    [Parameter(ParameterSetName='LinkedRoomMailbox')]
    [string]
    ${Phone},

    ${PrimarySmtpAddress},

    [Parameter(ParameterSetName='PublicFolder', Mandatory=$true)]
    [switch]
    ${PublicFolder},

    [bool]
    ${RemotePowerShellEnabled},

    [Parameter(ParameterSetName='WindowsLiveID', ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='MicrosoftOnlineServicesID', ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='FederatedUser', ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='MicrosoftOnlineServicesFederatedUser', ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='WindowsLiveCustomDomains', ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='RemovedMailbox', Mandatory=$true, ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='RemoteArchive', ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='ImportLiveId', ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='User', ValueFromPipeline=$true)]
    ${RemovedMailbox},

    [bool]
    ${ResetPasswordOnNextLogon},

    [Parameter(ParameterSetName='Room')]
    [Parameter(ParameterSetName='LinkedRoomMailbox')]
    ${ResourceCapacity},

    ${RoleAssignmentPolicy},

    [Parameter(ParameterSetName='Room', Mandatory=$true)]
    [Parameter(ParameterSetName='EnableRoomMailboxAccount', Mandatory=$true)]
    [switch]
    ${Room},

    [Parameter(ParameterSetName='EnableRoomMailboxAccount')]
    [securestring]
    ${RoomMailboxPassword},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Shared')]
    [Parameter(ParameterSetName='TeamMailboxIW')]
    [Parameter(ParameterSetName='TeamMailboxITPro')]
    [Parameter(ParameterSetName='Linked')]
    [Parameter(ParameterSetName='LinkedWithSyncMailbox')]
    [Parameter(ParameterSetName='LinkedRoomMailbox')]
    [Parameter(ParameterSetName='Room')]
    [Parameter(ParameterSetName='Equipment')]
    [Parameter(ParameterSetName='WindowsLiveID')]
    [Parameter(ParameterSetName='MicrosoftOnlineServicesID')]
    [Parameter(ParameterSetName='MailboxPlan')]
    [Parameter(ParameterSetName='WindowsLiveCustomDomains')]
    [Parameter(ParameterSetName='ImportLiveId')]
    [Parameter(ParameterSetName='DisabledUser')]
    [Parameter(ParameterSetName='RemovedMailbox')]
    [Parameter(ParameterSetName='InactiveMailbox')]
    [Parameter(ParameterSetName='RemoteArchive')]
    [Parameter(ParameterSetName='GroupMailbox')]
    ${SendModerationNotifications},

    [Parameter(ParameterSetName='Shared', Mandatory=$true)]
    [switch]
    ${Shared},

    [switch]
    ${TargetAllMDBs}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Password'))
            {
                $Password__Unsecure = [System.Net.NetworkCredential]::new('', $PSCmdlet.MyInvocation.BoundParameters['Password']).Password;
                $PSCmdlet.MyInvocation.BoundParameters['Password'] = Encrypt-Value -UnsecureString $Password__Unsecure;
            }
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('RoomMailboxPassword'))
            {
                $RoomMailboxPassword__Unsecure = [System.Net.NetworkCredential]::new('', $PSCmdlet.MyInvocation.BoundParameters['RoomMailboxPassword']).Password;
                $PSCmdlet.MyInvocation.BoundParameters['RoomMailboxPassword'] = Encrypt-Value -UnsecureString $RoomMailboxPassword__Unsecure;
            }
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-Mailbox' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:New-MailboxAuditLogSearch
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    ${EndDate},

    ${ExternalAccess},

    [switch]
    ${GroupMailbox},

    ${HasAttachments},

    ${LogonTypes},

    ${Mailboxes},

    [string]
    ${Name},

    ${Operations},

    [switch]
    ${ShowDetails},

    [Parameter(Mandatory=$true)]
    ${StartDate},

    [Parameter(Mandatory=$true)]
    ${StatusMailRecipients}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-MailboxAuditLogSearch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:New-MailboxRestoreRequest
{
    [CmdletBinding(DefaultParameterSetName='MigrationLocalMailboxRestore', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${AcceptLargeDataLoss},

    [switch]
    ${AllowLegacyDNMismatch},

    ${AssociatedMessagesCopyOption},

    ${BadItemLimit},

    [ValidateLength(1, 255)]
    [string]
    ${BatchName},

    ${CompletedRequestAgeLimit},

    ${ConflictResolutionOption},

    [string]
    ${ContentFilter},

    [cultureinfo]
    ${ContentFilterLanguage},

    [Parameter(ParameterSetName='CrossTenantRestore', Mandatory=$true)]
    [switch]
    ${CrossTenantRestore},

    [ValidateNotNull()]
    ${DomainController},

    [switch]
    ${ExcludeDumpster},

    [string[]]
    ${ExcludeFolders},

    [string[]]
    ${IncludeFolders},

    ${LargeItemLimit},

    [ValidateLength(1, 255)]
    [string]
    ${Name},

    [Parameter(ParameterSetName='RemoteMailboxRestore', Mandatory=$true)]
    [ValidateNotNull()]
    [pscredential]
    ${RemoteCredential},

    [Parameter(ParameterSetName='RemoteMailboxRestore', Mandatory=$true)]
    [ValidateNotNull()]
    [guid]
    ${RemoteDatabaseGuid},

    [Parameter(ParameterSetName='RemoteMailboxRestore', Mandatory=$true)]
    ${RemoteHostName},

    [Parameter(ParameterSetName='RemoteMailboxRestore', Mandatory=$true)]
    ${RemoteRestoreType},

    [System.Object[]]
    ${SkipMerging},

    [Parameter(ParameterSetName='CrossTenantRestore', Mandatory=$true)]
    ${SourceEndpoint},

    [Parameter(ParameterSetName='CrossTenantRestore', Mandatory=$true)]
    [guid]
    ${SourceExchangeGuid},

    [Parameter(ParameterSetName='SourceMailbox')]
    [switch]
    ${SourceIsArchive},

    [Parameter(ParameterSetName='SourceMailbox', Mandatory=$true)]
    [ValidateNotNull()]
    ${SourceMailbox},

    [string]
    ${SourceRootFolder},

    [Parameter(ParameterSetName='MigrationLocalMailboxRestore', Mandatory=$true)]
    [Parameter(ParameterSetName='RemoteMailboxRestore', Mandatory=$true)]
    [ValidateNotNull()]
    ${SourceStoreMailbox},

    [Parameter(ParameterSetName='CrossTenantRestore', Mandatory=$true)]
    ${SourceTenant},

    [switch]
    ${Suspend},

    [ValidateLength(1, 4096)]
    [string]
    ${SuspendComment},

    [switch]
    ${TargetIsArchive},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${TargetMailbox},

    [string]
    ${TargetRootFolder},

    ${TargetType}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('RemoteCredential'))
            {
                $RemoteCredential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['RemoteCredential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['RemoteCredential'] = Encrypt-Value -UnsecureString $RemoteCredential__Unsecure;
            }
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-MailboxRestoreRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:New-MailboxSearch
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Description},

    [switch]
    ${Force},

    [bool]
    ${InPlaceHoldEnabled},

    [string]
    ${InPlaceHoldIdentity},

    ${ItemHoldPeriod},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Object[]]
    ${SourceMailboxes}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-MailboxSearch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-MailContact
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [ValidateNotNullOrEmpty()]
    [string]
    ${Alias},

    [string]
    ${DisplayName},

    [Parameter(Mandatory=$true)]
    ${ExternalEmailAddress},

    [string]
    ${FirstName},

    [string]
    ${Initials},

    [string]
    ${LastName},

    ${MacAttachmentFormat},

    ${MessageBodyFormat},

    ${MessageFormat},

    ${ModeratedBy},

    [bool]
    ${ModerationEnabled},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    ${OrganizationalUnit},

    ${SendModerationNotifications},

    [bool]
    ${UsePreferMessageFormat}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-MailContact' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:New-MailMessage
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Body},

    ${BodyFormat},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Subject}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-MailMessage' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-MailUser
{
    [CmdletBinding(DefaultParameterSetName='DisabledUser', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [ValidateNotNullOrEmpty()]
    [string]
    ${Alias},

    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='EnabledUser', Mandatory=$true)]
    [Parameter(ParameterSetName='DisabledUser', Mandatory=$true)]
    [Parameter(ParameterSetName='WindowsLiveID')]
    [Parameter(ParameterSetName='MicrosoftOnlineServicesID')]
    [Parameter(ParameterSetName='FederatedUser')]
    [Parameter(ParameterSetName='ImportLiveId')]
    [Parameter(ParameterSetName='WindowsLiveCustomDomains')]
    ${ExternalEmailAddress},

    [Parameter(ParameterSetName='FederatedUser', Mandatory=$true)]
    [Parameter(ParameterSetName='MicrosoftOnlineServicesFederatedUser', Mandatory=$true)]
    [string]
    ${FederatedIdentity},

    [string]
    ${FirstName},

    [string]
    ${ImmutableId},

    [string]
    ${Initials},

    [string]
    ${LastName},

    [Parameter(ParameterSetName='LOBAppAccount')]
    [switch]
    ${LOBAppAccount},

    [Parameter(ParameterSetName='EnabledUser')]
    [Parameter(ParameterSetName='DisabledUser')]
    ${MacAttachmentFormat},

    [ValidateNotNullOrEmpty()]
    [string]
    ${MailboxRegion},

    [Parameter(ParameterSetName='EnabledUser')]
    [Parameter(ParameterSetName='DisabledUser')]
    ${MessageBodyFormat},

    [Parameter(ParameterSetName='EnabledUser')]
    [Parameter(ParameterSetName='DisabledUser')]
    ${MessageFormat},

    [Parameter(ParameterSetName='MicrosoftOnlineServicesID', Mandatory=$true)]
    [Parameter(ParameterSetName='MicrosoftOnlineServicesFederatedUser', Mandatory=$true)]
    [Parameter(ParameterSetName='EnableRoomMailboxAccount')]
    ${MicrosoftOnlineServicesID},

    ${ModeratedBy},

    [bool]
    ${ModerationEnabled},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    ${OrganizationalUnit},

    [Parameter(ParameterSetName='EnabledUser', Mandatory=$true)]
    [Parameter(ParameterSetName='WindowsLiveID', Mandatory=$true)]
    [Parameter(ParameterSetName='MicrosoftOnlineServicesID', Mandatory=$true)]
    [Parameter(ParameterSetName='LOBAppAccount', Mandatory=$true)]
    [securestring]
    ${Password},

    ${PrimarySmtpAddress},

    [bool]
    ${RemotePowerShellEnabled},

    ${SendModerationNotifications},

    [Parameter(ParameterSetName='EnabledUser')]
    [Parameter(ParameterSetName='DisabledUser')]
    [bool]
    ${UsePreferMessageFormat}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Password'))
            {
                $Password__Unsecure = [System.Net.NetworkCredential]::new('', $PSCmdlet.MyInvocation.BoundParameters['Password']).Password;
                $PSCmdlet.MyInvocation.BoundParameters['Password'] = Encrypt-Value -UnsecureString $Password__Unsecure;
            }
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-MailUser' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-MalwareFilterPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${AdminDisplayName},

    [string]
    ${CustomExternalBody},

    [string]
    ${CustomExternalSubject},

    ${CustomFromAddress},

    [string]
    ${CustomFromName},

    [string]
    ${CustomInternalBody},

    [string]
    ${CustomInternalSubject},

    [bool]
    ${CustomNotifications},

    [bool]
    ${EnableExternalSenderAdminNotifications},

    [bool]
    ${EnableFileFilter},

    [bool]
    ${EnableInternalSenderAdminNotifications},

    ${ExternalSenderAdminAddress},

    ${FileTypeAction},

    [string[]]
    ${FileTypes},

    ${InternalSenderAdminAddress},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [string]
    ${QuarantineTag},

    ${RecommendedPolicyType},

    [bool]
    ${ZapEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-MalwareFilterPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-MalwareFilterRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [bool]
    ${Enabled},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${MalwareFilterPolicy},

    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [int]
    ${Priority},

    [System.Object[]]
    ${RecipientDomainIs},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-MalwareFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-ManagementRole
{
    [CmdletBinding(DefaultParameterSetName='NewDerivedRoleParameterSet', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Description},

    [Parameter(ParameterSetName='NewDerivedRoleParameterSet', ValueFromPipeline=$true)]
    [string[]]
    ${EnabledCmdlets},

    [switch]
    ${Force},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [Parameter(ParameterSetName='NewDerivedRoleParameterSet', Mandatory=$true, ValueFromPipeline=$true)]
    ${Parent}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-ManagementRole' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-ManagementRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='User', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='App', Mandatory=$true)]
    ${App},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Policy')]
    [Parameter(ParameterSetName='Computer')]
    [Parameter(ParameterSetName='SecurityGroup')]
    [ValidateNotNullOrEmpty()]
    ${CustomRecipientWriteScope},

    [Parameter(ParameterSetName='App')]
    [ValidateNotNullOrEmpty()]
    ${CustomResourceScope},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='App')]
    [Parameter(ParameterSetName='SecurityGroup')]
    [switch]
    ${Delegating},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Policy')]
    [Parameter(ParameterSetName='Computer')]
    [Parameter(ParameterSetName='SecurityGroup')]
    [ValidateNotNullOrEmpty()]
    ${ExclusiveRecipientWriteScope},

    [switch]
    ${Force},

    [Parameter(Position=0)]
    [string]
    ${Name},

    [Parameter(ParameterSetName='Policy', Mandatory=$true)]
    ${Policy},

    [Parameter(ParameterSetName='App')]
    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Policy')]
    [Parameter(ParameterSetName='Computer')]
    [Parameter(ParameterSetName='SecurityGroup')]
    [ValidateNotNullOrEmpty()]
    ${RecipientAdministrativeUnitScope},

    [Parameter(ParameterSetName='App')]
    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Policy')]
    [Parameter(ParameterSetName='Computer')]
    [Parameter(ParameterSetName='SecurityGroup')]
    [ValidateNotNullOrEmpty()]
    ${RecipientGroupScope},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Policy')]
    [Parameter(ParameterSetName='Computer')]
    [Parameter(ParameterSetName='SecurityGroup')]
    [ValidateNotNullOrEmpty()]
    ${RecipientOrganizationalUnitScope},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Policy')]
    [Parameter(ParameterSetName='Computer')]
    [Parameter(ParameterSetName='SecurityGroup')]
    ${RecipientRelativeWriteScope},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
    ${Role},

    [Parameter(ParameterSetName='SecurityGroup', Mandatory=$true)]
    ${SecurityGroup},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    ${User}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-ManagementRoleAssignment' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-ManagementScope
{
    [CmdletBinding(DefaultParameterSetName='RecipientFilter', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='RecipientFilter')]
    [Parameter(ParameterSetName='ServerFilter')]
    [Parameter(ParameterSetName='ServerList')]
    [Parameter(ParameterSetName='DatabaseFilter')]
    [Parameter(ParameterSetName='DatabaseList')]
    [switch]
    ${Exclusive},

    [Parameter(ParameterSetName='RecipientFilter')]
    [Parameter(ParameterSetName='ServerFilter')]
    [Parameter(ParameterSetName='ServerList')]
    [Parameter(ParameterSetName='DatabaseFilter')]
    [Parameter(ParameterSetName='DatabaseList')]
    [switch]
    ${Force},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [Parameter(ParameterSetName='RecipientFilter', Mandatory=$true)]
    [string]
    ${RecipientRestrictionFilter},

    [Parameter(ParameterSetName='RecipientFilter')]
    ${RecipientRoot}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-ManagementScope' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:New-MessageClassification
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [guid]
    ${ClassificationID},

    [Parameter(Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='Identity')]
    ${DisplayPrecedence},

    [Parameter(ParameterSetName='Localized', Mandatory=$true)]
    [cultureinfo]
    ${Locale},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${PermissionMenuVisible},

    [string]
    ${RecipientDescription},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${RetainClassificationEnabled},

    [Parameter(Mandatory=$true)]
    [string]
    ${SenderDescription}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-MessageClassification' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:New-MigrationBatch
{
    [CmdletBinding(DefaultParameterSetName='Onboarding', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='Offboarding')]
    [Parameter(ParameterSetName='Local')]
    [Parameter(ParameterSetName='GoogleResourceOnboarding')]
    [Parameter(ParameterSetName='ManagedGmailTeams')]
    [switch]
    ${AdoptPreexisting},

    [bool]
    ${AllowUnknownColumnsInCSV},

    [Parameter(ParameterSetName='Analysis', Mandatory=$true)]
    [switch]
    ${Analyze},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='Offboarding')]
    [string]
    ${ArchiveDomain},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='Offboarding')]
    [Parameter(ParameterSetName='Local')]
    [switch]
    ${ArchiveOnly},

    [switch]
    ${AutoComplete},

    [Parameter(ParameterSetName='Onboarding')]
    [switch]
    ${AutoProvisioning},

    [switch]
    ${AutoStart},

    [Parameter(ParameterSetName='Onboarding')]
    [switch]
    ${AvoidMergeOverlap},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='Offboarding')]
    [Parameter(ParameterSetName='Local')]
    [Parameter(ParameterSetName='PublicFolderToUnifiedGroup')]
    [Parameter(ParameterSetName='FolderMove')]
    ${BadItemLimit},

    ${CompleteAfter},

    [Parameter(ParameterSetName='Onboarding')]
    [string]
    ${ContentFilter},

    [Parameter(ParameterSetName='Onboarding')]
    [cultureinfo]
    ${ContentFilterLanguage},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='Offboarding', Mandatory=$true)]
    [Parameter(ParameterSetName='Local', Mandatory=$true)]
    [Parameter(ParameterSetName='PublicFolderToUnifiedGroup', Mandatory=$true)]
    [Parameter(ParameterSetName='FolderMove', Mandatory=$true)]
    [Parameter(ParameterSetName='PointInTimeRecovery', Mandatory=$true)]
    [Parameter(ParameterSetName='PointInTimeRecoveryProvisionOnly', Mandatory=$true)]
    [Parameter(ParameterSetName='Analysis', Mandatory=$true)]
    [Parameter(ParameterSetName='GoogleResourceOnboarding', Mandatory=$true)]
    [Parameter(ParameterSetName='ManagedGmailTeams', Mandatory=$true)]
    [byte[]]
    ${CSVData},

    [Parameter(ParameterSetName='PreexistingUsers')]
    [Parameter(ParameterSetName='PreexistingUserIds')]
    [switch]
    ${DisableOnCopy},

    [Parameter(ParameterSetName='Onboarding')]
    [switch]
    ${ExcludeDumpsters},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='Analysis')]
    ${ExcludeFolders},

    [Parameter(ParameterSetName='Onboarding')]
    ${ForwardingDisposition},

    [Parameter(ParameterSetName='GoogleResourceOnboarding', Mandatory=$true)]
    [switch]
    ${GoogleResource},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='Analysis')]
    ${IncludeFolders},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='Offboarding')]
    [Parameter(ParameterSetName='PublicFolderToUnifiedGroup')]
    [Parameter(ParameterSetName='FolderMove')]
    ${LargeItemLimit},

    [Parameter(ParameterSetName='ManagedGmailTeams', Mandatory=$true)]
    [switch]
    ${ManagedGmailTeams},

    [Parameter(ParameterSetName='Onboarding')]
    [switch]
    ${MigrateTasks},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='Offboarding')]
    [Parameter(ParameterSetName='Local')]
    [Parameter(ParameterSetName='FolderMove')]
    ${MoveOptions},

    [Parameter(Mandatory=$true)]
    [ValidateLength(1, 200)]
    [string]
    ${Name},

    ${NotificationEmails},

    ${Partition},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='Offboarding')]
    [Parameter(ParameterSetName='Local')]
    [switch]
    ${PrimaryOnly},

    [Parameter(ParameterSetName='PublicFolderToUnifiedGroup', Mandatory=$true)]
    [switch]
    ${PublicFolderToUnifiedGroup},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='Offboarding')]
    [Parameter(ParameterSetName='Local')]
    [Parameter(ParameterSetName='GoogleResourceOnboarding')]
    [Parameter(ParameterSetName='ManagedGmailTeams')]
    [switch]
    ${RemoveOnCopy},

    [Parameter(ParameterSetName='Onboarding')]
    [switch]
    ${RenamePrimaryCalendar},

    ${ReportInterval},

    [Parameter(ParameterSetName='Onboarding')]
    [switch]
    ${Restore},

    [Parameter(ParameterSetName='Onboarding')]
    [switch]
    ${SimplifiedSwitchOver},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='ManagedGmailTeams')]
    [switch]
    ${SkipCalendar},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='ManagedGmailTeams')]
    [switch]
    ${SkipContacts},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='GoogleResourceOnboarding')]
    [switch]
    ${SkipDelegates},

    [Parameter(ParameterSetName='Onboarding')]
    [switch]
    ${SkipMail},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='Offboarding')]
    [Parameter(ParameterSetName='GoogleResourceOnboarding')]
    ${SkipMerging},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='Offboarding')]
    [Parameter(ParameterSetName='Local')]
    ${SkipMoving},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='GoogleResourceOnboarding')]
    [switch]
    ${SkipProvisioning},

    [switch]
    ${SkipReports},

    [Parameter(ParameterSetName='Onboarding')]
    [switch]
    ${SkipRules},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='PublicFolderToUnifiedGroup')]
    [Parameter(ParameterSetName='Analysis')]
    [Parameter(ParameterSetName='GoogleResourceOnboarding')]
    [Parameter(ParameterSetName='ManagedGmailTeams')]
    ${SourceEndpoint},

    [Parameter(ParameterSetName='Onboarding')]
    [guid]
    ${SourcePFPrimaryMailboxGuid},

    ${StartAfter},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='Offboarding')]
    [Parameter(ParameterSetName='Local')]
    ${TargetArchiveDatabases},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='Offboarding')]
    [Parameter(ParameterSetName='Local')]
    ${TargetDatabases},

    [Parameter(ParameterSetName='Offboarding')]
    [Parameter(ParameterSetName='Onboarding')]
    ${TargetDeliveryDomain},

    [Parameter(ParameterSetName='Offboarding')]
    ${TargetEndpoint},

    ${TimeZone},

    [Parameter(ParameterSetName='PreexistingUserIds', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNullOrEmpty()]
    ${UserIds},

    [Parameter(ParameterSetName='PreexistingUsers', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNullOrEmpty()]
    ${Users},

    [Parameter(ParameterSetName='Onboarding')]
    [Parameter(ParameterSetName='Local')]
    ${WorkflowControlFlags},

    [Parameter(ParameterSetName='WorkflowTemplate')]
    [string]
    ${WorkflowTemplate},

    [Parameter(ParameterSetName='Onboarding')]
    [byte[]]
    ${XMLData}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-MigrationBatch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:New-MigrationEndpoint
{
    [CmdletBinding(DefaultParameterSetName='ExchangeRemoteMove', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='ExchangeOutlookAnywhere')]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhereAutoDiscover')]
    [Parameter(ParameterSetName='IMAP')]
    [switch]
    ${AcceptUntrustedCertificates},

    [Parameter(ParameterSetName='ExchangeRemoteMove')]
    [string]
    ${ApplicationId},

    [Parameter(ParameterSetName='ExchangeRemoteMove')]
    [string]
    ${AppSecretKeyVaultUrl},

    [Parameter(ParameterSetName='IMAP')]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhere')]
    [Parameter(ParameterSetName='PublicFolder')]
    [Parameter(ParameterSetName='LegacyPublicFolderToUnifiedGroup')]
    ${Authentication},

    [Parameter(ParameterSetName='ExchangeOutlookAnywhereAutoDiscover', Mandatory=$true)]
    [Parameter(ParameterSetName='ExchangeRemoteMoveAutoDiscover', Mandatory=$true)]
    [switch]
    ${Autodiscover},

    [Parameter(ParameterSetName='Compliance', Mandatory=$true)]
    [switch]
    ${Compliance},

    [Parameter(ParameterSetName='ExchangeOutlookAnywhere', Mandatory=$true)]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhereAutoDiscover', Mandatory=$true)]
    [Parameter(ParameterSetName='ExchangeRemoteMove')]
    [Parameter(ParameterSetName='ExchangeRemoteMoveAutoDiscover', Mandatory=$true)]
    [Parameter(ParameterSetName='PSTImport')]
    [Parameter(ParameterSetName='PublicFolder', Mandatory=$true)]
    [Parameter(ParameterSetName='Compliance', Mandatory=$true)]
    [Parameter(ParameterSetName='MrsProxyPublicFolder', Mandatory=$true)]
    [Parameter(ParameterSetName='LegacyPublicFolderToUnifiedGroup', Mandatory=$true)]
    [Parameter(ParameterSetName='MrsProxyPublicFolderToUnifiedGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [pscredential]
    ${Credentials},

    [Parameter(ParameterSetName='Gmail')]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhere')]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhereAutoDiscover', Mandatory=$true)]
    [Parameter(ParameterSetName='ExchangeRemoteMoveAutoDiscover', Mandatory=$true)]
    ${EmailAddress},

    [Parameter(ParameterSetName='ExchangeOutlookAnywhere', Mandatory=$true)]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhereAutoDiscover', Mandatory=$true)]
    [switch]
    ${ExchangeOutlookAnywhere},

    [Parameter(ParameterSetName='ExchangeRemoteMove', Mandatory=$true)]
    [Parameter(ParameterSetName='ExchangeRemoteMoveAutoDiscover', Mandatory=$true)]
    [switch]
    ${ExchangeRemoteMove},

    [Parameter(ParameterSetName='ExchangeOutlookAnywhere')]
    [ValidateNotNull()]
    [string]
    ${ExchangeServer},

    [Parameter(ParameterSetName='Gmail', Mandatory=$true)]
    [Parameter(ParameterSetName='GoogleMarketplaceApp', Mandatory=$true)]
    [switch]
    ${Gmail},

    [Parameter(ParameterSetName='IMAP', Mandatory=$true)]
    [switch]
    ${IMAP},

    [Parameter(ParameterSetName='ExchangeOutlookAnywhere')]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhereAutoDiscover')]
    ${MailboxPermission},

    ${MaxConcurrentIncrementalSyncs},

    ${MaxConcurrentMigrations},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [Parameter(ParameterSetName='ExchangeOutlookAnywhere')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${NspiServer},

    [Parameter(ParameterSetName='GoogleMarketplaceApp', Mandatory=$true)]
    [ValidateNotNull()]
    [securestring]
    ${OAuthCode},

    ${Partition},

    [Parameter(ParameterSetName='IMAP')]
    [int]
    ${Port},

    [Parameter(ParameterSetName='PublicFolder', Mandatory=$true)]
    [Parameter(ParameterSetName='MrsProxyPublicFolder', Mandatory=$true)]
    [switch]
    ${PublicFolder},

    [Parameter(ParameterSetName='PublicFolder', Mandatory=$true)]
    [Parameter(ParameterSetName='LegacyPublicFolderToUnifiedGroup', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${PublicFolderDatabaseServerLegacyDN},

    [Parameter(ParameterSetName='LegacyPublicFolderToUnifiedGroup', Mandatory=$true)]
    [Parameter(ParameterSetName='MrsProxyPublicFolderToUnifiedGroup', Mandatory=$true)]
    [switch]
    ${PublicFolderToUnifiedGroup},

    [Parameter(ParameterSetName='GoogleMarketplaceApp')]
    [ValidateNotNull()]
    [string]
    ${RedirectUri},

    [Parameter(ParameterSetName='IMAP', Mandatory=$true)]
    [Parameter(ParameterSetName='ExchangeRemoteMove', Mandatory=$true)]
    [Parameter(ParameterSetName='PSTImport', Mandatory=$true)]
    [Parameter(ParameterSetName='Compliance', Mandatory=$true)]
    [Parameter(ParameterSetName='MrsProxyPublicFolder', Mandatory=$true)]
    [Parameter(ParameterSetName='MrsProxyPublicFolderToUnifiedGroup', Mandatory=$true)]
    [ValidateNotNull()]
    ${RemoteServer},

    [Parameter(ParameterSetName='ExchangeRemoteMove')]
    [string]
    ${RemoteTenant},

    [Parameter(ParameterSetName='ExchangeOutlookAnywhere')]
    [Parameter(ParameterSetName='PublicFolder', Mandatory=$true)]
    [Parameter(ParameterSetName='LegacyPublicFolderToUnifiedGroup', Mandatory=$true)]
    [ValidateNotNull()]
    ${RPCProxyServer},

    [Parameter(ParameterSetName='IMAP')]
    ${Security},

    [Parameter(ParameterSetName='Gmail', Mandatory=$true)]
    [ValidateNotNull()]
    [byte[]]
    ${ServiceAccountKeyFileData},

    [switch]
    ${SkipVerification},

    [Parameter(ParameterSetName='ExchangeOutlookAnywhere')]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhereAutoDiscover')]
    [Parameter(ParameterSetName='PublicFolder', Mandatory=$true)]
    [Parameter(ParameterSetName='LegacyPublicFolderToUnifiedGroup', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourceMailboxLegacyDN},

    [Parameter(ParameterSetName='Gmail')]
    [Parameter(ParameterSetName='GoogleMarketplaceApp')]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhere')]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhereAutoDiscover')]
    [Parameter(ParameterSetName='PublicFolder')]
    [Parameter(ParameterSetName='LegacyPublicFolderToUnifiedGroup')]
    [Parameter(ParameterSetName='MrsProxyPublicFolderToUnifiedGroup')]
    [ValidateNotNull()]
    ${TestMailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credentials'))
            {
                $Credentials__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credentials'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credentials'] = Encrypt-Value -UnsecureString $Credentials__Unsecure;
            }
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('OAuthCode'))
            {
                $OAuthCode__Unsecure = [System.Net.NetworkCredential]::new('', $PSCmdlet.MyInvocation.BoundParameters['OAuthCode']).Password;
                $PSCmdlet.MyInvocation.BoundParameters['OAuthCode'] = Encrypt-Value -UnsecureString $OAuthCode__Unsecure;
            }
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-MigrationEndpoint' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:New-MobileDeviceMailboxPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${AllowApplePushNotifications},

    ${AllowBluetooth},

    [bool]
    ${AllowBrowser},

    [bool]
    ${AllowCamera},

    [bool]
    ${AllowConsumerEmail},

    [bool]
    ${AllowDesktopSync},

    [bool]
    ${AllowExternalDeviceManagement},

    [bool]
    ${AllowGooglePushNotifications},

    [bool]
    ${AllowHTMLEmail},

    [bool]
    ${AllowInternetSharing},

    [bool]
    ${AllowIrDA},

    [bool]
    ${AllowMicrosoftPushNotifications},

    [bool]
    ${AllowMobileOTAUpdate},

    [bool]
    ${AllowNonProvisionableDevices},

    [bool]
    ${AllowPOPIMAPEmail},

    [bool]
    ${AllowRemoteDesktop},

    [bool]
    ${AllowSimplePassword},

    ${AllowSMIMEEncryptionAlgorithmNegotiation},

    [bool]
    ${AllowSMIMESoftCerts},

    [bool]
    ${AllowStorageCard},

    [bool]
    ${AllowTextMessaging},

    [bool]
    ${AllowUnsignedApplications},

    [bool]
    ${AllowUnsignedInstallationPackages},

    [bool]
    ${AllowWiFi},

    [bool]
    ${AlphanumericPasswordRequired},

    ${ApprovedApplicationList},

    [bool]
    ${AttachmentsEnabled},

    [bool]
    ${DeviceEncryptionEnabled},

    ${DevicePolicyRefreshInterval},

    [bool]
    ${IrmEnabled},

    [bool]
    ${IsDefault},

    ${MaxAttachmentSize},

    ${MaxCalendarAgeFilter},

    ${MaxEmailAgeFilter},

    ${MaxEmailBodyTruncationSize},

    ${MaxEmailHTMLBodyTruncationSize},

    ${MaxInactivityTimeLock},

    ${MaxPasswordFailedAttempts},

    [int]
    ${MinPasswordComplexCharacters},

    ${MinPasswordLength},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [bool]
    ${PasswordEnabled},

    ${PasswordExpiration},

    [int]
    ${PasswordHistory},

    [bool]
    ${PasswordRecoveryEnabled},

    [bool]
    ${RequireDeviceEncryption},

    [bool]
    ${RequireEncryptedSMIMEMessages},

    ${RequireEncryptionSMIMEAlgorithm},

    [bool]
    ${RequireManualSyncWhenRoaming},

    ${RequireSignedSMIMEAlgorithm},

    [bool]
    ${RequireSignedSMIMEMessages},

    [bool]
    ${RequireStorageCardEncryption},

    ${UnapprovedInROMApplicationList},

    [bool]
    ${UNCAccessEnabled},

    [bool]
    ${WSSAccessEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-MobileDeviceMailboxPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:New-MoveRequest
{
    [CmdletBinding(DefaultParameterSetName='MigrationLocal', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${AcceptLargeDataLoss},

    [Parameter(ParameterSetName='MigrationRemote')]
    [Parameter(ParameterSetName='MigrationOutbound')]
    [string]
    ${ArchiveDomain},

    [Parameter(ParameterSetName='MigrationLocal')]
    [Parameter(ParameterSetName='MigrationRemote')]
    [Parameter(ParameterSetName='MigrationOutbound')]
    [switch]
    ${ArchiveOnly},

    ${BadItemLimit},

    [ValidateLength(1, 255)]
    [string]
    ${BatchName},

    [datetime]
    ${CompleteAfter},

    ${CompletedRequestAgeLimit},

    [switch]
    ${ForceOffline},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [timespan]
    ${IncrementalSyncInterval},

    ${LargeItemLimit},

    ${MoveOptions},

    [Parameter(ParameterSetName='MigrationOutbound', Mandatory=$true)]
    [switch]
    ${Outbound},

    [switch]
    ${PreventCompletion},

    [Parameter(ParameterSetName='MigrationLocal')]
    [Parameter(ParameterSetName='MigrationRemote')]
    [Parameter(ParameterSetName='MigrationOutbound')]
    [switch]
    ${PrimaryOnly},

    ${ProxyToMailbox},

    [Parameter(ParameterSetName='MigrationRemote', Mandatory=$true)]
    [Parameter(ParameterSetName='MigrationRemoteCrossTenant', Mandatory=$true)]
    [switch]
    ${Remote},

    [Parameter(ParameterSetName='MigrationOutbound')]
    [string]
    ${RemoteArchiveTargetDatabase},

    [Parameter(ParameterSetName='MigrationRemote')]
    [Parameter(ParameterSetName='MigrationOutbound')]
    [Parameter(ParameterSetName='MigrationRemoteLegacy', Mandatory=$true)]
    [pscredential]
    ${RemoteCredential},

    [Parameter(ParameterSetName='MigrationRemoteLegacy', Mandatory=$true)]
    [Parameter(ParameterSetName='MigrationRemote')]
    [Parameter(ParameterSetName='MigrationOutbound')]
    ${RemoteGlobalCatalog},

    [Parameter(ParameterSetName='MigrationRemote', Mandatory=$true)]
    [Parameter(ParameterSetName='MigrationRemoteCrossTenant')]
    [Parameter(ParameterSetName='MigrationOutbound', Mandatory=$true)]
    ${RemoteHostName},

    [Parameter(ParameterSetName='MigrationOutbound')]
    [Parameter(ParameterSetName='MigrationRemoteLegacy')]
    [string]
    ${RemoteTargetDatabase},

    ${RequestExpiryInterval},

    [System.Object[]]
    ${SkipMoving},

    [datetime]
    ${StartAfter},

    [switch]
    ${Suspend},

    [ValidateLength(1, 4096)]
    [string]
    ${SuspendComment},

    [switch]
    ${SuspendWhenReadyToComplete},

    [Parameter(ParameterSetName='MigrationRemoteLegacy')]
    [Parameter(ParameterSetName='MigrationRemote')]
    [Parameter(ParameterSetName='MigrationRemoteCrossTenant', Mandatory=$true)]
    [Parameter(ParameterSetName='MigrationOutbound')]
    ${TargetDeliveryDomain}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('RemoteCredential'))
            {
                $RemoteCredential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['RemoteCredential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['RemoteCredential'] = Encrypt-Value -UnsecureString $RemoteCredential__Unsecure;
            }
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-MoveRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-OnPremisesOrganization
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comment},

    [Parameter(Mandatory=$true)]
    ${HybridDomains},

    [Parameter(Mandatory=$true)]
    ${InboundConnector},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [Parameter(Mandatory=$true)]
    [guid]
    ${OrganizationGuid},

    [string]
    ${OrganizationName},

    ${OrganizationRelationship},

    [Parameter(Mandatory=$true)]
    ${OutboundConnector}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-OnPremisesOrganization' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:New-OrganizationRelationship
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${ArchiveAccessEnabled},

    [bool]
    ${DeliveryReportEnabled},

    [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${DomainNames},

    [bool]
    ${Enabled},

    [bool]
    ${FreeBusyAccessEnabled},

    ${FreeBusyAccessLevel},

    ${FreeBusyAccessScope},

    ${MailboxMoveCapability},

    [bool]
    ${MailboxMoveEnabled},

    ${MailboxMovePublishedScopes},

    [bool]
    ${MailTipsAccessEnabled},

    ${MailTipsAccessLevel},

    ${MailTipsAccessScope},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [string]
    ${OAuthApplicationId},

    ${OrganizationContact},

    [bool]
    ${PhotosEnabled},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [uri]
    ${TargetApplicationUri},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [uri]
    ${TargetAutodiscoverEpr},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [uri]
    ${TargetOwaURL},

    [uri]
    ${TargetSharingEpr}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-OrganizationRelationship' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-OutboundConnector
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${AllAcceptedDomains},

    [bool]
    ${CloudServicesMailEnabled},

    [string]
    ${Comment},

    ${ConnectorSource},

    ${ConnectorType},

    [bool]
    ${Enabled},

    [bool]
    ${IsTransportRuleScoped},

    [guid]
    ${LinkForModifiedConnector},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    ${RecipientDomains},

    [bool]
    ${RouteAllMessagesViaOnPremises},

    [bool]
    ${SenderRewritingEnabled},

    ${SmartHosts},

    [bool]
    ${TestMode},

    ${TlsDomain},

    ${TlsSettings},

    [bool]
    ${UseMXRecord}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-OutboundConnector' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:New-OutlookProtectionRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    ${ApplyRightsProtectionTemplate},

    [bool]
    ${Enabled},

    [switch]
    ${Force},

    [ValidateNotNullOrEmpty()]
    [string[]]
    ${FromDepartment},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [ValidateRange(0, 2147483647)]
    [int]
    ${Priority},

    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${SentTo},

    ${SentToScope},

    [bool]
    ${UserCanOverride}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-OutlookProtectionRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:New-OwaMailboxPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${IsDefault},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-OwaMailboxPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-PartnerApplication
{
    [CmdletBinding(DefaultParameterSetName='AuthMetadataUrlParameterSet', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${AcceptSecurityIdentifierInformation},

    ${AccountType},

    [Parameter(ParameterSetName='ACSTrustApplicationParameterSet', Mandatory=$true)]
    [string]
    ${ApplicationIdentifier},

    [bool]
    ${Enabled},

    ${LinkedAccount},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-PartnerApplication' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-PhishSimOverridePolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comment},

    ${DomainController},

    [bool]
    ${Enabled},

    [switch]
    ${Force},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-PhishSimOverridePolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-PolicyTipConfig
{
    [CmdletBinding(DefaultParameterSetName='Paramters', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [Parameter(Mandatory=$true)]
    [string]
    ${Value}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-PolicyTipConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-PrivilegedIdentityManagementRequest
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [Parameter(ParameterSetName='RoleGroupParams', Mandatory=$true)]
    [Parameter(ParameterSetName='RoleParams', Mandatory=$true)]
    [Parameter(ParameterSetName='TaskParams', Mandatory=$true)]
    [int]
    ${DurationHours},

    [Parameter(ParameterSetName='RoleGroupParams')]
    [Parameter(ParameterSetName='RoleParams')]
    [Parameter(ParameterSetName='TaskParams')]
    [string]
    ${ExternalIdentity},

    [Parameter(ParameterSetName='RoleGroupParams', Mandatory=$true)]
    [Parameter(ParameterSetName='RoleParams', Mandatory=$true)]
    [Parameter(ParameterSetName='TaskParams', Mandatory=$true)]
    [string]
    ${Reason},

    [Parameter(ParameterSetName='RoleGroupParams')]
    [Parameter(ParameterSetName='RoleParams')]
    [Parameter(ParameterSetName='TaskParams')]
    [hashtable]
    ${RequestContext},

    [Parameter(ParameterSetName='RoleParams')]
    [string]
    ${Role},

    [Parameter(ParameterSetName='RoleGroupParams')]
    [string]
    ${RoleGroup},

    [Parameter(ParameterSetName='TaskParams')]
    [string]
    ${Task}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'New-PrivilegedIdentityManagementRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-ProtectionServicePolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-ProtectionServicePolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:New-PublicFolder
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [cultureinfo]
    ${EformsLocaleId},

    ${Mailbox},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    ${Path}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-PublicFolder' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:New-PublicFolderMoveRequest
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${AcceptLargeDataLoss},

    [switch]
    ${AllowLargeItems},

    ${BadItemLimit},

    ${CompletedRequestAgeLimit},

    [ValidateNotNull()]
    ${DomainController},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    [System.Object[]]
    ${Folders},

    [System.Object[]]
    ${InternalFlags},

    [ValidateLength(1, 255)]
    [string]
    ${Name},

    [ValidateNotNull()]
    ${Organization},

    ${Priority},

    ${RequestExpiryInterval},

    [switch]
    ${Suspend},

    [ValidateLength(1, 4096)]
    [string]
    ${SuspendComment},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${TargetMailbox},

    ${WorkloadType}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-PublicFolderMoveRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-QuarantinePermissions
{
    [CmdletBinding()]
    param(
    
    [bool]
    ${PermissionToAllowSender},

    [bool]
    ${PermissionToBlockSender},

    [bool]
    ${PermissionToDelete},

    [bool]
    ${PermissionToDownload},

    [bool]
    ${PermissionToPreview},

    [bool]
    ${PermissionToRelease},

    [bool]
    ${PermissionToRequestRelease},

    [bool]
    ${PermissionToViewHeader}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'New-QuarantinePermissions' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-QuarantinePolicy
{
    [CmdletBinding()]
    param(
    
    [string]
    ${AdminDisplayName},

    [int]
    ${AdminNotificationFrequencyInDays},

    ${AdminNotificationLanguage},

    [bool]
    ${AdminNotificationsEnabled},

    ${AdminQuarantinePermissionsList},

    [string]
    ${CustomDisclaimer},

    ${DomainController},

    [ValidateNotNull()]
    ${EndUserQuarantinePermissions},

    [int]
    ${EndUserQuarantinePermissionsValue},

    [string]
    ${EndUserSpamNotificationCustomFromAddress},

    [timespan]
    ${EndUserSpamNotificationFrequency},

    [int]
    ${EndUserSpamNotificationFrequencyInDays},

    ${EndUserSpamNotificationLanguage},

    ${EsnCustomSubject},

    [bool]
    ${ESNEnabled},

    [bool]
    ${IncludeMessagesFromBlockedSenderAddress},

    ${MultiLanguageCustomDisclaimer},

    ${MultiLanguageSenderName},

    ${MultiLanguageSetting},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [bool]
    ${OrganizationBrandingEnabled},

    ${QuarantinePolicyType},

    [int]
    ${QuarantineRetentionDays}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'New-QuarantinePolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:New-RemoteDomain
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    ${DomainName},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-RemoteDomain' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:New-ReportSchedule
{
    [CmdletBinding()]
    param(
    
    [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${Direction},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${DlpRuleId},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${EncryptionTemplate},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${EncryptionType},

    [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [datetime]
    ${ExpiryDate},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [switch]
    ${IncludeDLP},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [cultureinfo]
    ${Locale},

    [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${NotificationEmail},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RecipientAddress},

    [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${ReportFrequency},

    [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${ReportType},

    [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ScheduleName},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SenderAddress},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [datetime]
    ${StartDate},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${TransportRuleId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'New-ReportSchedule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-ReportSubmissionPolicy
{
    [CmdletBinding()]
    param(
    
    [bool]
    ${DisableQuarantineReportingOption},

    [bool]
    ${DisableUserSubmissionOptions},

    [bool]
    ${EnableCustomizedMsg},

    [bool]
    ${EnableCustomNotificationSender},

    [bool]
    ${EnableOrganizationBranding},

    [bool]
    ${EnableReportToMicrosoft},

    [bool]
    ${EnableThirdPartyAddress},

    [bool]
    ${EnableUserEmailNotification},

    [string]
    ${JunkReviewResultMessage},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePostSubmitMessageButtonLinkForJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePostSubmitMessageButtonLinkForPhishing},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePostSubmitMessageButtonTextForJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePostSubmitMessageButtonTextForPhishing},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePostSubmitMessageForJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePostSubmitMessageForPhishing},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePostSubmitMessageTitleForJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePostSubmitMessageTitleForPhishing},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageButtonLinkForJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageButtonLinkForNotJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageButtonLinkForPhishing},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageButtonTextForJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageButtonTextForNotJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageButtonTextForPhishing},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageForJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageForNotJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageForPhishing},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageTitleForJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageTitleForNotJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageTitleForPhishing},

    ${MultiLanguageSetting},

    [string]
    ${NotificationFooterMessage},

    ${NotificationSenderAddress},

    [bool]
    ${NotificationsForCleanSubmissionAirInvestigationsEnabled},

    [bool]
    ${NotificationsForPhishMalwareSubmissionAirInvestigationsEnabled},

    [bool]
    ${NotificationsForSpamSubmissionAirInvestigationsEnabled},

    [bool]
    ${NotificationsForSubmissionAirInvestigationsEnabled},

    [string]
    ${NotJunkReviewResultMessage},

    [bool]
    ${OnlyShowPhishingDisclaimer},

    [string]
    ${PhishingReviewResultMessage},

    [string]
    ${PostSubmitMessage},

    [bool]
    ${PostSubmitMessageEnabled},

    [string]
    ${PostSubmitMessageForJunk},

    [string]
    ${PostSubmitMessageForNotJunk},

    [string]
    ${PostSubmitMessageForPhishing},

    [string]
    ${PostSubmitMessageTitle},

    [string]
    ${PostSubmitMessageTitleForJunk},

    [string]
    ${PostSubmitMessageTitleForNotJunk},

    [string]
    ${PostSubmitMessageTitleForPhishing},

    [string]
    ${PreSubmitMessage},

    [bool]
    ${PreSubmitMessageEnabled},

    [string]
    ${PreSubmitMessageForJunk},

    [string]
    ${PreSubmitMessageForNotJunk},

    [string]
    ${PreSubmitMessageForPhishing},

    [string]
    ${PreSubmitMessageTitle},

    [string]
    ${PreSubmitMessageTitleForJunk},

    [string]
    ${PreSubmitMessageTitleForNotJunk},

    [string]
    ${PreSubmitMessageTitleForPhishing},

    [bool]
    ${ReportChatMessageEnabled},

    [bool]
    ${ReportChatMessageToCustomizedAddressEnabled},

    ${ReportJunkAddresses},

    [bool]
    ${ReportJunkToCustomizedAddress},

    ${ReportNotJunkAddresses},

    [bool]
    ${ReportNotJunkToCustomizedAddress},

    ${ReportPhishAddresses},

    [bool]
    ${ReportPhishToCustomizedAddress},

    ${ThirdPartyReportAddresses},

    [int]
    ${UserSubmissionOptions},

    [string]
    ${UserSubmissionOptionsMessage}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'New-ReportSubmissionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-ReportSubmissionRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [bool]
    ${Enabled},

    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${ReportSubmissionPolicy},

    [System.Object[]]
    ${SentTo}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-ReportSubmissionRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:New-RetentionPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${IsDefault},

    [switch]
    ${IsDefaultArbitrationMailbox},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [guid]
    ${RetentionId},

    [System.Object[]]
    ${RetentionPolicyTagLinks}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-RetentionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:New-RetentionPolicyTag
{
    [CmdletBinding(DefaultParameterSetName='RetentionPolicy', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='RetentionPolicy')]
    ${AgeLimitForRetention},

    [string]
    ${Comment},

    [switch]
    ${IsDefaultAutoGroupPolicyTag},

    [switch]
    ${IsDefaultModeratedRecipientsPolicyTag},

    ${LocalizedComment},

    ${LocalizedRetentionPolicyTagName},

    [Parameter(ParameterSetName='RetentionPolicy')]
    [string]
    ${MessageClass},

    [bool]
    ${MustDisplayCommentEnabled},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [Parameter(ParameterSetName='RetentionPolicy')]
    ${RetentionAction},

    [Parameter(ParameterSetName='RetentionPolicy')]
    [bool]
    ${RetentionEnabled},

    [Parameter(ParameterSetName='RetentionPolicy')]
    [guid]
    ${RetentionId},

    [bool]
    ${SystemTag},

    ${Type}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-RetentionPolicyTag' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-RoleAssignmentPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Description},

    [switch]
    ${IsDefault},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${Roles}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-RoleAssignmentPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-RoleGroup
{
    [CmdletBinding(DefaultParameterSetName='default', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [ValidateNotNullOrEmpty()]
    ${CustomRecipientWriteScope},

    [string]
    ${Description},

    [string]
    ${DisplayName},

    [switch]
    ${Force},

    [ValidateNotNullOrEmpty()]
    ${ManagedBy},

    [ValidateNotNullOrEmpty()]
    ${Members},

    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${Roles},

    [string]
    ${WellKnownObject}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-RoleGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-SafeAttachmentPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${Action},

    [string]
    ${AdminDisplayName},

    [bool]
    ${Enable},

    [switch]
    ${MakeBuiltInProtection},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [string]
    ${QuarantineTag},

    ${RecommendedPolicyType},

    [bool]
    ${Redirect},

    ${RedirectAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-SafeAttachmentPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-SafeAttachmentRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [bool]
    ${Enabled},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [int]
    ${Priority},

    [System.Object[]]
    ${RecipientDomainIs},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${SafeAttachmentPolicy},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-SafeAttachmentRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-SafeLinksPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${AdminDisplayName},

    [bool]
    ${AllowClickThrough},

    [string]
    ${CustomNotificationText},

    [bool]
    ${DeliverMessageAfterScan},

    [bool]
    ${DisableUrlRewrite},

    ${DoNotRewriteUrls},

    [bool]
    ${EnableForInternalSenders},

    [bool]
    ${EnableOrganizationBranding},

    [bool]
    ${EnableSafeLinksForEmail},

    [bool]
    ${EnableSafeLinksForOffice},

    [bool]
    ${EnableSafeLinksForTeams},

    [switch]
    ${MakeBuiltInProtection},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    ${RecommendedPolicyType},

    [bool]
    ${ScanUrls},

    [bool]
    ${TrackClicks},

    [bool]
    ${UseTranslatedNotificationText}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-SafeLinksPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-SafeLinksRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [bool]
    ${Enabled},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [int]
    ${Priority},

    [System.Object[]]
    ${RecipientDomainIs},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${SafeLinksPolicy},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-SafeLinksRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-SchedulingMailbox
{
    [CmdletBinding(DefaultParameterSetName='Scheduling', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [ValidateNotNullOrEmpty()]
    [string]
    ${Alias},

    [Parameter(ParameterSetName='Scheduling')]
    [string]
    ${BookingServiceName},

    [Parameter(ParameterSetName='Scheduling')]
    [ValidateLength(0, 256)]
    [string]
    ${BusinessType},

    [Parameter(ParameterSetName='Scheduling')]
    [cultureinfo]
    ${Culture},

    [string]
    ${DisplayName},

    [bool]
    ${GenerateBookingServiceData},

    [Parameter(ParameterSetName='Scheduling', Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [string]
    ${NormalizedBusinessType},

    ${OrganizationalUnit},

    [Parameter(ParameterSetName='Scheduling', Mandatory=$true)]
    [ValidateNotNull()]
    ${Owner},

    ${PrimarySmtpAddress},

    [Parameter(ParameterSetName='Scheduling')]
    ${ReplyToAddress},

    [bool]
    ${SkipInitialServiceCreation},

    [Parameter(ParameterSetName='Scheduling')]
    ${TimeZone}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-SchedulingMailbox' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-SecOpsOverridePolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comment},

    ${DomainController},

    [bool]
    ${Enabled},

    [switch]
    ${Force},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [Parameter(ParameterSetName='Default', Mandatory=$true)]
    ${SentTo}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-SecOpsOverridePolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-ServicePrincipal
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${AppId},

    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='Default', Mandatory=$true)]
    [string]
    ${ObjectId},

    [Parameter(ParameterSetName='Deprecated', Mandatory=$true)]
    [string]
    ${ServiceId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-ServicePrincipal' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:New-SharingPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${Default},

    [Parameter(Mandatory=$true)]
    ${Domains},

    [bool]
    ${Enabled},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-SharingPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-SweepRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    ${DestinationFolder},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${Enabled},

    [Parameter(ParameterSetName='Identity')]
    ${KeepForDays},

    [Parameter(ParameterSetName='Identity')]
    ${KeepLatest},

    ${Mailbox},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0)]
    [string]
    ${Name},

    [Parameter(ParameterSetName='Identity', Mandatory=$true)]
    [string]
    ${Provider},

    [Parameter(ParameterSetName='Identity')]
    ${Sender},

    [Parameter(ParameterSetName='Identity')]
    ${SourceFolder},

    [Parameter(ParameterSetName='Identity')]
    ${SystemCategory}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-SweepRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:New-SyncMailPublicFolder
{
    [CmdletBinding(DefaultParameterSetName='SyncMailPublicFolder', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [System.Object[]]
    ${AcceptMessagesOnlyFrom},

    [Parameter(ParameterSetName='SyncMailPublicFolder', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Alias},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [System.Object[]]
    ${Contacts},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [string]
    ${CustomAttribute1},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [string]
    ${CustomAttribute10},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [string]
    ${CustomAttribute11},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [string]
    ${CustomAttribute12},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [string]
    ${CustomAttribute13},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [string]
    ${CustomAttribute14},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [string]
    ${CustomAttribute15},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [string]
    ${CustomAttribute2},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [string]
    ${CustomAttribute3},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [string]
    ${CustomAttribute4},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [string]
    ${CustomAttribute5},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [string]
    ${CustomAttribute6},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [string]
    ${CustomAttribute7},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [string]
    ${CustomAttribute8},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [string]
    ${CustomAttribute9},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [bool]
    ${DeliverToMailboxAndForward},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [System.Object[]]
    ${EmailAddresses},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${EntryId},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    ${ExternalEmailAddress},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    ${ForwardingAddress},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [System.Object[]]
    ${GrantSendOnBehalfTo},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [switch]
    ${HiddenFromAddressListsEnabled},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    ${MaxReceiveSize},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    ${MaxSendSize},

    [Parameter(ParameterSetName='SyncMailPublicFolder', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [guid]
    ${OnPremisesObjectId},

    [switch]
    ${OverrideRecipientQuotas},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [System.Object[]]
    ${RejectMessagesFrom},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    [bool]
    ${RequireSenderAuthenticationEnabled},

    [Parameter(ParameterSetName='SyncMailPublicFolder')]
    ${WindowsEmailAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-SyncMailPublicFolder' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-TeamsProtectionPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${HighConfidencePhishQuarantineTag},

    [string]
    ${MalwareQuarantineTag},

    [string]
    ${Name},

    [ValidateNotNullOrEmpty()]
    ${Organization},

    [bool]
    ${ZapEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-TeamsProtectionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-TeamsProtectionPolicyRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [bool]
    ${Enabled},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [string]
    ${Name},

    [ValidateNotNullOrEmpty()]
    ${Organization},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    ${TeamsProtectionPolicy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-TeamsProtectionPolicyRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-TenantAllowBlockListItems
{
    [CmdletBinding()]
    param(
    
    [switch]
    ${Allow},

    [switch]
    ${Block},

    [Parameter(Mandatory=$true)]
    [string[]]
    ${Entries},

    [Parameter(ParameterSetName='Expiration')]
    [datetime]
    ${ExpirationDate},

    ${ListSubType},

    [Parameter(Mandatory=$true)]
    ${ListType},

    [switch]
    ${LogExtraDetails},

    [Parameter(ParameterSetName='NoExpiration', Mandatory=$true)]
    [switch]
    ${NoExpiration},

    [string]
    ${Notes},

    [switch]
    ${OutputJson},

    [int]
    ${RemoveAfter},

    [string]
    ${SubmissionID}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'New-TenantAllowBlockListItems' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-TenantAllowBlockListSpoofItems
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${Action},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [string]
    ${SendingInfrastructure},

    [Parameter(Mandatory=$true)]
    [string]
    ${SpoofedUser},

    [Parameter(Mandatory=$true)]
    [string]
    ${SpoofType}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-TenantAllowBlockListSpoofItems' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-TenantExemptionInfo
{
    [CmdletBinding()]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${BlockingScenario},

    [string]
    ${Details},

    [int]
    ${NumberOfDays}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'New-TenantExemptionInfo' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-TenantExemptionQuota
{
    [CmdletBinding()]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${BlockingScenario}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'New-TenantExemptionQuota' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:New-TenantScanRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    ${Partition},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${SourceEndpoint}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'New-TenantScanRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:New-TransportRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${ActivationDate},

    ${AdComparisonAttribute},

    ${AdComparisonOperator},

    ${AddManagerAsRecipientType},

    [System.Object[]]
    ${AddToRecipients},

    [System.Object[]]
    ${AnyOfCcHeader},

    [System.Object[]]
    ${AnyOfCcHeaderMemberOf},

    [System.Object[]]
    ${AnyOfRecipientAddressContainsWords},

    [System.Object[]]
    ${AnyOfRecipientAddressMatchesPatterns},

    [System.Object[]]
    ${AnyOfToCcHeader},

    [System.Object[]]
    ${AnyOfToCcHeaderMemberOf},

    [System.Object[]]
    ${AnyOfToHeader},

    [System.Object[]]
    ${AnyOfToHeaderMemberOf},

    [string]
    ${ApplyClassification},

    ${ApplyHtmlDisclaimerFallbackAction},

    ${ApplyHtmlDisclaimerLocation},

    ${ApplyHtmlDisclaimerText},

    [bool]
    ${ApplyOME},

    ${ApplyRightsProtectionCustomizationTemplate},

    ${ApplyRightsProtectionTemplate},

    [System.Object[]]
    ${AttachmentContainsWords},

    [System.Object[]]
    ${AttachmentExtensionMatchesWords},

    [bool]
    ${AttachmentHasExecutableContent},

    [bool]
    ${AttachmentIsPasswordProtected},

    [bool]
    ${AttachmentIsUnsupported},

    [System.Object[]]
    ${AttachmentMatchesPatterns},

    [System.Object[]]
    ${AttachmentNameMatchesPatterns},

    [bool]
    ${AttachmentProcessingLimitExceeded},

    [System.Object[]]
    ${AttachmentPropertyContainsWords},

    ${AttachmentSizeOver},

    [System.Object[]]
    ${BetweenMemberOf1},

    [System.Object[]]
    ${BetweenMemberOf2},

    [System.Object[]]
    ${BlindCopyTo},

    [string]
    ${Comments},

    [System.Object[]]
    ${ContentCharacterSetContainsWords},

    [System.Object[]]
    ${CopyTo},

    [bool]
    ${DeleteMessage},

    [bool]
    ${Disconnect},

    [string]
    ${DlpPolicy},

    [bool]
    ${Enabled},

    ${ExceptIfAdComparisonAttribute},

    ${ExceptIfAdComparisonOperator},

    [System.Object[]]
    ${ExceptIfAnyOfCcHeader},

    [System.Object[]]
    ${ExceptIfAnyOfCcHeaderMemberOf},

    [System.Object[]]
    ${ExceptIfAnyOfRecipientAddressContainsWords},

    [System.Object[]]
    ${ExceptIfAnyOfRecipientAddressMatchesPatterns},

    [System.Object[]]
    ${ExceptIfAnyOfToCcHeader},

    [System.Object[]]
    ${ExceptIfAnyOfToCcHeaderMemberOf},

    [System.Object[]]
    ${ExceptIfAnyOfToHeader},

    [System.Object[]]
    ${ExceptIfAnyOfToHeaderMemberOf},

    [System.Object[]]
    ${ExceptIfAttachmentContainsWords},

    [System.Object[]]
    ${ExceptIfAttachmentExtensionMatchesWords},

    [bool]
    ${ExceptIfAttachmentHasExecutableContent},

    [bool]
    ${ExceptIfAttachmentIsPasswordProtected},

    [bool]
    ${ExceptIfAttachmentIsUnsupported},

    [System.Object[]]
    ${ExceptIfAttachmentMatchesPatterns},

    [System.Object[]]
    ${ExceptIfAttachmentNameMatchesPatterns},

    [bool]
    ${ExceptIfAttachmentProcessingLimitExceeded},

    [System.Object[]]
    ${ExceptIfAttachmentPropertyContainsWords},

    ${ExceptIfAttachmentSizeOver},

    [System.Object[]]
    ${ExceptIfBetweenMemberOf1},

    [System.Object[]]
    ${ExceptIfBetweenMemberOf2},

    [System.Object[]]
    ${ExceptIfContentCharacterSetContainsWords},

    [System.Object[]]
    ${ExceptIfFrom},

    [System.Object[]]
    ${ExceptIfFromAddressContainsWords},

    [System.Object[]]
    ${ExceptIfFromAddressMatchesPatterns},

    [System.Object[]]
    ${ExceptIfFromMemberOf},

    ${ExceptIfFromScope},

    [string]
    ${ExceptIfHasClassification},

    [bool]
    ${ExceptIfHasNoClassification},

    [bool]
    ${ExceptIfHasSenderOverride},

    ${ExceptIfHeaderContainsMessageHeader},

    [System.Object[]]
    ${ExceptIfHeaderContainsWords},

    ${ExceptIfHeaderMatchesMessageHeader},

    [System.Object[]]
    ${ExceptIfHeaderMatchesPatterns},

    [System.Object[]]
    ${ExceptIfManagerAddresses},

    ${ExceptIfManagerForEvaluatedUser},

    [hashtable[]]
    ${ExceptIfMessageContainsDataClassifications},

    ${ExceptIfMessageSizeOver},

    ${ExceptIfMessageTypeMatches},

    [System.Object[]]
    ${ExceptIfRecipientADAttributeContainsWords},

    [System.Object[]]
    ${ExceptIfRecipientADAttributeMatchesPatterns},

    [System.Object[]]
    ${ExceptIfRecipientAddressContainsWords},

    [System.Object[]]
    ${ExceptIfRecipientAddressMatchesPatterns},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfRecipientInSenderList},

    ${ExceptIfSCLOver},

    [System.Object[]]
    ${ExceptIfSenderADAttributeContainsWords},

    [System.Object[]]
    ${ExceptIfSenderADAttributeMatchesPatterns},

    [System.Object[]]
    ${ExceptIfSenderDomainIs},

    [System.Object[]]
    ${ExceptIfSenderInRecipientList},

    ${ExceptIfSenderIpRanges},

    ${ExceptIfSenderManagementRelationship},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    ${ExceptIfSentToScope},

    [System.Object[]]
    ${ExceptIfSubjectContainsWords},

    [System.Object[]]
    ${ExceptIfSubjectMatchesPatterns},

    [System.Object[]]
    ${ExceptIfSubjectOrBodyContainsWords},

    [System.Object[]]
    ${ExceptIfSubjectOrBodyMatchesPatterns},

    ${ExceptIfWithImportance},

    ${ExpiryDate},

    [System.Object[]]
    ${From},

    [System.Object[]]
    ${FromAddressContainsWords},

    [System.Object[]]
    ${FromAddressMatchesPatterns},

    [System.Object[]]
    ${FromMemberOf},

    ${FromScope},

    ${GenerateIncidentReport},

    ${GenerateNotification},

    [string]
    ${HasClassification},

    [bool]
    ${HasNoClassification},

    [bool]
    ${HasSenderOverride},

    ${HeaderContainsMessageHeader},

    [System.Object[]]
    ${HeaderContainsWords},

    ${HeaderMatchesMessageHeader},

    [System.Object[]]
    ${HeaderMatchesPatterns},

    [System.Object[]]
    ${IncidentReportContent},

    ${LogEventText},

    [System.Object[]]
    ${ManagerAddresses},

    ${ManagerForEvaluatedUser},

    [hashtable[]]
    ${MessageContainsDataClassifications},

    ${MessageSizeOver},

    ${MessageTypeMatches},

    ${Mode},

    [bool]
    ${ModerateMessageByManager},

    [System.Object[]]
    ${ModerateMessageByUser},

    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Name},

    ${NotifySender},

    ${PrependSubject},

    [int]
    ${Priority},

    [bool]
    ${Quarantine},

    [System.Object[]]
    ${RecipientADAttributeContainsWords},

    [System.Object[]]
    ${RecipientADAttributeMatchesPatterns},

    [System.Object[]]
    ${RecipientAddressContainsWords},

    [System.Object[]]
    ${RecipientAddressMatchesPatterns},

    ${RecipientAddressType},

    [System.Object[]]
    ${RecipientDomainIs},

    [System.Object[]]
    ${RecipientInSenderList},

    [System.Object[]]
    ${RedirectMessageTo},

    ${RejectMessageEnhancedStatusCode},

    ${RejectMessageReasonText},

    ${RemoveHeader},

    [bool]
    ${RemoveOME},

    [bool]
    ${RemoveOMEv2},

    [bool]
    ${RemoveRMSAttachmentEncryption},

    ${RouteMessageOutboundConnector},

    [bool]
    ${RouteMessageOutboundRequireTls},

    ${RuleErrorAction},

    ${RuleSubType},

    ${SCLOver},

    [System.Object[]]
    ${SenderADAttributeContainsWords},

    [System.Object[]]
    ${SenderADAttributeMatchesPatterns},

    ${SenderAddressLocation},

    [System.Object[]]
    ${SenderDomainIs},

    [System.Object[]]
    ${SenderInRecipientList},

    ${SenderIpRanges},

    ${SenderManagementRelationship},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf},

    ${SentToScope},

    [string]
    ${SetAuditSeverity},

    ${SetHeaderName},

    ${SetHeaderValue},

    ${SetSCL},

    ${SmtpRejectMessageRejectStatusCode},

    ${SmtpRejectMessageRejectText},

    [bool]
    ${StopRuleProcessing},

    [System.Object[]]
    ${SubjectContainsWords},

    [System.Object[]]
    ${SubjectMatchesPatterns},

    [System.Object[]]
    ${SubjectOrBodyContainsWords},

    [System.Object[]]
    ${SubjectOrBodyMatchesPatterns},

    [bool]
    ${UseLegacyRegex},

    ${WithImportance}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-TransportRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:New-UnifiedGroup
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    ${AccessType},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Alias},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    [switch]
    ${AlwaysSubscribeMembersToCalendarEvents},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    [switch]
    ${AutoSubscribeNewMembers},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    [string]
    ${Classification},

    [Parameter(ParameterSetName='DlMigration')]
    [switch]
    ${ConvertClosedDlToPrivateGroup},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    ${DataEncryptionPolicy},

    [Parameter(ParameterSetName='DlMigration')]
    [switch]
    ${DeleteDlAfterMigration},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='DlMigration', Mandatory=$true)]
    ${DlIdentity},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    ${EmailAddresses},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    [Parameter(ParameterSetName='DlMigration')]
    [ValidateNotNullOrEmpty()]
    ${ExecutingUser},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    [switch]
    ${ExoErrorAsWarning},

    [switch]
    ${HiddenGroupMembershipEnabled},

    [Parameter(ParameterSetName='Identity')]
    ${IsMemberAllowedToEditContent},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    [cultureinfo]
    ${Language},

    [Parameter(ParameterSetName='Identity')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${MailboxRegion},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${ManagedBy},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${Members},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions', Position=0)]
    [Parameter(ParameterSetName='SegmentationOption', Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    [string]
    ${Notes},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    [Parameter(ParameterSetName='DlMigration')]
    [ValidateNotNullOrEmpty()]
    ${Owner},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    ${PrimarySmtpAddress},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    [bool]
    ${RequireSenderAuthenticationEnabled},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    ${SensitivityLabelId},

    [Parameter(ParameterSetName='SegmentationOption')]
    [switch]
    ${SubscriptionEnabled},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='ProvisioningOptions')]
    [Parameter(ParameterSetName='SegmentationOption')]
    [switch]
    ${SuppressWarmupMessage}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'New-UnifiedGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Preview-QuarantineMessage
{
    [CmdletBinding()]
    param(
    
    ${EntityType},

    [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNullOrEmpty()]
    ${Identity},

    [ValidateLength(1, 320)]
    [string]
    ${RecipientAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Preview-QuarantineMessage' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Release-QuarantineMessage
{
    [CmdletBinding(DefaultParameterSetName='IdentityOnly', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${ActionType},

    [switch]
    ${AllowSender},

    ${EntityType},

    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identitities', Mandatory=$true)]
    [Parameter(ParameterSetName='OrgReleaseToAll')]
    [Parameter(ParameterSetName='OrgReleaseToUser')]
    [System.Object[]]
    ${Identities},

    [Parameter(ParameterSetName='IdentityOnly', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Identitities', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='OrgReleaseToAll', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='OrgReleaseToUser', ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='OrgReleaseToAll', Mandatory=$true)]
    [Parameter(ParameterSetName='OceReleaseToAll', Mandatory=$true)]
    [switch]
    ${ReleaseToAll},

    [switch]
    ${ReportFalsePositive},

    [Parameter(ParameterSetName='OrgReleaseToUser', Mandatory=$true)]
    [Parameter(ParameterSetName='OceReleaseToUser', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${User}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Release-QuarantineMessage' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Remove-ActiveSyncDevice
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-ActiveSyncDevice' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Remove-ActiveSyncDeviceAccessRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-ActiveSyncDeviceAccessRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Remove-ActiveSyncMailboxPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'remove-ActiveSyncMailboxPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-AntiPhishPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-AntiPhishPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-AntiPhishRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-AntiPhishRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Remove-App
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [string]
    ${AppType},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Mailbox},

    [switch]
    ${OrganizationApp},

    [switch]
    ${PrivateCatalog}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-App' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Remove-ApplicationAccessPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-ApplicationAccessPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-ATPProtectionPolicyRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-ATPProtectionPolicyRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-AuditConfigurationPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-AuditConfigurationPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-AuditConfigurationRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-AuditConfigurationRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-AuditStubFolder
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${FolderName}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-AuditStubFolder' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-AuthenticationPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${AllowLegacyExchangeTokens},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string]
    ${TenantId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-AuthenticationPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Remove-AvailabilityAddressSpace
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-AvailabilityAddressSpace' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Remove-AvailabilityConfig
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-AvailabilityConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-BlockedConnector
{
    [CmdletBinding()]
    param(
    
    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [guid]
    ${ConnectorId},

    [string]
    ${Reason}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Remove-BlockedConnector' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-BlockedSenderAddress
{
    [CmdletBinding()]
    param(
    
    [string]
    ${Reason},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${SenderAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Remove-BlockedSenderAddress' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-BookingMailbox
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(Mandatory=$true)]
    ${AccessingUser},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Remove-BookingMailbox' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Remove-CalendarEvents
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${CancelOrganizedMeetings},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${PreviewOnly},

    ${QueryStartDate},

    [Parameter(Mandatory=$true)]
    [int]
    ${QueryWindowInDays},

    [switch]
    ${UseCustomRouting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$false -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-CalendarEvents' -Parameters $PSBoundParameters -ParameterBasedRoutingHintDelegate Get-MailboxIDBasedRoutingHint -ParameterBasedRoutingHintParameterValue $Identity -UseParameterBasedRouting (Should-UseCustomRoutingHint $UseCustomRouting.IsPresent) -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Remove-ClassificationRuleCollection
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-ClassificationRuleCollection' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-CompliancePolicyFileSyncNotification
{
    [CmdletBinding()]
    param(
    
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Remove-CompliancePolicyFileSyncNotification' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-CompliancePolicySyncNotification
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Remove-CompliancePolicySyncNotification' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Remove-DataClassification
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-DataClassification' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Remove-DistributionGroup
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-DistributionGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Remove-DistributionGroupMember
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ValueFromPipeline=$true)]
    [ValidateNotNull()]
    ${Member}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-DistributionGroupMember' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-DlpPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-DlpPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Remove-DynamicDistributionGroup
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-DynamicDistributionGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-ElevatedAccessApprovalPolicy
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [Parameter(ParameterSetName='Default', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Remove-ElevatedAccessApprovalPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-EmailAddressPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-EmailAddressPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-EOPProtectionPolicyRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-EOPProtectionPolicyRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-ExoInformationBarriersV1Configuration
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${Organization}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Remove-ExoInformationBarriersV1Configuration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-ExoPhishSimOverrideRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-ExoPhishSimOverrideRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-ExoSecOpsOverrideRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-ExoSecOpsOverrideRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-HostedConnectionFilterPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-HostedConnectionFilterPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-HostedContentFilterPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-HostedContentFilterPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-HostedContentFilterRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-HostedContentFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-HostedOutboundSpamFilterPolicy
{
    [CmdletBinding()]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Remove-HostedOutboundSpamFilterPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-HostedOutboundSpamFilterRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-HostedOutboundSpamFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-HybridConfiguration
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-HybridConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-InboundConnector
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-InboundConnector' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-InboxRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Mailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-InboxRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Remove-IntraOrganizationConnector
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-IntraOrganizationConnector' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailControl-Help.xml
function script:Remove-JournalRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'remove-journalrule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Remove-M365CrossTenantAccessPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='PolicyObject')]
    [switch]
    ${BypassMigrationScenario},

    [Parameter(Mandatory=$true)]
    [string]
    ${ObjectId},

    [Parameter(ParameterSetName='PartnerPolicyObject')]
    [Parameter(ParameterSetName='M365PartnerPolicyObject', Mandatory=$true)]
    [string]
    ${PartnerIdentifier},

    [Parameter(ParameterSetName='M365PolicyObject', Mandatory=$true)]
    [Parameter(ParameterSetName='M365PartnerPolicyObject', Mandatory=$true)]
    ${PolicyType},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='PartnerPolicyObject')]
    [switch]
    ${RemoveAuthorizationPolicy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-M365CrossTenantAccessPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-Mailbox
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${Migration},

    [switch]
    ${PermanentlyDelete},

    [switch]
    ${PublicFolder},

    [switch]
    ${RemoveCNFPublicFolderMailboxPermanently}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-Mailbox' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Remove-MailboxAnalysisRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-MailboxAnalysisRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Remove-MailboxFolderPermission
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ResetDelegateUserCollection', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='ResetDelegateUserCollection', Mandatory=$true)]
    [switch]
    ${ResetDelegateUserCollection},

    [bool]
    ${SendNotificationToUser},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${User}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-MailboxFolderPermission' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Remove-MailboxIRMAccess
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${User}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Remove-MailboxIRMAccess' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-MailboxLocation
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${Force}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-MailboxLocation' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-MailboxPermission
{
    [CmdletBinding(DefaultParameterSetName='AccessRights', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Instance')]
    [Parameter(ParameterSetName='AccessRights', Mandatory=$true)]
    [System.Object[]]
    ${AccessRights},

    [Parameter(ParameterSetName='AccessRights')]
    [Parameter(ParameterSetName='Owner')]
    [Parameter(ParameterSetName='ClearAutoMapping')]
    [switch]
    ${BypassMasterAccountSid},

    [Parameter(ParameterSetName='ClearAutoMapping', Mandatory=$true)]
    [switch]
    ${ClearAutoMapping},

    [Parameter(ParameterSetName='Instance')]
    [Parameter(ParameterSetName='AccessRights')]
    [switch]
    ${Deny},

    [Parameter(ParameterSetName='AccessRights')]
    [Parameter(ParameterSetName='Instance')]
    [Parameter(ParameterSetName='Owner')]
    [switch]
    ${GroupMailbox},

    [Parameter(ParameterSetName='Instance', Position=0)]
    [Parameter(ParameterSetName='AccessRights', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Owner', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ResetDefault', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ClearAutoMapping', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Parameter(ParameterSetName='Instance')]
    [Parameter(ParameterSetName='AccessRights')]
    [System.DirectoryServices.ActiveDirectorySecurityInheritance]
    ${InheritanceType},

    [Parameter(ParameterSetName='ResetDefault', Mandatory=$true)]
    [switch]
    ${ResetDefault},

    [Parameter(ParameterSetName='AccessRights')]
    [switch]
    ${SoftDeletedMailbox},

    [Parameter(ParameterSetName='Instance')]
    [Parameter(ParameterSetName='AccessRights', Mandatory=$true)]
    ${User}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-MailboxPermission' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Remove-MailboxRestoreRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-MailboxRestoreRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Remove-MailboxSearch
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-MailboxSearch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-MailboxUserConfiguration
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(Mandatory=$true)]
    ${Mailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-MailboxUserConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-MailContact
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-MailContact' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-MailUser
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${PermanentlyDelete}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-MailUser' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-MalwareFilterPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-MalwareFilterPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-MalwareFilterRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-MalwareFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-ManagementRole
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${Recurse}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-ManagementRole' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-ManagementRoleAssignment
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-ManagementRoleAssignment' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-ManagementRoleEntry
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-ManagementRoleEntry' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-ManagementScope
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-ManagementScope' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Remove-MessageClassification
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'remove-MessageClassification' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Remove-MigrationBatch
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Partition}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-MigrationBatch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Remove-MigrationEndpoint
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Partition}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-MigrationEndpoint' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Remove-MigrationUser
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Partition}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-MigrationUser' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Remove-MobileDevice
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-MobileDevice' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Remove-MobileDeviceMailboxPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'remove-MobileDeviceMailboxPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Remove-MoveRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${ProxyToMailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-MoveRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-OnPremisesOrganization
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-OnPremisesOrganization' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Remove-OrganizationRelationship
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-OrganizationRelationship' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-OutboundConnector
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-OutboundConnector' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Remove-OutlookProtectionRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-OutlookProtectionRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Remove-OwaMailboxPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-OwaMailboxPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-PartnerApplication
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-PartnerApplication' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-PhishSimOverridePolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    ${DomainController},

    [switch]
    ${ForceDeletion},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-PhishSimOverridePolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-PolicyTipConfig
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-PolicyTipConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Remove-PublicFolder
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNull()]
    ${Mailbox},

    [switch]
    ${Recurse}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-PublicFolder' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Remove-PublicFolderClientPermission
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${User}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-PublicFolderClientPermission' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Remove-PublicFolderMailboxMigrationRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [ValidateNotNull()]
    ${DomainController},

    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-PublicFolderMailboxMigrationRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Remove-PublicFolderMoveRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [ValidateNotNull()]
    ${DomainController},

    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='MigrationRequestQueue', Mandatory=$true)]
    [guid]
    ${RequestGuid},

    [Parameter(ParameterSetName='MigrationRequestQueue', Mandatory=$true)]
    [ValidateNotNull()]
    ${RequestQueue}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-PublicFolderMoveRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-QuarantinePolicy
{
    [CmdletBinding()]
    param(
    
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Remove-QuarantinePolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Remove-RecipientPermission
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${AccessRights},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [switch]
    ${Deny},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [switch]
    ${SkipDomainValidationForMailContact},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [switch]
    ${SkipDomainValidationForMailUser},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [switch]
    ${SkipDomainValidationForSharedMailbox},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Trustee}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-RecipientPermission' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Remove-RemoteDomain
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-RemoteDomain' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Remove-ReportSchedule
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [switch]
    ${IncludeDLP},

    [Parameter(ParameterSetName='ScheduledId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${ScheduleId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Remove-ReportSchedule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-ReportSubmissionPolicy
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Remove-ReportSubmissionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-ReportSubmissionRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-ReportSubmissionRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Remove-RetentionPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'remove-RetentionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Remove-RetentionPolicyTag
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-RetentionPolicyTag' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-RoleAssignmentPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-RoleAssignmentPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-RoleGroup
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${BypassSecurityGroupManagerCheck},

    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-RoleGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-RoleGroupMember
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    ${Member}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-RoleGroupMember' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-SafeAttachmentPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-SafeAttachmentPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-SafeAttachmentRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-SafeAttachmentRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-SafeLinksPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-SafeLinksPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-SafeLinksRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-SafeLinksRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-SecOpsOverridePolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    ${DomainController},

    [switch]
    ${ForceDeletion},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-SecOpsOverridePolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-ServicePrincipal
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-ServicePrincipal' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Remove-SharingPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-SharingPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-SweepRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Mailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-SweepRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Remove-SyncMailPublicFolder
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-SyncMailPublicFolder' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Remove-SyncRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-SyncRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-TenantAllowBlockListItems
{
    [CmdletBinding()]
    param(
    
    [Parameter(ParameterSetName='Entries', Mandatory=$true)]
    [string[]]
    ${Entries},

    [Parameter(ParameterSetName='Ids', Mandatory=$true)]
    [string[]]
    ${Ids},

    ${ListSubType},

    [Parameter(Mandatory=$true)]
    ${ListType},

    [switch]
    ${OutputJson}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Remove-TenantAllowBlockListItems' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-TenantAllowBlockListSpoofItems
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${Ids}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-TenantAllowBlockListSpoofItems' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Remove-TenantScanRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    ${Identity},

    ${Partition}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Remove-TenantScanRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Remove-TransportRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-TransportRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-UnifiedGroup
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-UnifiedGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Remove-UnifiedGroupLinks
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [System.Object[]]
    ${Links},

    [Parameter(Mandatory=$true)]
    ${LinkType}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Remove-UnifiedGroupLinks' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Reset-EventsFromEmailBlockStatus
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Reset-EventsFromEmailBlockStatus' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Resume-MailboxAnalysisRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Resume-MailboxAnalysisRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Resume-MailboxRestoreRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Resume-MailboxRestoreRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Resume-MoveRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${ProxyToMailbox},

    [switch]
    ${SuspendWhenReadyToComplete}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Resume-MoveRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Resume-PublicFolderMailboxMigrationRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Resume-PublicFolderMailboxMigrationRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Resume-SyncRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Resume-SyncRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Resume-TenantScanRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${Identity},

    ${Partition}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Resume-TenantScanRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Revoke-ElevatedAccessAuthorization
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [Parameter(ParameterSetName='Default', Mandatory=$true)]
    [string]
    ${Comment},

    [Parameter(ParameterSetName='Default', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RequestId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Revoke-ElevatedAccessAuthorization' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Rotate-DkimSigningConfig
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateSet('1024','2048')]
    [ushort]
    ${KeySize}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Rotate-DkimSigningConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Search-AdminAuditLog
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Cmdlets},

    [Parameter(ParameterSetName='Identity')]
    ${EndDate},

    [Parameter(ParameterSetName='Identity')]
    ${ExternalAccess},

    [Parameter(ParameterSetName='Identity')]
    ${IsSuccess},

    [Parameter(ParameterSetName='Identity')]
    ${ObjectIds},

    [Parameter(ParameterSetName='Identity')]
    ${Parameters},

    [Parameter(ParameterSetName='Identity')]
    [ValidateRange(1, 250000)]
    [int]
    ${ResultSize},

    [Parameter(ParameterSetName='Identity')]
    ${StartDate},

    [Parameter(ParameterSetName='Identity')]
    [int]
    ${StartIndex},

    [Parameter(ParameterSetName='Identity')]
    ${UserIds}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Search-AdminAuditLog' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Search-MailboxAuditLog
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='MultipleMailboxesSearch')]
    ${EndDate},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='MultipleMailboxesSearch')]
    ${ExternalAccess},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='MultipleMailboxesSearch')]
    [switch]
    ${GroupMailbox},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='MultipleMailboxesSearch')]
    ${HasAttachments},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='MultipleMailboxesSearch')]
    [switch]
    ${IncludeInactiveMailbox},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='MultipleMailboxesSearch')]
    ${LogonTypes},

    [Parameter(ParameterSetName='MultipleMailboxesSearch')]
    ${Mailboxes},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='MultipleMailboxesSearch')]
    ${Operations},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='MultipleMailboxesSearch')]
    [ValidateRange(1, 250000)]
    [int]
    ${ResultSize},

    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${ShowDetails},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='MultipleMailboxesSearch')]
    ${StartDate}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Search-MailboxAuditLog' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Search-MessageTrackingReport
{
    [CmdletBinding(DefaultParameterSetName='ParamSetSearchAsSender', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='ParamSetSearchAsSender')]
    [Parameter(ParameterSetName='ParamSetSearchAsRecip')]
    [switch]
    ${BypassDelegateChecking},

    [Parameter(ParameterSetName='ParamSetSearchAsSender')]
    [Parameter(ParameterSetName='ParamSetSearchAsRecip')]
    [switch]
    ${DoNotResolve},

    [Parameter(ParameterSetName='ParamSetSearchAsSender', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ParamSetSearchAsRecip', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='ParamSetSearchAsSender')]
    [Parameter(ParameterSetName='ParamSetSearchAsRecip')]
    [string]
    ${MessageEntryId},

    [Parameter(ParameterSetName='ParamSetSearchAsSender')]
    [Parameter(ParameterSetName='ParamSetSearchAsRecip')]
    [string]
    ${MessageId},

    [Parameter(ParameterSetName='ParamSetSearchAsSender')]
    [ValidateNotNullOrEmpty()]
    [System.Object[]]
    ${Recipients},

    [Parameter(ParameterSetName='ParamSetSearchAsSender')]
    [Parameter(ParameterSetName='ParamSetSearchAsRecip')]
    ${ResultSize},

    [Parameter(ParameterSetName='ParamSetSearchAsRecip', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${Sender},

    [Parameter(ParameterSetName='ParamSetSearchAsSender')]
    [Parameter(ParameterSetName='ParamSetSearchAsRecip')]
    [string]
    ${Subject}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Search-MessageTrackingReport' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Search-UnifiedAuditLog
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true)]
    ${EndDate},

    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${Formatted},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${FreeText},

    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${HighCompleteness},

    [Parameter(ParameterSetName='Identity')]
    [string[]]
    ${IPAddresses},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${LongerRetentionEnabled},

    [Parameter(ParameterSetName='Identity')]
    [string[]]
    ${ObjectIds},

    [Parameter(ParameterSetName='Identity')]
    [string[]]
    ${Operations},

    [Parameter(ParameterSetName='Identity')]
    ${RecordType},

    [Parameter(ParameterSetName='Identity')]
    [ValidateRange(1, 5000)]
    [int]
    ${ResultSize},

    [Parameter(ParameterSetName='Identity')]
    ${SessionCommand},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${SessionId},

    [Parameter(ParameterSetName='Identity')]
    [string[]]
    ${SiteIds},

    [Parameter(ParameterSetName='Identity', Mandatory=$true)]
    ${StartDate},

    [Parameter(ParameterSetName='Identity')]
    [string[]]
    ${UserIds}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Search-UnifiedAuditLog' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Set-AcceptedDomain
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${CanHaveCloudCache},

    ${DomainType},

    [bool]
    ${EnableNego2Authentication},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${MatchSubDomains},

    [bool]
    ${OutboundOnly},

    [bool]
    ${SendingFromDomainDisabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-AcceptedDomain' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-AccessToCustomerDataRequest
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [Parameter(ParameterSetName='Default', Mandatory=$true)]
    ${ApprovalDecision},

    [Parameter(ParameterSetName='Default')]
    [string]
    ${Comment},

    [Parameter(ParameterSetName='Default', Mandatory=$true)]
    [Alias('Identity')]
    [string]
    ${RequestId},

    [Parameter(ParameterSetName='Default')]
    ${ServiceName}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Set-AccessToCustomerDataRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Set-ActiveSyncDeviceAccessRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AccessLevel},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ActiveSyncDeviceAccessRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Set-ActiveSyncMailboxPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${AllowApplePushNotifications},

    ${AllowBluetooth},

    [bool]
    ${AllowBrowser},

    [bool]
    ${AllowCamera},

    [bool]
    ${AllowConsumerEmail},

    [bool]
    ${AllowDesktopSync},

    [bool]
    ${AllowExternalDeviceManagement},

    [bool]
    ${AllowHTMLEmail},

    [bool]
    ${AllowInternetSharing},

    [bool]
    ${AllowIrDA},

    [bool]
    ${AllowMobileOTAUpdate},

    [bool]
    ${AllowNonProvisionableDevices},

    [bool]
    ${AllowPOPIMAPEmail},

    [bool]
    ${AllowRemoteDesktop},

    [bool]
    ${AllowSimpleDevicePassword},

    ${AllowSMIMEEncryptionAlgorithmNegotiation},

    [bool]
    ${AllowSMIMESoftCerts},

    [bool]
    ${AllowStorageCard},

    [bool]
    ${AllowTextMessaging},

    [bool]
    ${AllowUnsignedApplications},

    [bool]
    ${AllowUnsignedInstallationPackages},

    [bool]
    ${AllowWiFi},

    [bool]
    ${AlphanumericDevicePasswordRequired},

    ${ApprovedApplicationList},

    [bool]
    ${AttachmentsEnabled},

    [bool]
    ${DeviceEncryptionEnabled},

    [bool]
    ${DevicePasswordEnabled},

    ${DevicePasswordExpiration},

    [int]
    ${DevicePasswordHistory},

    ${DevicePolicyRefreshInterval},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${IrmEnabled},

    [bool]
    ${IsDefault},

    [bool]
    ${IsDefaultPolicy},

    ${MaxAttachmentSize},

    ${MaxCalendarAgeFilter},

    ${MaxDevicePasswordFailedAttempts},

    ${MaxEmailAgeFilter},

    ${MaxEmailBodyTruncationSize},

    ${MaxEmailHTMLBodyTruncationSize},

    ${MaxInactivityTimeDeviceLock},

    [int]
    ${MinDevicePasswordComplexCharacters},

    ${MinDevicePasswordLength},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [bool]
    ${PasswordRecoveryEnabled},

    [bool]
    ${RequireDeviceEncryption},

    [bool]
    ${RequireEncryptedSMIMEMessages},

    ${RequireEncryptionSMIMEAlgorithm},

    [bool]
    ${RequireManualSyncWhenRoaming},

    ${RequireSignedSMIMEAlgorithm},

    [bool]
    ${RequireSignedSMIMEMessages},

    [bool]
    ${RequireStorageCardEncryption},

    ${UnapprovedInROMApplicationList},

    [bool]
    ${UNCAccessEnabled},

    [bool]
    ${WSSAccessEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'set-ActiveSyncMailboxPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Set-ActiveSyncOrganizationSettings
{
    [CmdletBinding(DefaultParameterSetName='Default', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AdminMailRecipients},

    [bool]
    ${AllowAccessForUnSupportedPlatform},

    [bool]
    ${AllowRMSSupportForUnenlightenedApps},

    ${DefaultAccessLevel},

    [bool]
    ${EnableMobileMailboxPolicyWhenCAInplace},

    [Parameter(ParameterSetName='Default', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ParameterSetAddDeviceFilterRule', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ParameterSetAddDeviceFilterRuleForAllDevices', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ParameterSetRemoveDeviceFilterRule', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ParameterSetRemoveDeviceFilter', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string]
    ${OtaNotificationMailInsert},

    ${TenantAdminPreference},

    [string]
    ${UserMailInsert}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ActiveSyncOrganizationSettings' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Set-AdminAuditLogConfig
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${Force},

    [bool]
    ${UnifiedAuditLogIngestionEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-AdminAuditLogConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-AntiPhishPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${AdminDisplayName},

    ${AuthenticationFailAction},

    ${DmarcQuarantineAction},

    ${DmarcRejectAction},

    [bool]
    ${Enabled},

    [bool]
    ${EnableFirstContactSafetyTips},

    [bool]
    ${EnableMailboxIntelligence},

    [bool]
    ${EnableMailboxIntelligenceProtection},

    [bool]
    ${EnableOrganizationDomainsProtection},

    [bool]
    ${EnableSimilarDomainsSafetyTips},

    [bool]
    ${EnableSimilarUsersSafetyTips},

    [bool]
    ${EnableSpoofIntelligence},

    [bool]
    ${EnableTargetedDomainsProtection},

    [bool]
    ${EnableTargetedUserProtection},

    [bool]
    ${EnableUnauthenticatedSender},

    [bool]
    ${EnableUnusualCharactersSafetyTips},

    [bool]
    ${EnableViaTag},

    ${ExcludedDomains},

    ${ExcludedSenders},

    [bool]
    ${HonorDmarcPolicy},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${ImpersonationProtectionState},

    ${MailboxIntelligenceProtectionAction},

    ${MailboxIntelligenceProtectionActionRecipients},

    [string]
    ${MailboxIntelligenceQuarantineTag},

    [switch]
    ${MakeDefault},

    [int]
    ${PhishThresholdLevel},

    [string]
    ${PolicyTag},

    [string]
    ${SpoofQuarantineTag},

    ${TargetedDomainActionRecipients},

    ${TargetedDomainProtectionAction},

    [string]
    ${TargetedDomainQuarantineTag},

    ${TargetedDomainsToProtect},

    ${TargetedUserActionRecipients},

    ${TargetedUserProtectionAction},

    [string]
    ${TargetedUserQuarantineTag},

    ${TargetedUsersToProtect}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-AntiPhishPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-AntiPhishRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AntiPhishPolicy},

    [string]
    ${Comments},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [int]
    ${Priority},

    [System.Object[]]
    ${RecipientDomainIs},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-AntiPhishRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Set-App
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${DefaultStateForUser},

    [bool]
    ${Enabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${OrganizationApp},

    [switch]
    ${PrivateCatalog},

    ${ProvidedTo},

    ${UserList}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-App' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Set-ApplicationAccessPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${Description},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ApplicationAccessPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-ArcConfig
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [string[]]
    ${ArcTrustedSealers},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ArcConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-ATPBuiltInProtectionRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ATPBuiltInProtectionRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-ATPEvaluationRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AntiPhishPolicy},

    [string]
    ${Comments},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [System.Object[]]
    ${RecipientDomainIs},

    ${SafeAttachmentPolicy},

    ${SafeLinksPolicy},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf},

    [bool]
    ${ShareWithMicrosoft}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ATPEvaluationRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-AtpPolicyForO365
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${AllowSafeDocsOpen},

    [bool]
    ${EnableATPForSPOTeamsODB},

    [bool]
    ${EnableSafeDocs},

    [Parameter(Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-AtpPolicyForO365' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-ATPProtectionPolicyRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [int]
    ${Priority},

    [System.Object[]]
    ${RecipientDomainIs},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ATPProtectionPolicyRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-AuthenticationPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${AllowBasicAuthActiveSync},

    [switch]
    ${AllowBasicAuthAutodiscover},

    [switch]
    ${AllowBasicAuthImap},

    [switch]
    ${AllowBasicAuthMapi},

    [switch]
    ${AllowBasicAuthOfflineAddressBook},

    [switch]
    ${AllowBasicAuthOutlookService},

    [switch]
    ${AllowBasicAuthPop},

    [switch]
    ${AllowBasicAuthPowershell},

    [switch]
    ${AllowBasicAuthReportingWebServices},

    [switch]
    ${AllowBasicAuthRpc},

    [switch]
    ${AllowBasicAuthSmtp},

    [switch]
    ${AllowBasicAuthWebServices},

    [switch]
    ${AllowLegacyExchangeTokens},

    [switch]
    ${BlockLegacyExchangeTokens},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string]
    ${TenantId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-AuthenticationPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Set-AvailabilityConfig
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AllowedTenantIds},

    ${OrgWideAccount}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-AvailabilityConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-BookingMailboxPermission
{
    [CmdletBinding(DefaultParameterSetName='MailboxPermission')]
    param(
    
    [Parameter(ParameterSetName='MailboxPermission', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='MailboxPermission')]
    [string]
    ${Permission},

    [Parameter(ParameterSetName='MailboxPermission')]
    [string]
    ${StaffMember}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Set-BookingMailboxPermission' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Set-CalendarProcessing
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${AddAdditionalResponse},

    [string]
    ${AdditionalResponse},

    [bool]
    ${AddNewRequestsTentatively},

    [bool]
    ${AddOrganizerToSubject},

    [bool]
    ${AllBookInPolicy},

    [bool]
    ${AllowConflicts},

    [bool]
    ${AllowRecurringMeetings},

    [bool]
    ${AllRequestInPolicy},

    [bool]
    ${AllRequestOutOfPolicy},

    ${AutomateProcessing},

    ${BookingType},

    [int]
    ${BookingWindowInDays},

    [System.Object[]]
    ${BookInPolicy},

    [int]
    ${ConflictPercentageAllowed},

    [bool]
    ${DeleteAttachments},

    [bool]
    ${DeleteComments},

    [bool]
    ${DeleteNonCalendarItems},

    [bool]
    ${DeleteSubject},

    [bool]
    ${EnableAutoRelease},

    [bool]
    ${EnableResponseDetails},

    [bool]
    ${EnforceCapacity},

    [bool]
    ${EnforceSchedulingHorizon},

    [bool]
    ${ForwardRequestsToDelegates},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [int]
    ${MaximumConflictInstances},

    [int]
    ${MaximumDurationInMinutes},

    [int]
    ${MinimumDurationInMinutes},

    [bool]
    ${OrganizerInfo},

    [int]
    ${PostReservationMaxClaimTimeInMinutes},

    [bool]
    ${ProcessExternalMeetingMessages},

    [bool]
    ${RemoveCanceledMeetings},

    [bool]
    ${RemoveForwardedMeetingNotifications},

    [bool]
    ${RemoveOldMeetingMessages},

    [bool]
    ${RemovePrivateProperty},

    [System.Object[]]
    ${RequestInPolicy},

    [System.Object[]]
    ${RequestOutOfPolicy},

    [System.Object[]]
    ${ResourceDelegates},

    [bool]
    ${ScheduleOnlyDuringWorkHours},

    [bool]
    ${TentativePendingApproval}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-CalendarProcessing' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Set-CalendarSettings
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    ${EnablePreserveDeclinedMeetings},

    [Parameter(ParameterSetName='Identity', Position=0)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Set-CalendarSettings' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Set-CASMailbox
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${ActiveSyncAllowedDeviceIDs},

    ${ActiveSyncBlockedDeviceIDs},

    [bool]
    ${ActiveSyncDebugLogging},

    [bool]
    ${ActiveSyncEnabled},

    ${ActiveSyncMailboxPolicy},

    [bool]
    ${ActiveSyncSuppressReadReceipt},

    ${EwsAllowEntourage},

    ${EwsAllowList},

    ${EwsAllowMacOutlook},

    ${EwsAllowOutlook},

    ${EwsApplicationAccessPolicy},

    ${EwsBlockList},

    ${EwsEnabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${ImapEnabled},

    [bool]
    ${ImapForceICalForCalendarRetrievalOption},

    ${ImapMessagesRetrievalMimeFormat},

    [bool]
    ${ImapSuppressReadReceipt},

    [bool]
    ${ImapUseProtocolDefaults},

    [bool]
    ${IsOptimizedForAccessibility},

    ${MacOutlookEnabled},

    [bool]
    ${MAPIEnabled},

    ${OneWinNativeOutlookEnabled},

    ${OutlookMobileEnabled},

    [bool]
    ${OWAEnabled},

    [bool]
    ${OWAforDevicesEnabled},

    ${OwaMailboxPolicy},

    [bool]
    ${PopEnabled},

    [bool]
    ${PopForceICalForCalendarRetrievalOption},

    ${PopMessagesRetrievalMimeFormat},

    [bool]
    ${PopSuppressReadReceipt},

    [bool]
    ${PopUseProtocolDefaults},

    [bool]
    ${PublicFolderClientAccess},

    [bool]
    ${ShowGalAsDefaultView},

    ${SmtpClientAuthenticationDisabled},

    ${UniversalOutlookEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-CASMailbox' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Set-ClassificationRuleCollection
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [byte[]]
    ${FileData}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ClassificationRuleCollection' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-Contact
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${AssistantName},

    [string]
    ${City},

    [string]
    ${Company},

    ${CountryOrRegion},

    [string]
    ${Department},

    [string]
    ${DisplayName},

    [string]
    ${Fax},

    [string]
    ${FirstName},

    ${GeoCoordinates},

    [string]
    ${HomePhone},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string]
    ${Initials},

    [string]
    ${LastName},

    ${Manager},

    [string]
    ${MobilePhone},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [string]
    ${Notes},

    [string]
    ${Office},

    ${OtherFax},

    ${OtherHomePhone},

    ${OtherTelephone},

    [string]
    ${Pager},

    [string]
    ${Phone},

    [string]
    ${PhoneticDisplayName},

    [string]
    ${PostalCode},

    ${PostOfficeBox},

    ${SeniorityIndex},

    [string]
    ${SimpleDisplayName},

    [string]
    ${StateOrProvince},

    [string]
    ${StreetAddress},

    [string]
    ${TelephoneAssistant},

    [string]
    ${Title},

    [string]
    ${WebPage},

    ${WindowsEmailAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-Contact' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Set-DataClassification
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Description},

    ${Fingerprints},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IsDefault},

    [ValidateNotNull()]
    [cultureinfo]
    ${Locale},

    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-DataClassification' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Set-DataEncryptionPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [string]
    ${Description},

    ${DomainController},

    [bool]
    ${Enabled},

    [Parameter(ParameterSetName='TenantAdminPurgeKeyRequest')]
    [Parameter(ParameterSetName='DCAdminPurgeKeyRequest')]
    [switch]
    ${Force},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [Parameter(ParameterSetName='TenantAdminPurgeKeyRequest', Mandatory=$true)]
    [Parameter(ParameterSetName='DCAdminPurgeKeyRequest')]
    [string]
    ${PermanentDataPurgeContact},

    [Parameter(ParameterSetName='TenantAdminPurgeKeyRequest', Mandatory=$true)]
    [Parameter(ParameterSetName='DCAdminPurgeKeyRequest', Mandatory=$true)]
    [string]
    ${PermanentDataPurgeReason},

    [Parameter(ParameterSetName='TenantAdminPurgeKeyRequest', Mandatory=$true)]
    [switch]
    ${PermanentDataPurgeRequested},

    [Parameter(ParameterSetName='RefreshKey', Mandatory=$true)]
    [switch]
    ${Refresh}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-DataEncryptionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Set-DistributionGroup
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AcceptMessagesOnlyFrom},

    ${AcceptMessagesOnlyFromDLMembers},

    ${AcceptMessagesOnlyFromSendersOrMembers},

    [string]
    ${Alias},

    [bool]
    ${BccBlocked},

    ${BypassModerationFromSendersOrMembers},

    [bool]
    ${BypassNestedModerationEnabled},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [string]
    ${CustomAttribute1},

    [string]
    ${CustomAttribute10},

    [string]
    ${CustomAttribute11},

    [string]
    ${CustomAttribute12},

    [string]
    ${CustomAttribute13},

    [string]
    ${CustomAttribute14},

    [string]
    ${CustomAttribute15},

    [string]
    ${CustomAttribute2},

    [string]
    ${CustomAttribute3},

    [string]
    ${CustomAttribute4},

    [string]
    ${CustomAttribute5},

    [string]
    ${CustomAttribute6},

    [string]
    ${CustomAttribute7},

    [string]
    ${CustomAttribute8},

    [string]
    ${CustomAttribute9},

    ${Description},

    [string]
    ${DisplayName},

    ${EmailAddresses},

    ${ExtensionCustomAttribute1},

    ${ExtensionCustomAttribute2},

    ${ExtensionCustomAttribute3},

    ${ExtensionCustomAttribute4},

    ${ExtensionCustomAttribute5},

    [switch]
    ${ForceUpgrade},

    ${GrantSendOnBehalfTo},

    [bool]
    ${HiddenFromAddressListsEnabled},

    [switch]
    ${HiddenGroupMembershipEnabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IgnoreNamingPolicy},

    [string]
    ${MailTip},

    ${MailTipTranslations},

    ${ManagedBy},

    [ValidateNotNullOrEmpty()]
    ${MemberDepartRestriction},

    [ValidateNotNullOrEmpty()]
    ${MemberJoinRestriction},

    ${ModeratedBy},

    [bool]
    ${ModerationEnabled},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    ${PrimarySmtpAddress},

    ${RejectMessagesFrom},

    ${RejectMessagesFromDLMembers},

    ${RejectMessagesFromSendersOrMembers},

    [bool]
    ${ReportToManagerEnabled},

    [bool]
    ${ReportToOriginatorEnabled},

    [bool]
    ${RequireSenderAuthenticationEnabled},

    [switch]
    ${ResetMigrationToUnifiedGroup},

    [switch]
    ${RoomList},

    ${SendModerationNotifications},

    [bool]
    ${SendOofMessageToOriginatorEnabled},

    [string]
    ${SimpleDisplayName},

    ${WindowsEmailAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-DistributionGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-DkimSigningConfig
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${AdminDisplayName},

    ${BodyCanonicalization},

    [bool]
    ${Enabled},

    ${HeaderCanonicalization},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${PublishTxtRecords}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-DkimSigningConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-DlpPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Description},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Mode},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    ${State}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-DlpPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Set-DynamicDistributionGroup
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AcceptMessagesOnlyFrom},

    ${AcceptMessagesOnlyFromDLMembers},

    ${AcceptMessagesOnlyFromSendersOrMembers},

    [string]
    ${Alias},

    ${BypassModerationFromSendersOrMembers},

    ${ConditionalCompany},

    ${ConditionalCustomAttribute1},

    ${ConditionalCustomAttribute10},

    ${ConditionalCustomAttribute11},

    ${ConditionalCustomAttribute12},

    ${ConditionalCustomAttribute13},

    ${ConditionalCustomAttribute14},

    ${ConditionalCustomAttribute15},

    ${ConditionalCustomAttribute2},

    ${ConditionalCustomAttribute3},

    ${ConditionalCustomAttribute4},

    ${ConditionalCustomAttribute5},

    ${ConditionalCustomAttribute6},

    ${ConditionalCustomAttribute7},

    ${ConditionalCustomAttribute8},

    ${ConditionalCustomAttribute9},

    ${ConditionalDepartment},

    ${ConditionalStateOrProvince},

    [string]
    ${CustomAttribute1},

    [string]
    ${CustomAttribute10},

    [string]
    ${CustomAttribute11},

    [string]
    ${CustomAttribute12},

    [string]
    ${CustomAttribute13},

    [string]
    ${CustomAttribute14},

    [string]
    ${CustomAttribute15},

    [string]
    ${CustomAttribute2},

    [string]
    ${CustomAttribute3},

    [string]
    ${CustomAttribute4},

    [string]
    ${CustomAttribute5},

    [string]
    ${CustomAttribute6},

    [string]
    ${CustomAttribute7},

    [string]
    ${CustomAttribute8},

    [string]
    ${CustomAttribute9},

    [bool]
    ${DirectMembershipOnly},

    [string]
    ${DisplayName},

    ${EmailAddresses},

    ${ExtensionCustomAttribute1},

    ${ExtensionCustomAttribute2},

    ${ExtensionCustomAttribute3},

    ${ExtensionCustomAttribute4},

    ${ExtensionCustomAttribute5},

    [switch]
    ${ForceMembershipRefresh},

    [switch]
    ${ForceUpgrade},

    ${GrantSendOnBehalfTo},

    [bool]
    ${HiddenFromAddressListsEnabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${IncludedRecipients},

    [string]
    ${MailTip},

    ${MailTipTranslations},

    ${ManagedBy},

    ${ModeratedBy},

    [bool]
    ${ModerationEnabled},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [string]
    ${Notes},

    [string]
    ${PhoneticDisplayName},

    ${PrimarySmtpAddress},

    ${RecipientContainer},

    [string]
    ${RecipientFilter},

    ${RejectMessagesFrom},

    ${RejectMessagesFromDLMembers},

    ${RejectMessagesFromSendersOrMembers},

    [bool]
    ${ReportToManagerEnabled},

    [bool]
    ${ReportToOriginatorEnabled},

    [bool]
    ${RequireSenderAuthenticationEnabled},

    ${SendModerationNotifications},

    [bool]
    ${SendOofMessageToOriginatorEnabled},

    [string]
    ${SimpleDisplayName},

    ${WindowsEmailAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-DynamicDistributionGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-ElevatedAccessApprovalPolicy
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [Parameter(ParameterSetName='Default', Mandatory=$true, Position=0)]
    ${ApprovalType},

    [Parameter(ParameterSetName='Default')]
    ${ApproverGroup},

    [Parameter(ParameterSetName='Default', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Set-ElevatedAccessApprovalPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-ElevatedAccessRequest
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [Parameter(ParameterSetName='Default', Mandatory=$true)]
    [string]
    ${Comment},

    [Parameter(ParameterSetName='Default', Mandatory=$true)]
    [Alias('ApprovalDecision')]
    ${Decision},

    [Parameter(ParameterSetName='Default')]
    [hashtable]
    ${RequestContext},

    [Parameter(ParameterSetName='Default', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Alias('Identity')]
    [string]
    ${RequestId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Set-ElevatedAccessRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-EmailAddressPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${EnabledEmailAddressTemplates},

    [string]
    ${EnabledPrimarySMTPAddressTemplate},

    [switch]
    ${ForceUpgrade},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    ${Priority}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-EmailAddressPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-EmailTenantSettings
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${DomainController},

    [bool]
    ${EnablePriorityAccountProtection},

    [Parameter(Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IgnoreDehydratedFlag}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-EmailTenantSettings' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-EOPProtectionPolicyRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [int]
    ${Priority},

    [System.Object[]]
    ${RecipientDomainIs},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-EOPProtectionPolicyRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-EventsFromEmailConfiguration
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${CreateEventsFromEmailAsPrivate},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${EventReservationProcessingLevel},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${FlightReservationProcessingLevel},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${FoodEstablishmentReservationProcessingLevel},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='ResetSettings', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${InvoiceProcessingLevel},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${LodgingReservationProcessingLevel},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${ParcelDeliveryProcessingLevel},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${RentalCarReservationProcessingLevel},

    [Parameter(ParameterSetName='ResetSettings', Mandatory=$true)]
    [switch]
    ${ResetSettings},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${ServiceReservationProcessingLevel}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Set-EventsFromEmailConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-ExoPhishSimOverrideRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AddDomains},

    ${AddSenderIpRanges},

    [string]
    ${Comment},

    ${DomainController},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${RemoveDomains},

    ${RemoveSenderIpRanges}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ExoPhishSimOverrideRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-ExoSecOpsOverrideRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comment},

    ${DomainController},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ExoSecOpsOverrideRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Set-ExternalInOutlook
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    ${AllowList},

    ${Enabled},

    [Parameter(ParameterSetName='Identity', Position=0)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Set-ExternalInOutlook' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Set-Group
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${BypassSecurityGroupManagerCheck},

    ${Description},

    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Universal', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${IsHierarchicalGroup},

    [System.Object[]]
    ${ManagedBy},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [string]
    ${Notes},

    [string]
    ${PhoneticDisplayName},

    ${SeniorityIndex},

    [string]
    ${SimpleDisplayName},

    [Parameter(ParameterSetName='Universal')]
    [switch]
    ${Universal},

    ${WindowsEmailAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-Group' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-HostedConnectionFilterPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${AdminDisplayName},

    [string]
    ${ConfigurationXmlRaw},

    [bool]
    ${EnableSafeList},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${IPAllowList},

    ${IPBlockList},

    [switch]
    ${MakeDefault}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-HostedConnectionFilterPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-HostedContentFilterPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${AddXHeaderValue},

    [string]
    ${AdminDisplayName},

    ${AllowedSenderDomains},

    ${AllowedSenders},

    ${BlockedSenderDomains},

    ${BlockedSenders},

    [string]
    ${BulkQuarantineTag},

    ${BulkSpamAction},

    [int]
    ${BulkThreshold},

    [bool]
    ${DownloadLink},

    [bool]
    ${EnableEndUserSpamNotifications},

    [bool]
    ${EnableLanguageBlockList},

    [bool]
    ${EnableRegionBlockList},

    ${EndUserSpamNotificationCustomFromAddress},

    [string]
    ${EndUserSpamNotificationCustomFromName},

    [string]
    ${EndUserSpamNotificationCustomSubject},

    [int]
    ${EndUserSpamNotificationFrequency},

    ${EndUserSpamNotificationLanguage},

    [int]
    ${EndUserSpamNotificationLimit},

    ${HighConfidencePhishAction},

    [string]
    ${HighConfidencePhishQuarantineTag},

    ${HighConfidenceSpamAction},

    [string]
    ${HighConfidenceSpamQuarantineTag},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${IncreaseScoreWithBizOrInfoUrls},

    ${IncreaseScoreWithImageLinks},

    ${IncreaseScoreWithNumericIps},

    ${IncreaseScoreWithRedirectToOtherPort},

    [bool]
    ${InlineSafetyTipsEnabled},

    ${IntraOrgFilterState},

    ${LanguageBlockList},

    [switch]
    ${MakeDefault},

    ${MarkAsSpamBulkMail},

    ${MarkAsSpamEmbedTagsInHtml},

    ${MarkAsSpamEmptyMessages},

    ${MarkAsSpamFormTagsInHtml},

    ${MarkAsSpamFramesInHtml},

    ${MarkAsSpamFromAddressAuthFail},

    ${MarkAsSpamJavaScriptInHtml},

    ${MarkAsSpamNdrBackscatter},

    ${MarkAsSpamObjectTagsInHtml},

    ${MarkAsSpamSensitiveWordList},

    ${MarkAsSpamSpfRecordHardFail},

    ${MarkAsSpamWebBugsInHtml},

    [string]
    ${ModifySubjectValue},

    [string]
    ${PhishQuarantineTag},

    ${PhishSpamAction},

    [bool]
    ${PhishZapEnabled},

    [int]
    ${QuarantineRetentionPeriod},

    ${RedirectToRecipients},

    ${RegionBlockList},

    ${SpamAction},

    [string]
    ${SpamQuarantineTag},

    [bool]
    ${SpamZapEnabled},

    ${TestModeAction},

    ${TestModeBccToRecipients}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-HostedContentFilterPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-HostedContentFilterRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    ${HostedContentFilterPolicy},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [int]
    ${Priority},

    [System.Object[]]
    ${RecipientDomainIs},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-HostedContentFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-HostedOutboundSpamFilterPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${ActionWhenThresholdReached},

    [string]
    ${AdminDisplayName},

    ${AutoForwardingMode},

    ${BccSuspiciousOutboundAdditionalRecipients},

    [bool]
    ${BccSuspiciousOutboundMail},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${NotifyOutboundSpam},

    ${NotifyOutboundSpamRecipients},

    [uint]
    ${RecipientLimitExternalPerHour},

    [uint]
    ${RecipientLimitInternalPerHour},

    [uint]
    ${RecipientLimitPerDay}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-HostedOutboundSpamFilterPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-HostedOutboundSpamFilterRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [System.Object[]]
    ${ExceptIfFrom},

    [System.Object[]]
    ${ExceptIfFromMemberOf},

    [System.Object[]]
    ${ExceptIfSenderDomainIs},

    [System.Object[]]
    ${From},

    [System.Object[]]
    ${FromMemberOf},

    ${HostedOutboundSpamFilterPolicy},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [int]
    ${Priority},

    [System.Object[]]
    ${SenderDomainIs}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-HostedOutboundSpamFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-InboundConnector
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AssociatedAcceptedDomains},

    [bool]
    ${CloudServicesMailEnabled},

    [string]
    ${Comment},

    ${ConnectorSource},

    ${ConnectorType},

    ${EFSkipIPs},

    [bool]
    ${EFSkipLastIP},

    ${EFSkipMailGateway},

    [bool]
    ${EFTestMode},

    ${EFUsers},

    [bool]
    ${Enabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [bool]
    ${RequireTls},

    [bool]
    ${RestrictDomainsToCertificate},

    [bool]
    ${RestrictDomainsToIPAddresses},

    ${ScanAndDropRecipients},

    ${SenderDomains},

    ${SenderIPAddresses},

    ${TlsSenderCertificateName},

    [bool]
    ${TreatMessagesAsInternal},

    ${TrustedOrganizations}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-InboundConnector' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-InboxRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    ${ApplyCategory},

    ${ApplySystemCategory},

    ${BodyContainsWords},

    ${CopyToFolder},

    [bool]
    ${DeleteMessage},

    ${DeleteSystemCategory},

    ${ExceptIfBodyContainsWords},

    [string]
    ${ExceptIfFlaggedForAction},

    [System.Object[]]
    ${ExceptIfFrom},

    ${ExceptIfFromAddressContainsWords},

    [bool]
    ${ExceptIfHasAttachment},

    [System.Object[]]
    ${ExceptIfHasClassification},

    ${ExceptIfHeaderContainsWords},

    ${ExceptIfMessageTypeMatches},

    [bool]
    ${ExceptIfMyNameInCcBox},

    [bool]
    ${ExceptIfMyNameInToBox},

    [bool]
    ${ExceptIfMyNameInToOrCcBox},

    [bool]
    ${ExceptIfMyNameNotInToBox},

    ${ExceptIfReceivedAfterDate},

    ${ExceptIfReceivedBeforeDate},

    ${ExceptIfRecipientAddressContainsWords},

    [bool]
    ${ExceptIfSentOnlyToMe},

    [System.Object[]]
    ${ExceptIfSentTo},

    ${ExceptIfSubjectContainsWords},

    ${ExceptIfSubjectOrBodyContainsWords},

    ${ExceptIfWithImportance},

    ${ExceptIfWithinSizeRangeMaximum},

    ${ExceptIfWithinSizeRangeMinimum},

    ${ExceptIfWithSensitivity},

    [string]
    ${FlaggedForAction},

    [switch]
    ${Force},

    [System.Object[]]
    ${ForwardAsAttachmentTo},

    [System.Object[]]
    ${ForwardTo},

    [System.Object[]]
    ${From},

    ${FromAddressContainsWords},

    [bool]
    ${HasAttachment},

    [System.Object[]]
    ${HasClassification},

    ${HeaderContainsWords},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Mailbox},

    [bool]
    ${MarkAsRead},

    ${MarkImportance},

    ${MessageTypeMatches},

    ${MoveToFolder},

    [bool]
    ${MyNameInCcBox},

    [bool]
    ${MyNameInToBox},

    [bool]
    ${MyNameInToOrCcBox},

    [bool]
    ${MyNameNotInToBox},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [bool]
    ${PinMessage},

    [int]
    ${Priority},

    ${ReceivedAfterDate},

    ${ReceivedBeforeDate},

    ${RecipientAddressContainsWords},

    [System.Object[]]
    ${RedirectTo},

    [bool]
    ${SentOnlyToMe},

    [System.Object[]]
    ${SentTo},

    [bool]
    ${SoftDeleteMessage},

    [bool]
    ${StopProcessingRules},

    ${SubjectContainsWords},

    ${SubjectOrBodyContainsWords},

    ${WithImportance},

    ${WithinSizeRangeMaximum},

    ${WithinSizeRangeMinimum},

    ${WithSensitivity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'set-InboxRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Set-IntraOrganizationConnector
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [uri]
    ${DiscoveryEndpoint},

    [bool]
    ${Enabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${TargetAddressDomains},

    [uri]
    ${TargetSharingEpr}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-IntraOrganizationConnector' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailControl-Help.xml
function script:Set-IRMConfiguration
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${AutomaticServiceUpdateEnabled},

    [bool]
    ${AzureRMSLicensingEnabled},

    [bool]
    ${DecryptAttachmentForEncryptOnly},

    [bool]
    ${EDiscoverySuperUserEnabled},

    [bool]
    ${EnablePdfEncryption},

    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${InternalLicensingEnabled},

    [bool]
    ${JournalReportDecryptionEnabled},

    ${LicensingLocation},

    [bool]
    ${RejectIfRecipientHasNoRights},

    [uri]
    ${RMSOnlineKeySharingLocation},

    [bool]
    ${SearchEnabled},

    [bool]
    ${SimplifiedClientAccessDoNotForwardDisabled},

    [bool]
    ${SimplifiedClientAccessEnabled},

    [bool]
    ${SimplifiedClientAccessEncryptOnlyDisabled},

    ${TransportDecryptionSetting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-IRMConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailControl-Help.xml
function script:Set-JournalRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${JournalEmailAddress},

    [string]
    ${Name},

    ${Recipient},

    ${Scope}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-JournalRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-LabelProperties
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${ApplyToUsers},

    ${GrantAccessToAllCompanyDomainUsers},

    ${GrantAccessToAllUsers},

    ${GrantAccessToNoUsers},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-LabelProperties' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-LinkedUser
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${CertificateSubject},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'set-LinkedUser' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Set-M365CrossTenantAccessPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='SetM365Xtap', Mandatory=$true)]
    [string]
    ${AuthorizationPolicy},

    [Parameter(Mandatory=$true)]
    [string]
    ${ObjectId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-M365CrossTenantAccessPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Set-M365DataAtRestEncryptionPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [string]
    ${Description},

    ${DomainController},

    [bool]
    ${Enabled},

    [Parameter(ParameterSetName='TenantAdminPurgeKeyRequest')]
    [Parameter(ParameterSetName='DCAdminPurgeKeyRequest')]
    [switch]
    ${Force},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [Parameter(ParameterSetName='RefreshKey', Mandatory=$true)]
    [switch]
    ${Refresh}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-M365DataAtRestEncryptionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Set-M365DataAtRestEncryptionPolicyAssignment
{
    [CmdletBinding()]
    param(
    
    [Parameter(Mandatory=$true)]
    [AllowNull()]
    ${DataEncryptionPolicy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Set-M365DataAtRestEncryptionPolicyAssignment' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-Mailbox
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AcceptMessagesOnlyFrom},

    ${AcceptMessagesOnlyFromDLMembers},

    ${AcceptMessagesOnlyFromSendersOrMembers},

    [bool]
    ${AccountDisabled},

    ${AddressBookPolicy},

    [string]
    ${Alias},

    [switch]
    ${ApplyMandatoryProperties},

    ${ArchiveName},

    ${AuditAdmin},

    ${AuditDelegate},

    [bool]
    ${AuditEnabled},

    ${AuditLogAgeLimit},

    ${AuditOwner},

    ${BypassModerationFromSendersOrMembers},

    [bool]
    ${CalendarRepairDisabled},

    [bool]
    ${CalendarVersionStoreDisabled},

    [switch]
    ${ClearThrottlingPolicyAssignment},

    [string]
    ${CustomAttribute1},

    [string]
    ${CustomAttribute10},

    [string]
    ${CustomAttribute11},

    [string]
    ${CustomAttribute12},

    [string]
    ${CustomAttribute13},

    [string]
    ${CustomAttribute14},

    [string]
    ${CustomAttribute15},

    [string]
    ${CustomAttribute2},

    [string]
    ${CustomAttribute3},

    [string]
    ${CustomAttribute4},

    [string]
    ${CustomAttribute5},

    [string]
    ${CustomAttribute6},

    [string]
    ${CustomAttribute7},

    [string]
    ${CustomAttribute8},

    [string]
    ${CustomAttribute9},

    ${DataEncryptionPolicy},

    ${DefaultAuditSet},

    ${DefaultPublicFolderMailbox},

    [bool]
    ${DeliverToMailboxAndForward},

    [string]
    ${DisplayName},

    [bool]
    ${ElcProcessingDisabled},

    ${EmailAddressDisplayNames},

    ${EmailAddresses},

    [bool]
    ${EnableRoomMailboxAccount},

    ${EndDateForRetentionHold},

    [string]
    ${EnforcedTimestamps},

    [Parameter(ParameterSetName='ExcludeFromAllOrgHolds')]
    [switch]
    ${ExcludeFromAllOrgHolds},

    [Parameter(ParameterSetName='ExcludeFromOrgHolds')]
    [ValidateNotNullOrEmpty()]
    [ValidateLength(37, 37)]
    [string[]]
    ${ExcludeFromOrgHolds},

    ${ExtensionCustomAttribute1},

    ${ExtensionCustomAttribute2},

    ${ExtensionCustomAttribute3},

    ${ExtensionCustomAttribute4},

    ${ExtensionCustomAttribute5},

    ${ExternalOofOptions},

    [switch]
    ${Force},

    ${ForwardingAddress},

    ${ForwardingSmtpAddress},

    ${GrantSendOnBehalfTo},

    [switch]
    ${GroupMailbox},

    [bool]
    ${HiddenFromAddressListsEnabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='AddAggregatedMailbox', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RemoveAggregatedMailbox', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RecalculateInactiveMailbox', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='EnableComplianceTagHoldApplied', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RemoveComplianceTagHoldApplied', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RemoveDelayHoldApplied', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RemoveDelayReleaseHoldApplied', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RemoveDisabledArchive', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RestorePreviousMailboxGuid', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ExcludeFromAllOrgHolds', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ExcludeFromOrgHolds', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RemoveOrphanedHolds', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RemoveMRMConfiguration', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='AssociateSourceArchive', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ApproveAssociateMailbox', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string]
    ${ImmutableId},

    [switch]
    ${InactiveMailbox},

    [bool]
    ${IsExcludedFromServingHierarchy},

    ${IssueWarningQuota},

    ${JournalArchiveAddress},

    ${Languages},

    ${LitigationHoldDate},

    ${LitigationHoldDuration},

    [bool]
    ${LitigationHoldEnabled},

    [string]
    ${LitigationHoldOwner},

    [string]
    ${MailboxRegion},

    [string]
    ${MailTip},

    ${MailTipTranslations},

    ${MaxReceiveSize},

    ${MaxSendSize},

    [bool]
    ${MessageCopyForSendOnBehalfEnabled},

    [bool]
    ${MessageCopyForSentAsEnabled},

    [bool]
    ${MessageCopyForSMTPClientSubmissionEnabled},

    [bool]
    ${MessageTrackingReadStatusEnabled},

    ${MicrosoftOnlineServicesID},

    ${ModeratedBy},

    [bool]
    ${ModerationEnabled},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    ${NonCompliantDevices},

    [string]
    ${Office},

    ${ProhibitSendQuota},

    ${ProhibitSendReceiveQuota},

    [switch]
    ${ProvisionedForOfficeGraph},

    [switch]
    ${PublicFolder},

    [Parameter(ParameterSetName='RecalculateInactiveMailbox', Mandatory=$true)]
    [switch]
    ${RecalculateInactiveMailbox},

    ${RecipientLimits},

    ${RejectMessagesFrom},

    ${RejectMessagesFromDLMembers},

    ${RejectMessagesFromSendersOrMembers},

    [Parameter(ParameterSetName='RemoveDelayHoldApplied', Mandatory=$true)]
    [switch]
    ${RemoveDelayHoldApplied},

    [Parameter(ParameterSetName='RemoveDelayReleaseHoldApplied', Mandatory=$true)]
    [switch]
    ${RemoveDelayReleaseHoldApplied},

    [Parameter(ParameterSetName='RemoveDisabledArchive', Mandatory=$true)]
    [switch]
    ${RemoveDisabledArchive},

    [switch]
    ${RemoveMailboxProvisioningConstraint},

    [Parameter(ParameterSetName='RemoveOrphanedHolds')]
    [ValidateLength(32, 40)]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${RemoveOrphanedHolds},

    [bool]
    ${RequireSenderAuthenticationEnabled},

    ${ResourceCapacity},

    ${ResourceCustom},

    ${RetainDeletedItemsFor},

    [string]
    ${RetentionComment},

    [bool]
    ${RetentionHoldEnabled},

    ${RetentionPolicy},

    [string]
    ${RetentionUrl},

    ${RoleAssignmentPolicy},

    [securestring]
    ${RoomMailboxPassword},

    ${RulesQuota},

    [bool]
    ${SchedulerAssistant},

    ${SendModerationNotifications},

    ${SharingPolicy},

    [string]
    ${SimpleDisplayName},

    [bool]
    ${SingleItemRecoveryEnabled},

    ${StartDateForRetentionHold},

    ${StsRefreshTokensValidFrom},

    ${Type},

    [switch]
    ${UpdateEnforcedTimestamp},

    ${UseDatabaseQuotaDefaults},

    [bool]
    ${UseDatabaseRetentionDefaults},

    ${UserCertificate},

    ${UserSMimeCertificate},

    ${WindowsEmailAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('RoomMailboxPassword'))
            {
                $RoomMailboxPassword__Unsecure = [System.Net.NetworkCredential]::new('', $PSCmdlet.MyInvocation.BoundParameters['RoomMailboxPassword']).Password;
                $PSCmdlet.MyInvocation.BoundParameters['RoomMailboxPassword'] = Encrypt-Value -UnsecureString $RoomMailboxPassword__Unsecure;
            }
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-Mailbox' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Set-MailboxAnalysisRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${AcceptUntrustedCertificates},

    [Parameter(ParameterSetName='Identity')]
    ${Authentication},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${BatchName},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Identity')]
    [ValidateNotNull()]
    [securestring]
    ${Password},

    [Parameter(ParameterSetName='Identity')]
    ${Priority},

    [Parameter(ParameterSetName='Identity')]
    [ValidateNotNull()]
    ${RemoteServerName},

    [Parameter(ParameterSetName='Identity')]
    [int]
    ${RemoteServerPort},

    ${RequestExpiryInterval},

    [Parameter(ParameterSetName='Identity')]
    ${Security},

    [Parameter(ParameterSetName='Identity')]
    [ValidateNotNull()]
    [string]
    ${UserName}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Password'))
            {
                $Password__Unsecure = [System.Net.NetworkCredential]::new('', $PSCmdlet.MyInvocation.BoundParameters['Password']).Password;
                $PSCmdlet.MyInvocation.BoundParameters['Password'] = Encrypt-Value -UnsecureString $Password__Unsecure;
            }
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MailboxAnalysisRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Set-MailboxAuditBypassAssociation
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [bool]
    ${AuditBypassEnabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MailboxAuditBypassAssociation' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-MailboxAutoReplyConfiguration
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${AutoDeclineFutureRequestsWhenOOF},

    ${AutoReplyState},

    [bool]
    ${CreateOOFEvent},

    [bool]
    ${DeclineAllEventsForScheduledOOF},

    [bool]
    ${DeclineEventsForScheduledOOF},

    [string]
    ${DeclineMeetingMessage},

    [datetime]
    ${EndTime},

    [string[]]
    ${EventsToDeleteIDs},

    ${ExternalAudience},

    [string]
    ${ExternalMessage},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [string]
    ${InternalMessage},

    [string]
    ${OOFEventSubject},

    [datetime]
    ${StartTime}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MailboxAutoReplyConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-MailboxCalendarConfiguration
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${AgendaMailEnabled},

    [bool]
    ${AgendaMailIntroductionEnabled},

    [bool]
    ${AgendaPaneEnabled},

    [bool]
    ${AutoDeclineWhenBusy},

    [string]
    ${CalendarFeedsPreferredLanguage},

    [string]
    ${CalendarFeedsPreferredRegion},

    [string]
    ${CalendarFeedsRootPageId},

    [bool]
    ${ConversationalSchedulingEnabled},

    [bool]
    ${CreateEventsFromEmailAsPrivate},

    ${DailyAgendaMailSchedule},

    [int]
    ${DefaultMeetingDuration},

    [int]
    ${DefaultMinutesToReduceLongEventsBy},

    [int]
    ${DefaultMinutesToReduceShortEventsBy},

    ${DefaultOnlineMeetingProvider},

    [timespan]
    ${DefaultReminderTime},

    [bool]
    ${DeleteMeetingRequestOnRespond},

    [bool]
    ${DiningEventsFromEmailEnabled},

    [bool]
    ${EntertainmentEventsFromEmailEnabled},

    [bool]
    ${EventsFromEmailEnabled},

    ${FirstWeekOfYear},

    [bool]
    ${FlightEventsFromEmailEnabled},

    [bool]
    ${HotelEventsFromEmailEnabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${InvoiceEventsFromEmailEnabled},

    ${LocationDetailsInFreeBusy},

    [Parameter(ParameterSetName='MailboxLocation')]
    ${MailboxLocation},

    ${OnlineMeetingsByDefaultEnabled},

    [bool]
    ${PackageDeliveryEventsFromEmailEnabled},

    [bool]
    ${PreserveDeclinedMeetings},

    [bool]
    ${RemindersEnabled},

    [bool]
    ${ReminderSoundEnabled},

    [bool]
    ${RentalCarEventsFromEmailEnabled},

    [bool]
    ${ServiceAppointmentEventsFromEmailEnabled},

    ${ShortenEventScopeDefault},

    [bool]
    ${ShowWeekNumbers},

    [bool]
    ${SkipAgendaMailOnFreeDays},

    ${TimeIncrement},

    [bool]
    ${UseBrightCalendarColorThemeInOwa},

    ${WeatherEnabled},

    [int]
    ${WeatherLocationBookmark},

    ${WeatherLocations},

    ${WeatherUnit},

    ${WeekStartDay},

    ${WorkDays},

    [timespan]
    ${WorkingHoursEndTime},

    [timespan]
    ${WorkingHoursStartTime},

    ${WorkingHoursTimeZone},

    ${WorkspaceUserEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MailboxCalendarConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Set-MailboxCalendarFolder
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${DetailLevel},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ResetDelegateUserCollection', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${PublishDateRangeFrom},

    ${PublishDateRangeTo},

    [bool]
    ${PublishEnabled},

    [switch]
    ${ResetUrl},

    [bool]
    ${SearchableUrlEnabled},

    [switch]
    ${SetAsSharingSource},

    ${SharedCalendarSyncStartDate},

    [switch]
    ${UseHttps}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MailboxCalendarFolder' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Set-MailboxFolderPermission
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [System.Object[]]
    ${AccessRights},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ResetDelegateUserCollection', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${SendNotificationToUser},

    ${SharingPermissionFlags},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${User}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MailboxFolderPermission' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Set-MailboxIRMAccess
{
    [CmdletBinding()]
    param(
    
    [Parameter(Mandatory=$true)]
    ${AccessLevel},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${User}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Set-MailboxIRMAccess' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-MailboxJunkEmailConfiguration
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${BlockedSendersAndDomains},

    [bool]
    ${ContactsTrusted},

    [bool]
    ${Enabled},

    [bool]
    ${FailOnError},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [bool]
    ${SenderScreeningEnabled},

    [bool]
    ${TrustedListsOnly},

    ${TrustedRecipientsAndDomains},

    ${TrustedSendersAndDomains}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MailboxJunkEmailConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-MailboxLocation
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MailboxLocation' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-MailboxMessageConfiguration
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AfterMoveOrDeleteBehavior},

    [bool]
    ${AlwaysShowBcc},

    [bool]
    ${AlwaysShowFrom},

    [bool]
    ${AutoAddSignature},

    [bool]
    ${AutoAddSignatureOnMobile},

    [bool]
    ${AutoAddSignatureOnReply},

    [bool]
    ${CheckForForgottenAttachments},

    [bool]
    ${CheckForReportJunkDialog},

    ${ConversationSortOrder},

    [string]
    ${DefaultFontColor},

    ${DefaultFontFlags},

    [string]
    ${DefaultFontName},

    [int]
    ${DefaultFontSize},

    ${DefaultFormat},

    [string]
    ${DefaultSignature},

    [string]
    ${DefaultSignatureOnReply},

    [string]
    ${DeleteSignatureName},

    ${DisplayDensityMode},

    [bool]
    ${EchoGroupMessageBackToSubscribedSender},

    ${EmailComposeMode},

    [bool]
    ${EmptyDeletedItemsOnLogoff},

    [int]
    ${FavoritesBitFlags},

    ${GlobalReadingPanePosition},

    [bool]
    ${HideDeletedItems},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [bool]
    ${IsDarkModeTheme},

    [bool]
    ${IsFavoritesFolderTreeCollapsed},

    [bool]
    ${IsFocusedInboxEnabled},

    [bool]
    ${IsMailRootFolderTreeCollapsed},

    [bool]
    ${IsReplyAllTheDefaultResponse},

    [bool]
    ${LinkPreviewEnabled},

    [bool]
    ${MailFolderPaneExpanded},

    [int]
    ${MailSendUndoInterval},

    [bool]
    ${ManuallyPickCertificate},

    [int]
    ${NavigationBarWidth},

    ${NavigationPaneViewOption},

    ${NewEnabledPonts},

    ${NewItemNotification},

    [bool]
    ${PreferAccessibleContent},

    ${PreviewMarkAsReadBehavior},

    [int]
    ${PreviewMarkAsReadDelaytime},

    ${ReadReceiptResponse},

    [bool]
    ${ReportJunkSelected},

    [string]
    ${SendAddressDefault},

    [bool]
    ${ShowConversationAsTree},

    [bool]
    ${ShowInlinePreviews},

    [bool]
    ${ShowNotificationBar},

    [bool]
    ${ShowPreviewTextInListView},

    [bool]
    ${ShowReadingPaneOnFirstLoad},

    [bool]
    ${ShowSenderOnTopInListView},

    [bool]
    ${ShowUpNext},

    [string]
    ${SignatureHtml},

    [string]
    ${SignatureHtmlBody},

    [string]
    ${SignatureName},

    [string]
    ${SignatureText},

    [string]
    ${SignatureTextOnMobile},

    [string]
    ${SigningCertificateId},

    [string]
    ${SigningCertificateSubject},

    [bool]
    ${SmimeEncrypt},

    [bool]
    ${SmimeSign},

    [bool]
    ${UseDefaultSignatureOnMobile},

    [bool]
    ${WebSuggestedRepliesEnabledForUser}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MailboxMessageConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Set-MailboxPlan
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IsDefault},

    ${IssueWarningQuota},

    ${MaxReceiveSize},

    ${MaxSendSize},

    ${ProhibitSendQuota},

    ${ProhibitSendReceiveQuota},

    ${RecipientLimits},

    ${RetainDeletedItemsFor},

    ${RetentionPolicy},

    ${RoleAssignmentPolicy}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MailboxPlan' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-MailboxRegionalConfiguration
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${Archive},

    [string]
    ${DateFormat},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNull()]
    [cultureinfo]
    ${Language},

    [switch]
    ${LocalizeDefaultFolderName},

    [Parameter(ParameterSetName='MailboxLocation')]
    ${MailboxLocation},

    [string]
    ${TimeFormat},

    ${TimeZone},

    [switch]
    ${UseCustomRouting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$false -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MailboxRegionalConfiguration' -Parameters $PSBoundParameters -ParameterBasedRoutingHintDelegate Get-MailboxIDBasedRoutingHint -ParameterBasedRoutingHintParameterValue $Identity -UseParameterBasedRouting (Should-UseCustomRoutingHint $UseCustomRouting.IsPresent) -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Set-MailboxRestoreRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${AcceptLargeDataLoss},

    [Parameter(ParameterSetName='Identity')]
    ${BadItemLimit},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${BatchName},

    [Parameter(ParameterSetName='Identity')]
    ${CompletedRequestAgeLimit},

    [ValidateNotNull()]
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Identity')]
    [System.Object[]]
    ${InternalFlags},

    [Parameter(ParameterSetName='Identity')]
    ${LargeItemLimit},

    [Parameter(ParameterSetName='Identity')]
    ${Priority},

    [Parameter(ParameterSetName='Rehome', Mandatory=$true)]
    [switch]
    ${RehomeRequest},

    ${RemoteHostName},

    ${RequestExpiryInterval},

    [switch]
    ${SkipInitialConnectionValidation},

    [Parameter(ParameterSetName='Identity')]
    [System.Object[]]
    ${SkipMerging},

    ${SkippedItemApprovalTime},

    ${SourceWlmLevel},

    ${TargetWlmLevel}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MailboxRestoreRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Set-MailboxSearch
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Description},

    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${InPlaceHoldEnabled},

    ${ItemHoldPeriod},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [System.Object[]]
    ${SourceMailboxes}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MailboxSearch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-MailboxSpellingConfiguration
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${CheckBeforeSend},

    ${DictionaryLanguage},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${IgnoreMixedDigits},

    [bool]
    ${IgnoreUppercase}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MailboxSpellingConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-MailContact
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AcceptMessagesOnlyFrom},

    ${AcceptMessagesOnlyFromDLMembers},

    ${AcceptMessagesOnlyFromSendersOrMembers},

    [string]
    ${Alias},

    ${BypassModerationFromSendersOrMembers},

    [string]
    ${CustomAttribute1},

    [string]
    ${CustomAttribute10},

    [string]
    ${CustomAttribute11},

    [string]
    ${CustomAttribute12},

    [string]
    ${CustomAttribute13},

    [string]
    ${CustomAttribute14},

    [string]
    ${CustomAttribute15},

    [string]
    ${CustomAttribute2},

    [string]
    ${CustomAttribute3},

    [string]
    ${CustomAttribute4},

    [string]
    ${CustomAttribute5},

    [string]
    ${CustomAttribute6},

    [string]
    ${CustomAttribute7},

    [string]
    ${CustomAttribute8},

    [string]
    ${CustomAttribute9},

    [string]
    ${DisplayName},

    ${EmailAddresses},

    ${ExtensionCustomAttribute1},

    ${ExtensionCustomAttribute2},

    ${ExtensionCustomAttribute3},

    ${ExtensionCustomAttribute4},

    ${ExtensionCustomAttribute5},

    [ValidateNotNullOrEmpty()]
    ${ExternalEmailAddress},

    [switch]
    ${ForceUpgrade},

    ${GrantSendOnBehalfTo},

    [bool]
    ${HiddenFromAddressListsEnabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${MacAttachmentFormat},

    [string]
    ${MailTip},

    ${MailTipTranslations},

    ${MessageBodyFormat},

    ${MessageFormat},

    ${ModeratedBy},

    [bool]
    ${ModerationEnabled},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    ${RejectMessagesFrom},

    ${RejectMessagesFromDLMembers},

    ${RejectMessagesFromSendersOrMembers},

    [bool]
    ${RequireSenderAuthenticationEnabled},

    ${SendModerationNotifications},

    [string]
    ${SimpleDisplayName},

    ${UseMapiRichTextFormat},

    [bool]
    ${UsePreferMessageFormat},

    ${UserCertificate},

    ${UserSMimeCertificate},

    ${WindowsEmailAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MailContact' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Set-MailPublicFolder
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AcceptMessagesOnlyFrom},

    ${AcceptMessagesOnlyFromDLMembers},

    ${AcceptMessagesOnlyFromSendersOrMembers},

    [string]
    ${Alias},

    ${BypassModerationFromSendersOrMembers},

    [System.Object[]]
    ${Contacts},

    [string]
    ${CustomAttribute1},

    [string]
    ${CustomAttribute10},

    [string]
    ${CustomAttribute11},

    [string]
    ${CustomAttribute12},

    [string]
    ${CustomAttribute13},

    [string]
    ${CustomAttribute14},

    [string]
    ${CustomAttribute15},

    [string]
    ${CustomAttribute2},

    [string]
    ${CustomAttribute3},

    [string]
    ${CustomAttribute4},

    [string]
    ${CustomAttribute5},

    [string]
    ${CustomAttribute6},

    [string]
    ${CustomAttribute7},

    [string]
    ${CustomAttribute8},

    [string]
    ${CustomAttribute9},

    [bool]
    ${DeliverToMailboxAndForward},

    [string]
    ${DisplayName},

    ${EmailAddresses},

    [bool]
    ${EmailAddressPolicyEnabled},

    [ValidateNotNullOrEmpty()]
    [string]
    ${EntryId},

    ${ExtensionCustomAttribute1},

    ${ExtensionCustomAttribute2},

    ${ExtensionCustomAttribute3},

    ${ExtensionCustomAttribute4},

    ${ExtensionCustomAttribute5},

    ${ExternalEmailAddress},

    ${ForwardingAddress},

    ${GrantSendOnBehalfTo},

    [bool]
    ${HiddenFromAddressListsEnabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [bool]
    ${IgnoreMissingFolderLink},

    [string]
    ${MailTip},

    ${MailTipTranslations},

    ${MaxReceiveSize},

    ${MaxSendSize},

    ${ModeratedBy},

    [bool]
    ${ModerationEnabled},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [guid]
    ${OnPremisesObjectId},

    [string]
    ${PhoneticDisplayName},

    ${PrimarySmtpAddress},

    ${RejectMessagesFrom},

    ${RejectMessagesFromDLMembers},

    ${RejectMessagesFromSendersOrMembers},

    [bool]
    ${RequireSenderAuthenticationEnabled},

    ${SendModerationNotifications},

    [string]
    ${SimpleDisplayName},

    ${WindowsEmailAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MailPublicFolder' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-MailUser
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AcceptMessagesOnlyFrom},

    ${AcceptMessagesOnlyFromDLMembers},

    ${AcceptMessagesOnlyFromSendersOrMembers},

    [string]
    ${Alias},

    [guid]
    ${ArchiveGuid},

    ${BypassModerationFromSendersOrMembers},

    [string]
    ${CustomAttribute1},

    [string]
    ${CustomAttribute10},

    [string]
    ${CustomAttribute11},

    [string]
    ${CustomAttribute12},

    [string]
    ${CustomAttribute13},

    [string]
    ${CustomAttribute14},

    [string]
    ${CustomAttribute15},

    [string]
    ${CustomAttribute2},

    [string]
    ${CustomAttribute3},

    [string]
    ${CustomAttribute4},

    [string]
    ${CustomAttribute5},

    [string]
    ${CustomAttribute6},

    [string]
    ${CustomAttribute7},

    [string]
    ${CustomAttribute8},

    [string]
    ${CustomAttribute9},

    ${DataEncryptionPolicy},

    [string]
    ${DisplayName},

    ${EmailAddresses},

    [Parameter(ParameterSetName='EnableLitigationHoldForMigration', Mandatory=$true)]
    [switch]
    ${EnableLitigationHoldForMigration},

    [guid]
    ${ExchangeGuid},

    [Parameter(ParameterSetName='ExcludeFromAllOrgHolds')]
    [switch]
    ${ExcludeFromAllOrgHolds},

    [Parameter(ParameterSetName='ExcludeFromOrgHolds')]
    [ValidateNotNullOrEmpty()]
    [ValidateLength(37, 37)]
    [string[]]
    ${ExcludeFromOrgHolds},

    ${ExtensionCustomAttribute1},

    ${ExtensionCustomAttribute2},

    ${ExtensionCustomAttribute3},

    ${ExtensionCustomAttribute4},

    ${ExtensionCustomAttribute5},

    ${ExternalEmailAddress},

    [string]
    ${FederatedIdentity},

    [switch]
    ${ForceUpgrade},

    ${GrantSendOnBehalfTo},

    [bool]
    ${HiddenFromAddressListsEnabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ExcludeFromAllOrgHolds', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ExcludeFromOrgHolds', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RecalculateInactiveMailUser', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RemoveComplianceTagHoldApplied', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RemoveDelayHoldApplied', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RemoveDelayReleaseHoldApplied', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RemoveDisabledArchive', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RemoveLitigationHoldEnabled', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RemoveOrphanedHolds', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='EnableLitigationHoldForMigration', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='EnableComplianceTagHoldApplied', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string]
    ${ImmutableId},

    ${JournalArchiveAddress},

    [switch]
    ${LOBAppAccount},

    ${MacAttachmentFormat},

    [string]
    ${MailboxRegion},

    [string]
    ${MailTip},

    ${MailTipTranslations},

    ${MaxReceiveSize},

    ${MaxSendSize},

    ${MessageBodyFormat},

    ${MessageFormat},

    ${MicrosoftOnlineServicesID},

    ${ModeratedBy},

    [bool]
    ${ModerationEnabled},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    ${PrimarySmtpAddress},

    [Parameter(ParameterSetName='RecalculateInactiveMailUser', Mandatory=$true)]
    [switch]
    ${RecalculateInactiveMailUser},

    ${RecipientLimits},

    ${RejectMessagesFrom},

    ${RejectMessagesFromDLMembers},

    ${RejectMessagesFromSendersOrMembers},

    [Parameter(ParameterSetName='RemoveComplianceTagHoldApplied', Mandatory=$true)]
    [switch]
    ${RemoveComplianceTagHoldApplied},

    [Parameter(ParameterSetName='RemoveDelayHoldApplied', Mandatory=$true)]
    [switch]
    ${RemoveDelayHoldApplied},

    [Parameter(ParameterSetName='RemoveDelayReleaseHoldApplied', Mandatory=$true)]
    [switch]
    ${RemoveDelayReleaseHoldApplied},

    [Parameter(ParameterSetName='RemoveDisabledArchive')]
    [switch]
    ${RemoveDisabledArchive},

    [Parameter(ParameterSetName='RemoveLitigationHoldEnabled', Mandatory=$true)]
    [switch]
    ${RemoveLitigationHoldEnabled},

    [switch]
    ${RemoveMailboxProvisioningConstraint},

    [Parameter(ParameterSetName='RemoveOrphanedHolds')]
    [ValidateLength(32, 40)]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${RemoveOrphanedHolds},

    [bool]
    ${RequireSenderAuthenticationEnabled},

    ${SendModerationNotifications},

    [string]
    ${SimpleDisplayName},

    ${UseMapiRichTextFormat},

    [bool]
    ${UsePreferMessageFormat},

    ${UserCertificate},

    ${UserSMimeCertificate},

    ${WindowsEmailAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'set-MailUser' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-MalwareFilterPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${AdminDisplayName},

    [string]
    ${CustomExternalBody},

    [string]
    ${CustomExternalSubject},

    ${CustomFromAddress},

    [string]
    ${CustomFromName},

    [string]
    ${CustomInternalBody},

    [string]
    ${CustomInternalSubject},

    [bool]
    ${CustomNotifications},

    [bool]
    ${EnableExternalSenderAdminNotifications},

    [bool]
    ${EnableFileFilter},

    [bool]
    ${EnableInternalSenderAdminNotifications},

    ${ExternalSenderAdminAddress},

    ${FileTypeAction},

    [string[]]
    ${FileTypes},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${InternalSenderAdminAddress},

    [bool]
    ${IsPolicyOverrideApplied},

    [switch]
    ${MakeDefault},

    [string]
    ${QuarantineTag},

    [bool]
    ${ZapEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MalwareFilterPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-MalwareFilterRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${MalwareFilterPolicy},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [int]
    ${Priority},

    [System.Object[]]
    ${RecipientDomainIs},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MalwareFilterRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-ManagementRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='RelativeRecipientWriteScope', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='CustomRecipientWriteScope')]
    ${CustomRecipientWriteScope},

    [Parameter(ParameterSetName='App')]
    ${CustomResourceScope},

    [bool]
    ${Enabled},

    [Parameter(ParameterSetName='ExclusiveScope')]
    [ValidateNotNullOrEmpty()]
    ${ExclusiveRecipientWriteScope},

    [switch]
    ${Force},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='RecipientAdministrativeUnitScope', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${RecipientAdministrativeUnitScope},

    [Parameter(ParameterSetName='RecipientGroupScope', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${RecipientGroupScope},

    [Parameter(ParameterSetName='RecipientOrganizationalUnitScope')]
    [ValidateNotNullOrEmpty()]
    ${RecipientOrganizationalUnitScope},

    [Parameter(ParameterSetName='RelativeRecipientWriteScope')]
    ${RecipientRelativeWriteScope}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ManagementRoleAssignment' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-ManagementRoleEntry
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${AddParameter},

    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string[]]
    ${Parameters},

    [switch]
    ${RemoveParameter}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ManagementRoleEntry' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-ManagementScope
{
    [CmdletBinding(DefaultParameterSetName='RecipientFilter', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${Force},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [Parameter(ParameterSetName='RecipientFilter')]
    [string]
    ${RecipientRestrictionFilter},

    [Parameter(ParameterSetName='RecipientFilter')]
    ${RecipientRoot}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ManagementScope' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Set-MessageClassification
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [guid]
    ${ClassificationID},

    [string]
    ${DisplayName},

    ${DisplayPrecedence},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [bool]
    ${PermissionMenuVisible},

    [string]
    ${RecipientDescription},

    [bool]
    ${RetainClassificationEnabled},

    [string]
    ${SenderDescription}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MessageClassification' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Set-MigrationBatch
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${AddUsers},

    [bool]
    ${AllowUnknownColumnsInCSV},

    [switch]
    ${ApproveSkippedItems},

    ${BadItemLimit},

    ${CompleteAfter},

    [byte[]]
    ${CSVData},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${LargeItemLimit},

    ${MoveOptions},

    ${NotificationEmails},

    ${Partition},

    ${ReportInterval},

    ${SkipMerging},

    ${SkipMoving},

    [bool]
    ${SkipReports},

    ${StartAfter},

    [switch]
    ${SyncNow},

    [switch]
    ${Update}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MigrationBatch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Set-MigrationConfig
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${Partition}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MigrationConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Set-MigrationEndpoint
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${AcceptUntrustedCertificates},

    [string]
    ${ApplicationId},

    [string]
    ${AppSecretKeyVaultUrl},

    ${Authentication},

    [pscredential]
    ${Credentials},

    [string]
    ${ExchangeServer},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${MailboxPermission},

    ${MaxConcurrentIncrementalSyncs},

    ${MaxConcurrentMigrations},

    [string]
    ${NspiServer},

    ${Partition},

    ${Port},

    [string]
    ${PublicFolderDatabaseServerLegacyDN},

    ${RemoteServer},

    ${RPCProxyServer},

    ${Security},

    [ValidateNotNull()]
    [byte[]]
    ${ServiceAccountKeyFileData},

    [switch]
    ${SkipVerification},

    [string]
    ${SourceMailboxLegacyDN},

    [ValidateNotNull()]
    ${TestMailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credentials'))
            {
                $Credentials__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credentials'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credentials'] = Encrypt-Value -UnsecureString $Credentials__Unsecure;
            }
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MigrationEndpoint' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Set-MigrationUser
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${ApproveSkippedItems},

    ${BadItemLimit},

    ${CompleteAfter},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${LargeItemLimit},

    ${Partition},

    ${StartAfter},

    [switch]
    ${SyncNow}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MigrationUser' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.MediaAndDevices-Help.xml
function script:Set-MobileDeviceMailboxPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${AllowApplePushNotifications},

    ${AllowBluetooth},

    [bool]
    ${AllowBrowser},

    [bool]
    ${AllowCamera},

    [bool]
    ${AllowConsumerEmail},

    [bool]
    ${AllowDesktopSync},

    [bool]
    ${AllowExternalDeviceManagement},

    [bool]
    ${AllowGooglePushNotifications},

    [bool]
    ${AllowHTMLEmail},

    [bool]
    ${AllowInternetSharing},

    [bool]
    ${AllowIrDA},

    [bool]
    ${AllowMicrosoftPushNotifications},

    [bool]
    ${AllowMobileOTAUpdate},

    [bool]
    ${AllowNonProvisionableDevices},

    [bool]
    ${AllowPOPIMAPEmail},

    [bool]
    ${AllowRemoteDesktop},

    [bool]
    ${AllowSimplePassword},

    ${AllowSMIMEEncryptionAlgorithmNegotiation},

    [bool]
    ${AllowSMIMESoftCerts},

    [bool]
    ${AllowStorageCard},

    [bool]
    ${AllowTextMessaging},

    [bool]
    ${AllowUnsignedApplications},

    [bool]
    ${AllowUnsignedInstallationPackages},

    [bool]
    ${AllowWiFi},

    [bool]
    ${AlphanumericPasswordRequired},

    ${ApprovedApplicationList},

    [bool]
    ${AttachmentsEnabled},

    [bool]
    ${DeviceEncryptionEnabled},

    ${DevicePolicyRefreshInterval},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${IrmEnabled},

    [bool]
    ${IsDefault},

    ${MaxAttachmentSize},

    ${MaxCalendarAgeFilter},

    ${MaxEmailAgeFilter},

    ${MaxEmailBodyTruncationSize},

    ${MaxEmailHTMLBodyTruncationSize},

    ${MaxInactivityTimeLock},

    ${MaxPasswordFailedAttempts},

    [int]
    ${MinPasswordComplexCharacters},

    ${MinPasswordLength},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [bool]
    ${PasswordEnabled},

    ${PasswordExpiration},

    [int]
    ${PasswordHistory},

    [bool]
    ${PasswordRecoveryEnabled},

    [bool]
    ${RequireDeviceEncryption},

    [bool]
    ${RequireEncryptedSMIMEMessages},

    ${RequireEncryptionSMIMEAlgorithm},

    [bool]
    ${RequireManualSyncWhenRoaming},

    ${RequireSignedSMIMEAlgorithm},

    [bool]
    ${RequireSignedSMIMEMessages},

    [bool]
    ${RequireStorageCardEncryption},

    ${UnapprovedInROMApplicationList},

    [bool]
    ${UNCAccessEnabled},

    [bool]
    ${WSSAccessEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'set-MobileDeviceMailboxPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Set-MoveRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${AcceptLargeDataLoss},

    [Parameter(ParameterSetName='Identity')]
    ${BadItemLimit},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${BatchName},

    ${CompleteAfter},

    [Parameter(ParameterSetName='Identity')]
    ${CompletedRequestAgeLimit},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${IncrementalSyncInterval},

    [Parameter(ParameterSetName='Identity')]
    ${LargeItemLimit},

    ${MoveOptions},

    [bool]
    ${PreventCompletion},

    ${ProxyToMailbox},

    [ValidateNotNull()]
    [pscredential]
    ${RemoteCredential},

    [ValidateNotNull()]
    ${RemoteGlobalCatalog},

    [ValidateNotNull()]
    ${RemoteHostName},

    ${RequestExpiryInterval},

    [System.Object[]]
    ${SkipMoving},

    ${SkippedItemApprovalTime},

    ${StartAfter},

    [bool]
    ${SuspendWhenReadyToComplete}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('RemoteCredential'))
            {
                $RemoteCredential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['RemoteCredential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['RemoteCredential'] = Encrypt-Value -UnsecureString $RemoteCredential__Unsecure;
            }
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-MoveRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Set-Notification
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Identity', Mandatory=$true)]
    [Parameter(ParameterSetName='Settings', Mandatory=$true)]
    ${NotificationEmails}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-Notification' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Set-OMEConfiguration
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [string]
    ${BackgroundColor},

    [string]
    ${DisclaimerText},

    [string]
    ${EmailText},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='UseExpiryInDays', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='UseExpiryInterval', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [byte[]]
    ${Image},

    [string]
    ${IntroductionText},

    [bool]
    ${OTPEnabled},

    [string]
    ${PortalText},

    [string]
    ${PrivacyStatementUrl},

    [string]
    ${ReadButtonText},

    [bool]
    ${SocialIdSignIn}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-OMEConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-OnPremisesOrganization
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comment},

    ${HybridDomains},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${InboundConnector},

    [string]
    ${OrganizationName},

    ${OrganizationRelationship},

    ${OutboundConnector}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-OnPremisesOrganization' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Set-Organization
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${Force},

    [bool]
    ${UnifiedAuditLogIngestionEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-Organization' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Set-OrganizationConfig
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${ActivityBasedAuthenticationTimeoutEnabled},

    ${ActivityBasedAuthenticationTimeoutInterval},

    [bool]
    ${ActivityBasedAuthenticationTimeoutWithSingleSignOnEnabled},

    [bool]
    ${AppsForOfficeEnabled},

    [bool]
    ${AsyncSendEnabled},

    [bool]
    ${AuditDisabled},

    [bool]
    ${AutodiscoverPartialDirSync},

    [bool]
    ${AutoEnableArchiveMailbox},

    [switch]
    ${AutoExpandingArchive},

    [bool]
    ${AutomaticForcedReadReceiptEnabled},

    [bool]
    ${BlockMoveMessagesForGroupFolders},

    [bool]
    ${BookingsAddressEntryRestricted},

    [bool]
    ${BookingsAuthEnabled},

    [bool]
    ${BookingsBlockedWordsEnabled},

    [bool]
    ${BookingsCreationOfCustomQuestionsRestricted},

    [bool]
    ${BookingsEnabled},

    [bool]
    ${BookingsExposureOfStaffDetailsRestricted},

    [bool]
    ${BookingsMembershipApprovalRequired},

    [bool]
    ${BookingsNamingPolicyEnabled},

    [string]
    ${BookingsNamingPolicyPrefix},

    [bool]
    ${BookingsNamingPolicyPrefixEnabled},

    [string]
    ${BookingsNamingPolicySuffix},

    [bool]
    ${BookingsNamingPolicySuffixEnabled},

    [bool]
    ${BookingsNotesEntryRestricted},

    [bool]
    ${BookingsPaymentsEnabled},

    [bool]
    ${BookingsPhoneNumberEntryRestricted},

    [bool]
    ${BookingsSearchEngineIndexDisabled},

    [bool]
    ${BookingsSmsMicrosoftEnabled},

    [bool]
    ${BookingsSocialSharingRestricted},

    [int]
    ${ByteEncoderTypeFor7BitCharsets},

    [bool]
    ${CalendarVersionStoreEnabled},

    [bool]
    ${ComplianceMLBgdCrawlEnabled},

    [bool]
    ${ConnectorsActionableMessagesEnabled},

    [bool]
    ${ConnectorsEnabled},

    [bool]
    ${ConnectorsEnabledForOutlook},

    [bool]
    ${ConnectorsEnabledForSharepoint},

    [bool]
    ${ConnectorsEnabledForTeams},

    [bool]
    ${ConnectorsEnabledForYammer},

    [bool]
    ${CustomerLockboxEnabled},

    ${DefaultAuthenticationPolicy},

    ${DefaultGroupAccessType},

    [Parameter(ParameterSetName='ShortenEventScopeParameter')]
    [int]
    ${DefaultMinutesToReduceLongEventsBy},

    [Parameter(ParameterSetName='ShortenEventScopeParameter')]
    [int]
    ${DefaultMinutesToReduceShortEventsBy},

    ${DefaultPublicFolderAgeLimit},

    ${DefaultPublicFolderDeletedItemRetention},

    ${DefaultPublicFolderIssueWarningQuota},

    ${DefaultPublicFolderMaxItemSize},

    ${DefaultPublicFolderMovedItemRetention},

    ${DefaultPublicFolderProhibitPostQuota},

    [bool]
    ${DirectReportsGroupAutoCreationEnabled},

    [bool]
    ${DisablePlusAddressInRecipients},

    ${DistributionGroupDefaultOU},

    ${DistributionGroupNameBlockedWordsList},

    ${DistributionGroupNamingPolicy},

    [bool]
    ${ElcProcessingDisabled},

    [bool]
    ${EnableForwardingAddressSyncForMailboxes},

    [bool]
    ${EnableOutlookEvents},

    [bool]
    ${EndUserDLUpgradeFlowsDisabled},

    ${EwsAllowEntourage},

    ${EwsAllowList},

    ${EwsAllowMacOutlook},

    ${EwsAllowOutlook},

    ${EwsApplicationAccessPolicy},

    ${EwsBlockList},

    ${EwsEnabled},

    [bool]
    ${ExchangeNotificationEnabled},

    [ValidateCount(0, 64)]
    ${ExchangeNotificationRecipients},

    [bool]
    ${FindTimeAttendeeAuthenticationEnabled},

    [bool]
    ${FindTimeAutoScheduleDisabled},

    [bool]
    ${FindTimeLockPollForAttendeesEnabled},

    [bool]
    ${FindTimeOnlineMeetingOptionDisabled},

    ${FocusedInboxOn},

    ${HierarchicalAddressBookRoot},

    [bool]
    ${HybridRSVPEnabled},

    ${IPListBlocked},

    [bool]
    ${IsAgendaMailEnabled},

    [bool]
    ${IsGroupFoldersAndRulesEnabled},

    [bool]
    ${IsGroupMemberAllowedToEditContent},

    [bool]
    ${LeanPopoutEnabled},

    [bool]
    ${LinkPreviewEnabled},

    [bool]
    ${MailTipsAllTipsEnabled},

    [bool]
    ${MailTipsExternalRecipientsTipsEnabled},

    [bool]
    ${MailTipsGroupMetricsEnabled},

    [uint]
    ${MailTipsLargeAudienceThreshold},

    [bool]
    ${MailTipsMailboxSourcedTipsEnabled},

    [bool]
    ${MaskClientIpInReceivedHeadersEnabled},

    [bool]
    ${MatchSenderOrganizerProperties},

    [bool]
    ${MessageHighlightsEnabled},

    [bool]
    ${MessageRecallAlertRecipientsEnabled},

    [bool]
    ${MessageRecallAlertRecipientsReadMessagesOnlyEnabled},

    ${MessageRecallEnabled},

    ${MessageRecallMaxRecallableAge},

    [bool]
    ${MessageRemindersEnabled},

    [bool]
    ${MobileAppEducationEnabled},

    [bool]
    ${OAuth2ClientProfileEnabled},

    ${OnlineMeetingsByDefaultEnabled},

    [bool]
    ${OutlookGifPickerDisabled},

    [bool]
    ${OutlookMobileGCCRestrictionsEnabled},

    [bool]
    ${OutlookMobileHelpShiftEnabled},

    [bool]
    ${OutlookMobileSingleAccountEnabled},

    [bool]
    ${OutlookPayEnabled},

    [bool]
    ${OutlookTextPredictionDisabled},

    [bool]
    ${PerTenantSwitchToESTSEnabled},

    [bool]
    ${PostponeRoamingSignaturesUntilLater},

    [int]
    ${PreferredInternetCodePageForShiftJis},

    [bool]
    ${PublicComputersDetectionEnabled},

    ${PublicFoldersEnabled},

    [bool]
    ${PublicFolderShowClientControl},

    [bool]
    ${ReadTrackingEnabled},

    ${RecallReadMessagesEnabled},

    [bool]
    ${RefreshSessionEnabled},

    [bool]
    ${RejectDirectSend},

    ${RemotePublicFolderMailboxes},

    [int]
    ${RequiredCharsetCoverage},

    [bool]
    ${SendFromAliasEnabled},

    [bool]
    ${SharedDomainEmailAddressFlowEnabled},

    [Parameter(ParameterSetName='ShortenEventScopeParameter', Mandatory=$true, Position=0)]
    ${ShortenEventScopeDefault},

    [uri]
    ${SiteMailboxCreationURL},

    [bool]
    ${SmtpActionableMessagesEnabled},

    [bool]
    ${UnblockUnsafeSenderPromptEnabled},

    [string]
    ${VisibleMeetingUpdateProperties},

    [bool]
    ${WebPushNotificationsDisabled},

    [bool]
    ${WebSuggestedRepliesDisabled},

    [bool]
    ${WorkspaceTenantEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-OrganizationConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Set-OrganizationRelationship
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${ArchiveAccessEnabled},

    [bool]
    ${DeliveryReportEnabled},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${DomainNames},

    [bool]
    ${Enabled},

    [switch]
    ${Force},

    [bool]
    ${FreeBusyAccessEnabled},

    ${FreeBusyAccessLevel},

    ${FreeBusyAccessScope},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${MailboxMoveCapability},

    [bool]
    ${MailboxMoveEnabled},

    ${MailboxMovePublishedScopes},

    [bool]
    ${MailTipsAccessEnabled},

    ${MailTipsAccessLevel},

    ${MailTipsAccessScope},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [string]
    ${OAuthApplicationId},

    ${OrganizationContact},

    [bool]
    ${PhotosEnabled},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [uri]
    ${TargetApplicationUri},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [uri]
    ${TargetAutodiscoverEpr},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [uri]
    ${TargetOwaURL},

    [uri]
    ${TargetSharingEpr}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-OrganizationRelationship' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-OutboundConnector
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${AllAcceptedDomains},

    [bool]
    ${CloudServicesMailEnabled},

    [string]
    ${Comment},

    ${ConnectorSource},

    ${ConnectorType},

    [bool]
    ${Enabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${IsTransportRuleScoped},

    [bool]
    ${IsValidated},

    ${LastValidationTimestamp},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    ${RecipientDomains},

    [bool]
    ${RouteAllMessagesViaOnPremises},

    [bool]
    ${SenderRewritingEnabled},

    ${SmartHosts},

    [bool]
    ${TestMode},

    ${TlsDomain},

    ${TlsSettings},

    [bool]
    ${UseMXRecord},

    [string[]]
    ${ValidationRecipients}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-OutboundConnector' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Set-OutlookProtectionRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    ${ApplyRightsProtectionTemplate},

    [switch]
    ${Force},

    [string[]]
    ${FromDepartment},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string]
    ${Name},

    [ValidateRange(0, 2147483647)]
    [int]
    ${Priority},

    ${SentTo},

    ${SentToScope},

    [bool]
    ${UserCanOverride}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-OutlookProtectionRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Set-OwaMailboxPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${AccountTransferEnabled},

    ${ActionForUnknownFileAndMIMETypes},

    [bool]
    ${ActiveSyncIntegrationEnabled},

    ${AdditionalAccountsEnabled},

    [bool]
    ${AdditionalStorageProvidersAvailable},

    [bool]
    ${AllAddressListsEnabled},

    [bool]
    ${AllowCopyContactsToDeviceAddressBook},

    ${AllowedFileTypes},

    ${AllowedMimeTypes},

    [string[]]
    ${AllowedOrganizationAccountDomains},

    ${AllowOfflineOn},

    [bool]
    ${BizBarEnabled},

    ${BlockedFileTypes},

    ${BlockedMimeTypes},

    [bool]
    ${BookingsMailboxCreationEnabled},

    [string]
    ${BookingsMailboxDomain},

    [bool]
    ${CalendarEnabled},

    [bool]
    ${ChangePasswordEnabled},

    ${ChangeSettingsAccountEnabled},

    [bool]
    ${ClassicAttachmentsEnabled},

    ${ConditionalAccessPolicy},

    [bool]
    ${ContactsEnabled},

    [int]
    ${DefaultClientLanguage},

    [string]
    ${DefaultTheme},

    [bool]
    ${DelegateAccessEnabled},

    [bool]
    ${DirectFileAccessOnPrivateComputersEnabled},

    [bool]
    ${DirectFileAccessOnPublicComputersEnabled},

    [switch]
    ${DisableFacebook},

    [bool]
    ${DisplayPhotosEnabled},

    [bool]
    ${EmptyStateEnabled},

    [bool]
    ${ExplicitLogonEnabled},

    [bool]
    ${ExternalImageProxyEnabled},

    [string]
    ${ExternalSPMySiteHostURL},

    [bool]
    ${FeedbackEnabled},

    [bool]
    ${ForceSaveAttachmentFilteringEnabled},

    ${ForceSaveFileTypes},

    ${ForceSaveMimeTypes},

    [bool]
    ${ForceWacViewingFirstOnPrivateComputers},

    [bool]
    ${ForceWacViewingFirstOnPublicComputers},

    [bool]
    ${FreCardsEnabled},

    [bool]
    ${GlobalAddressListEnabled},

    [bool]
    ${GroupCreationEnabled},

    ${HideClassicOutlookToggleOut},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${InstantMessagingEnabled},

    ${InstantMessagingType},

    [bool]
    ${InterestingCalendarsEnabled},

    [string]
    ${InternalSPMySiteHostURL},

    [bool]
    ${IRMEnabled},

    [switch]
    ${IsDefault},

    ${ItemsToOtherAccountsEnabled},

    [bool]
    ${JournalEnabled},

    [bool]
    ${LinkedInEnabled},

    [bool]
    ${LocalEventsEnabled},

    [int]
    ${LogonAndErrorLanguage},

    [bool]
    ${MessagePreviewsDisabled},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [bool]
    ${NotesEnabled},

    [bool]
    ${NpsSurveysEnabled},

    [bool]
    ${OfflineEnabledWeb},

    [bool]
    ${OfflineEnabledWin},

    [bool]
    ${OneDriveAttachmentsEnabled},

    ${OneWinNativeOutlookEnabled},

    [bool]
    ${OnSendAddinsEnabled},

    [bool]
    ${OrganizationEnabled},

    ${OutboundCharset},

    [bool]
    ${OutlookBetaToggleEnabled},

    ${OutlookNewslettersAccessLevel},

    ${OutlookNewslettersReactions},

    ${OutlookNewslettersShowMore},

    [bool]
    ${OWALightEnabled},

    [bool]
    ${PersonalAccountCalendarsEnabled},

    ${PersonalAccountsEnabled},

    [bool]
    ${PhoneticSupportEnabled},

    [bool]
    ${PlacesEnabled},

    [bool]
    ${PremiumClientEnabled},

    [bool]
    ${PrintWithoutDownloadEnabled},

    [bool]
    ${ProjectMocaEnabled},

    [bool]
    ${PublicFoldersEnabled},

    [bool]
    ${RecoverDeletedItemsEnabled},

    [bool]
    ${ReferenceAttachmentsEnabled},

    [bool]
    ${RemindersAndNotificationsEnabled},

    [bool]
    ${ReportJunkEmailEnabled},

    [bool]
    ${RulesEnabled},

    [bool]
    ${SatisfactionEnabled},

    [bool]
    ${SaveAttachmentsToCloudEnabled},

    [bool]
    ${SearchFoldersEnabled},

    [bool]
    ${SetPhotoEnabled},

    [string]
    ${SetPhotoURL},

    [bool]
    ${ShowOnlineArchiveEnabled},

    [bool]
    ${SignaturesEnabled},

    [bool]
    ${SilverlightEnabled},

    [bool]
    ${SkipCreateUnifiedGroupCustomSharepointClassification},

    [bool]
    ${SMimeSuppressNameChecksEnabled},

    [bool]
    ${SpellCheckerEnabled},

    [bool]
    ${TasksEnabled},

    [bool]
    ${TeamsnapCalendarsEnabled},

    [bool]
    ${TextMessagingEnabled},

    [bool]
    ${ThemeSelectionEnabled},

    [bool]
    ${UMIntegrationEnabled},

    [bool]
    ${UseGB18030},

    [bool]
    ${UseISO885915},

    [bool]
    ${UserVoiceEnabled},

    [bool]
    ${WacEditingEnabled},

    [bool]
    ${WacExternalServicesEnabled},

    [bool]
    ${WacOMEXEnabled},

    [bool]
    ${WacViewingOnPrivateComputersEnabled},

    [bool]
    ${WacViewingOnPublicComputersEnabled},

    [bool]
    ${WeatherEnabled},

    ${WebPartsFrameOptionsType},

    [bool]
    ${WSSAccessOnPrivateComputersEnabled},

    [bool]
    ${WSSAccessOnPublicComputersEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-OwaMailboxPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-PartnerApplication
{
    [CmdletBinding(DefaultParameterSetName='AuthMetadataUrlParameterSet', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${AcceptSecurityIdentifierInformation},

    ${AccountType},

    [string[]]
    ${ActAsPermissions},

    [Parameter(ParameterSetName='ACSTrustApplicationParameterSet')]
    [string]
    ${ApplicationIdentifier},

    [bool]
    ${Enabled},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${LinkedAccount},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-PartnerApplication' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-PerimeterConfig
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${GatewayIPAddresses},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-PerimeterConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-PhishSimOverridePolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='TeamLocation')]
    [Parameter(ParameterSetName='AdaptiveScopeLocation')]
    [string]
    ${Comment},

    ${DomainController},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='TeamLocation')]
    [Parameter(ParameterSetName='AdaptiveScopeLocation')]
    [bool]
    ${Enabled},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='TeamLocation')]
    [Parameter(ParameterSetName='AdaptiveScopeLocation')]
    [Parameter(ParameterSetName='InformationBarrierDefault')]
    [Parameter(ParameterSetName='OrganizationSegmentsAllowed')]
    [Parameter(ParameterSetName='OrganizationSegmentsBlocked')]
    [Parameter(ParameterSetName='OrganizationSegmentAllowedFilter')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RetryDistributionParameterSet', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='DisableRestrictiveRetentionParameterSet', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='TeamLocation', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InformationBarrierDefault', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='OrganizationSegmentsDefault', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='AdaptiveScopeLocation', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-PhishSimOverridePolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Set-Place
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${AudioDeviceName},

    [string]
    ${Building},

    ${Capacity},

    [string]
    ${City},

    ${CountryOrRegion},

    [System.Object[]]
    ${Desks},

    [string]
    ${DisplayDeviceName},

    ${Floor},

    [string]
    ${FloorLabel},

    ${GeoCoordinates},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${IsWheelChairAccessible},

    [string]
    ${Label},

    [bool]
    ${MTREnabled},

    [string]
    ${ParentId},

    ${ParentType},

    [string]
    ${Phone},

    [string]
    ${PostalCode},

    [string]
    ${State},

    [string]
    ${Street},

    [string[]]
    ${Tags},

    [string]
    ${VideoDeviceName}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-Place' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-PolicyTipConfig
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string]
    ${Value}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-PolicyTipConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-ProtectionServicePolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ProtectionServicePolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Set-PublicFolder
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AgeLimit},

    [cultureinfo]
    ${EformsLocaleId},

    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${IssueWarningQuota},

    ${MailEnabled},

    ${MailRecipientGuid},

    ${MaxItemSize},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    ${Path},

    [bool]
    ${PerUserReadStateEnabled},

    ${ProhibitPostQuota},

    ${RetainDeletedItemsFor}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-PublicFolder' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Set-PublicFolderMailboxMigrationRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${AcceptLargeDataLoss},

    ${BadItemLimit},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${LargeItemLimit},

    [switch]
    ${SkipInitialConnectionValidation},

    [System.Object[]]
    ${SkipMerging},

    ${SkippedItemApprovalTime}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-PublicFolderMailboxMigrationRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-QuarantinePermissions
{
    [CmdletBinding()]
    param(
    
    [bool]
    ${PermissionToAllowSender},

    [bool]
    ${PermissionToBlockSender},

    [bool]
    ${PermissionToDelete},

    [bool]
    ${PermissionToDownload},

    [bool]
    ${PermissionToPreview},

    [bool]
    ${PermissionToRelease},

    [bool]
    ${PermissionToRequestRelease},

    [bool]
    ${PermissionToViewHeader},

    [Parameter(Mandatory=$true)]
    ${QuarantinePermissionsObject}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Set-QuarantinePermissions' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-QuarantinePolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [int]
    ${AdminNotificationFrequencyInDays},

    ${AdminNotificationLanguage},

    [bool]
    ${AdminNotificationsEnabled},

    ${AdminQuarantinePermissionsList},

    [string]
    ${CustomDisclaimer},

    ${DomainController},

    [ValidateNotNull()]
    ${EndUserQuarantinePermissions},

    [int]
    ${EndUserQuarantinePermissionsValue},

    [string]
    ${EndUserSpamNotificationCustomFromAddress},

    [timespan]
    ${EndUserSpamNotificationFrequency},

    [int]
    ${EndUserSpamNotificationFrequencyInDays},

    ${EndUserSpamNotificationLanguage},

    ${EsnCustomSubject},

    [bool]
    ${ESNEnabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IgnoreDehydratedFlag},

    [bool]
    ${IncludeMessagesFromBlockedSenderAddress},

    ${MultiLanguageCustomDisclaimer},

    ${MultiLanguageSenderName},

    ${MultiLanguageSetting},

    [bool]
    ${OrganizationBrandingEnabled},

    [int]
    ${QuarantineRetentionDays}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-QuarantinePolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-RegulatoryComplianceUI
{
    [CmdletBinding()]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Set-RegulatoryComplianceUI' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Set-RemoteDomain
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AllowedOOFType},

    [bool]
    ${AutoForwardEnabled},

    [bool]
    ${AutoReplyEnabled},

    ${ByteEncoderTypeFor7BitCharsets},

    [string]
    ${CharacterSet},

    ${ContentType},

    [bool]
    ${DeliveryReportEnabled},

    [bool]
    ${DisplaySenderName},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${IsInternal},

    ${LineWrapSize},

    [bool]
    ${MeetingForwardNotificationEnabled},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [bool]
    ${NDRDiagnosticInfoEnabled},

    [bool]
    ${NDREnabled},

    [string]
    ${NonMimeCharacterSet},

    ${PreferredInternetCodePageForShiftJis},

    ${RequiredCharsetCoverage},

    [bool]
    ${SmtpDaneMandatoryModeEnabled},

    [bool]
    ${TargetDeliveryDomain},

    ${TNEFEnabled},

    [bool]
    ${TrustedMailInboundEnabled},

    [bool]
    ${TrustedMailOutboundEnabled},

    [bool]
    ${UseSimpleDisplayName}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-RemoteDomain' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Set-ReportSchedule
{
    [CmdletBinding()]
    param(
    
    ${Direction},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${DlpRuleId},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${EncryptionTemplate},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${EncryptionType},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [datetime]
    ${ExpiryDate},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [switch]
    ${IncludeDLP},

    ${NotificationEmail},

    [string]
    ${RecipientAddress},

    ${ReportFrequency},

    ${ReportType},

    [Parameter(ParameterSetName='ScheduledId', Mandatory=$true)]
    ${ScheduleID},

    [string]
    ${ScheduleName},

    [string]
    ${SenderAddress},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [datetime]
    ${StartDate},

    ${TransportRuleId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Set-ReportSchedule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-ReportSubmissionPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${DisableQuarantineReportingOption},

    [bool]
    ${DisableUserSubmissionOptions},

    [bool]
    ${EnableCustomizedMsg},

    [bool]
    ${EnableCustomNotificationSender},

    [bool]
    ${EnableOrganizationBranding},

    [bool]
    ${EnableReportToMicrosoft},

    [bool]
    ${EnableThirdPartyAddress},

    [bool]
    ${EnableUserEmailNotification},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string]
    ${JunkReviewResultMessage},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePostSubmitMessageButtonLinkForJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePostSubmitMessageButtonLinkForPhishing},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePostSubmitMessageButtonTextForJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePostSubmitMessageButtonTextForPhishing},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePostSubmitMessageForJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePostSubmitMessageForPhishing},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePostSubmitMessageTitleForJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePostSubmitMessageTitleForPhishing},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageButtonLinkForJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageButtonLinkForNotJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageButtonLinkForPhishing},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageButtonTextForJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageButtonTextForNotJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageButtonTextForPhishing},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageForJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageForNotJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageForPhishing},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageTitleForJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageTitleForNotJunk},

    [System.Collections.Generic.List[string]]
    ${MultiLanguagePreSubmitMessageTitleForPhishing},

    ${MultiLanguageSetting},

    [string]
    ${NotificationFooterMessage},

    ${NotificationSenderAddress},

    [bool]
    ${NotificationsForCleanSubmissionAirInvestigationsEnabled},

    [bool]
    ${NotificationsForPhishMalwareSubmissionAirInvestigationsEnabled},

    [bool]
    ${NotificationsForSpamSubmissionAirInvestigationsEnabled},

    [bool]
    ${NotificationsForSubmissionAirInvestigationsEnabled},

    [string]
    ${NotJunkReviewResultMessage},

    [bool]
    ${OnlyShowPhishingDisclaimer},

    [string]
    ${PhishingReviewResultMessage},

    [string]
    ${PostSubmitMessage},

    [bool]
    ${PostSubmitMessageEnabled},

    [string]
    ${PostSubmitMessageForJunk},

    [string]
    ${PostSubmitMessageForNotJunk},

    [string]
    ${PostSubmitMessageForPhishing},

    [string]
    ${PostSubmitMessageTitle},

    [string]
    ${PostSubmitMessageTitleForJunk},

    [string]
    ${PostSubmitMessageTitleForNotJunk},

    [string]
    ${PostSubmitMessageTitleForPhishing},

    [string]
    ${PreSubmitMessage},

    [bool]
    ${PreSubmitMessageEnabled},

    [string]
    ${PreSubmitMessageForJunk},

    [string]
    ${PreSubmitMessageForNotJunk},

    [string]
    ${PreSubmitMessageForPhishing},

    [string]
    ${PreSubmitMessageTitle},

    [string]
    ${PreSubmitMessageTitleForJunk},

    [string]
    ${PreSubmitMessageTitleForNotJunk},

    [string]
    ${PreSubmitMessageTitleForPhishing},

    [bool]
    ${ReportChatMessageEnabled},

    [bool]
    ${ReportChatMessageToCustomizedAddressEnabled},

    ${ReportJunkAddresses},

    [bool]
    ${ReportJunkToCustomizedAddress},

    ${ReportNotJunkAddresses},

    [bool]
    ${ReportNotJunkToCustomizedAddress},

    ${ReportPhishAddresses},

    [bool]
    ${ReportPhishToCustomizedAddress},

    ${ThirdPartyReportAddresses},

    [int]
    ${UserSubmissionOptions},

    [string]
    ${UserSubmissionOptionsMessage}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ReportSubmissionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-ReportSubmissionRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    ${ReportSubmissionPolicy},

    [System.Object[]]
    ${SentTo}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ReportSubmissionRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Set-ResourceConfig
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${ResourcePropertySchema}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-ResourceConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Set-RetentionPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IsDefault},

    [switch]
    ${IsDefaultArbitrationMailbox},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [guid]
    ${RetentionId},

    [System.Object[]]
    ${RetentionPolicyTagLinks}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'set-RetentionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Set-RetentionPolicyTag
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    ${AgeLimitForRetention},

    [string]
    ${Comment},

    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${LegacyManagedFolder},

    ${LocalizedComment},

    ${LocalizedRetentionPolicyTagName},

    [Parameter(ParameterSetName='ParameterSetMailboxTask', Mandatory=$true)]
    ${Mailbox},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${MessageClass},

    [bool]
    ${MustDisplayCommentEnabled},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [Parameter(ParameterSetName='ParameterSetMailboxTask')]
    [System.Object[]]
    ${OptionalInMailbox},

    [Parameter(ParameterSetName='Identity')]
    ${RetentionAction},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${RetentionEnabled},

    [guid]
    ${RetentionId},

    [bool]
    ${SystemTag}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-RetentionPolicyTag' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Set-RMSTemplate
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNull()]
    ${Identity},

    [Parameter(Mandatory=$true)]
    ${Type}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-RMSTemplate' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-RoleAssignmentPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Description},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [switch]
    ${IsDefault},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-RoleAssignmentPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-RoleGroup
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${BypassSecurityGroupManagerCheck},

    [string]
    ${Description},

    [ValidateNotNullOrEmpty()]
    [string]
    ${DisplayName},

    [switch]
    ${Force},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    ${ManagedBy},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [string]
    ${WellKnownObject}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-RoleGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-SafeAttachmentPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${Action},

    [string]
    ${AdminDisplayName},

    [bool]
    ${Enable},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string]
    ${QuarantineTag},

    [bool]
    ${Redirect},

    ${RedirectAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-SafeAttachmentPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-SafeAttachmentRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [int]
    ${Priority},

    [System.Object[]]
    ${RecipientDomainIs},

    ${SafeAttachmentPolicy},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-SafeAttachmentRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-SafeLinksPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${AdminDisplayName},

    [bool]
    ${AllowClickThrough},

    [string]
    ${CustomNotificationText},

    [bool]
    ${DeliverMessageAfterScan},

    [bool]
    ${DisableUrlRewrite},

    ${DoNotRewriteUrls},

    [bool]
    ${EnableForInternalSenders},

    [bool]
    ${EnableOrganizationBranding},

    [bool]
    ${EnableSafeLinksForEmail},

    [bool]
    ${EnableSafeLinksForOffice},

    [bool]
    ${EnableSafeLinksForTeams},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${ScanUrls},

    [bool]
    ${TrackClicks},

    [bool]
    ${UseTranslatedNotificationText}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-SafeLinksPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-SafeLinksRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [int]
    ${Priority},

    [System.Object[]]
    ${RecipientDomainIs},

    ${SafeLinksPolicy},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-SafeLinksRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-SecOpsOverridePolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AddSentTo},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='TeamLocation')]
    [Parameter(ParameterSetName='AdaptiveScopeLocation')]
    [string]
    ${Comment},

    ${DomainController},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='TeamLocation')]
    [Parameter(ParameterSetName='AdaptiveScopeLocation')]
    [bool]
    ${Enabled},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='TeamLocation')]
    [Parameter(ParameterSetName='AdaptiveScopeLocation')]
    [Parameter(ParameterSetName='InformationBarrierDefault')]
    [Parameter(ParameterSetName='OrganizationSegmentsAllowed')]
    [Parameter(ParameterSetName='OrganizationSegmentsBlocked')]
    [Parameter(ParameterSetName='OrganizationSegmentAllowedFilter')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='RetryDistributionParameterSet', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='DisableRestrictiveRetentionParameterSet', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='TeamLocation', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InformationBarrierDefault', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='OrganizationSegmentsDefault', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='AdaptiveScopeLocation', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${RemoveSentTo}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-SecOpsOverridePolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-ServicePrincipal
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'set-ServicePrincipal' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Set-SharingPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${Default},

    ${Domains},

    [bool]
    ${Enabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-SharingPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Set-SmimeConfig
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${OWAAllowUserChoiceOfSigningCertificate},

    [bool]
    ${OWAAlwaysEncrypt},

    [bool]
    ${OWAAlwaysSign},

    [uint]
    ${OWABCCEncryptedEmailForking},

    [bool]
    ${OWACheckCRLOnSend},

    [bool]
    ${OWAClearSign},

    [bool]
    ${OWACopyRecipientHeaders},

    [uint]
    ${OWACRLConnectionTimeout},

    [uint]
    ${OWACRLRetrievalTimeout},

    [bool]
    ${OWADisableCRLCheck},

    [uint]
    ${OWADLExpansionTimeout},

    [string]
    ${OWAEncryptionAlgorithms},

    [bool]
    ${OWAEncryptTemporaryBuffers},

    [bool]
    ${OWAForceSMIMEClientUpgrade},

    [bool]
    ${OWAIncludeCertificateChainAndRootCertificate},

    [bool]
    ${OWAIncludeCertificateChainWithoutRootCertificate},

    [bool]
    ${OWAIncludeSMIMECapabilitiesInMessage},

    [bool]
    ${OWAOnlyUseSmartCard},

    [string]
    ${OWASenderCertificateAttributesToDisplay},

    [bool]
    ${OWASignedEmailCertificateInclusion},

    [string]
    ${OWASigningAlgorithms},

    [bool]
    ${OWATripleWrapSignedEncryptedMail},

    [bool]
    ${OWAUseKeyIdentifier},

    [bool]
    ${OWAUseSecondaryProxiesWhenFindingCertificates},

    [byte[]]
    ${SMIMECertificateIssuingCA}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-SmimeConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-SweepRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    ${DestinationFolder},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${Enabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Identity')]
    ${KeepForDays},

    [Parameter(ParameterSetName='Identity')]
    ${KeepLatest},

    ${Mailbox},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${Provider},

    [Parameter(ParameterSetName='Identity')]
    ${Sender},

    [Parameter(ParameterSetName='Identity')]
    ${SourceFolder},

    [Parameter(ParameterSetName='Identity')]
    ${SystemCategory}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-SweepRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Set-SyncRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${AcceptLargeDataLoss},

    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${AcceptUntrustedCertificates},

    [Parameter(ParameterSetName='Identity')]
    ${Authentication},

    [Parameter(ParameterSetName='Identity')]
    ${BadItemLimit},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${BatchName},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${Calendar},

    [Parameter(ParameterSetName='Identity')]
    ${CompletedRequestAgeLimit},

    [Parameter(ParameterSetName='Identity')]
    [bool]
    ${Contact},

    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='FullDivergenceVerification')]
    [string[]]
    ${DVExcludeFolderNames},

    [Parameter(ParameterSetName='Identity')]
    [string[]]
    ${DVFolderNames},

    [Parameter(ParameterSetName='FullDivergenceVerification', Mandatory=$true)]
    [switch]
    ${DVIncludeAllFolders},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='FullDivergenceVerification')]
    ${DVPolicies},

    [Parameter(ParameterSetName='Identity')]
    [System.Object[]]
    ${DVWKFTypes},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='Identity')]
    [string[]]
    ${IncludeFolders},

    [Parameter(ParameterSetName='Identity')]
    ${IncrementalSyncInterval},

    [Parameter(ParameterSetName='Identity')]
    ${LargeItemLimit},

    [Parameter(ParameterSetName='Identity')]
    [ValidateNotNull()]
    [securestring]
    ${Password},

    [Parameter(ParameterSetName='Identity')]
    ${Priority},

    [Parameter(ParameterSetName='Identity')]
    [ValidateNotNull()]
    [string]
    ${ProviderArgs},

    [Parameter(ParameterSetName='Identity')]
    [ValidateNotNull()]
    [securestring]
    ${RefreshToken},

    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${RemoteSendEnabled},

    [Parameter(ParameterSetName='Identity')]
    [ValidateNotNull()]
    ${RemoteServerName},

    [Parameter(ParameterSetName='Identity')]
    [int]
    ${RemoteServerPort},

    ${RequestExpiryInterval},

    [Parameter(ParameterSetName='Identity')]
    ${Security},

    [switch]
    ${SkipInitialConnectionValidation},

    [Parameter(ParameterSetName='Identity')]
    [System.Object[]]
    ${SkipMerging},

    [Parameter(ParameterSetName='Identity')]
    [ValidateNotNull()]
    [securestring]
    ${SmtpPassword},

    [Parameter(ParameterSetName='Identity')]
    [ValidateNotNull()]
    ${SmtpServerName},

    [Parameter(ParameterSetName='Identity')]
    [int]
    ${SmtpServerPort},

    [Parameter(ParameterSetName='Identity')]
    [string]
    ${SmtpUserName},

    [Parameter(ParameterSetName='Identity')]
    [Parameter(ParameterSetName='FullDivergenceVerification')]
    [switch]
    ${StartDivergenceVerification},

    [switch]
    ${StartHierarchyFixup},

    [Parameter(ParameterSetName='Identity')]
    [ValidateNotNull()]
    [string]
    ${UserName}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Password'))
            {
                $Password__Unsecure = [System.Net.NetworkCredential]::new('', $PSCmdlet.MyInvocation.BoundParameters['Password']).Password;
                $PSCmdlet.MyInvocation.BoundParameters['Password'] = Encrypt-Value -UnsecureString $Password__Unsecure;
            }
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('RefreshToken'))
            {
                $RefreshToken__Unsecure = [System.Net.NetworkCredential]::new('', $PSCmdlet.MyInvocation.BoundParameters['RefreshToken']).Password;
                $PSCmdlet.MyInvocation.BoundParameters['RefreshToken'] = Encrypt-Value -UnsecureString $RefreshToken__Unsecure;
            }
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('SmtpPassword'))
            {
                $SmtpPassword__Unsecure = [System.Net.NetworkCredential]::new('', $PSCmdlet.MyInvocation.BoundParameters['SmtpPassword']).Password;
                $PSCmdlet.MyInvocation.BoundParameters['SmtpPassword'] = Encrypt-Value -UnsecureString $SmtpPassword__Unsecure;
            }
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-SyncRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-TeamsProtectionPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${AdminDisplayName},

    [string]
    ${HighConfidencePhishQuarantineTag},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string]
    ${MalwareQuarantineTag},

    [bool]
    ${ZapEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-TeamsProtectionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-TeamsProtectionPolicyRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${Comments},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-TeamsProtectionPolicyRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-TenantAllowBlockListItems
{
    [CmdletBinding(DefaultParameterSetName='Ids')]
    param(
    
    [switch]
    ${Allow},

    [switch]
    ${Block},

    [Parameter(ParameterSetName='Entries', Mandatory=$true)]
    [string[]]
    ${Entries},

    [datetime]
    ${ExpirationDate},

    [Parameter(ParameterSetName='Ids', Mandatory=$true)]
    [string[]]
    ${Ids},

    ${ListSubType},

    [Parameter(Mandatory=$true)]
    ${ListType},

    [switch]
    ${NoExpiration},

    [string]
    ${Notes},

    [switch]
    ${OutputJson},

    [int]
    ${RemoveAfter}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Set-TenantAllowBlockListItems' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-TenantAllowBlockListSpoofItems
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${Action},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${Ids}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-TenantAllowBlockListSpoofItems' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Set-TenantSettingCrossTenantAccessPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='UpsertParamSet', Mandatory=$true)]
    [Parameter(ParameterSetName='DeleteActionParamSet')]
    [string]
    ${Value}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-TenantSettingCrossTenantAccessPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Set-TransportConfig
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${AddressBookPolicyRoutingEnabled},

    ${AllowLegacyTLSClients},

    [bool]
    ${ClearCategories},

    [bool]
    ${ConvertDisclaimerWrapperToEml},

    ${DSNConversionMode},

    [bool]
    ${ExternalDelayDsnEnabled},

    [cultureinfo]
    ${ExternalDsnDefaultLanguage},

    [bool]
    ${ExternalDsnLanguageDetectionEnabled},

    ${ExternalDsnReportingAuthority},

    [bool]
    ${ExternalDsnSendHtml},

    ${ExternalPostmasterAddress},

    [switch]
    ${Force},

    ${HeaderPromotionModeSetting},

    [bool]
    ${InternalDelayDsnEnabled},

    [cultureinfo]
    ${InternalDsnDefaultLanguage},

    [bool]
    ${InternalDsnLanguageDetectionEnabled},

    ${InternalDsnReportingAuthority},

    [bool]
    ${InternalDsnSendHtml},

    ${JournalingReportNdrTo},

    [int]
    ${JournalMessageExpirationDays},

    ${MaxRecipientEnvelopeLimit},

    ${MessageExpiration},

    [int]
    ${ReplyAllStormBlockDurationHours},

    [int]
    ${ReplyAllStormDetectionMinimumRecipients},

    [int]
    ${ReplyAllStormDetectionMinimumReplies},

    [bool]
    ${ReplyAllStormProtectionEnabled},

    [bool]
    ${Rfc2231EncodingEnabled},

    [bool]
    ${SmtpClientAuthenticationDisabled},

    [bool]
    ${VoicemailJournalingEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-TransportConfig' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Set-TransportRule
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${ActivationDate},

    ${AdComparisonAttribute},

    ${AdComparisonOperator},

    ${AddManagerAsRecipientType},

    [System.Object[]]
    ${AddToRecipients},

    [System.Object[]]
    ${AnyOfCcHeader},

    [System.Object[]]
    ${AnyOfCcHeaderMemberOf},

    [System.Object[]]
    ${AnyOfRecipientAddressContainsWords},

    [System.Object[]]
    ${AnyOfRecipientAddressMatchesPatterns},

    [System.Object[]]
    ${AnyOfToCcHeader},

    [System.Object[]]
    ${AnyOfToCcHeaderMemberOf},

    [System.Object[]]
    ${AnyOfToHeader},

    [System.Object[]]
    ${AnyOfToHeaderMemberOf},

    [string]
    ${ApplyClassification},

    ${ApplyHtmlDisclaimerFallbackAction},

    ${ApplyHtmlDisclaimerLocation},

    ${ApplyHtmlDisclaimerText},

    [bool]
    ${ApplyOME},

    ${ApplyRightsProtectionCustomizationTemplate},

    ${ApplyRightsProtectionTemplate},

    [System.Object[]]
    ${AttachmentContainsWords},

    [System.Object[]]
    ${AttachmentExtensionMatchesWords},

    [bool]
    ${AttachmentHasExecutableContent},

    [bool]
    ${AttachmentIsPasswordProtected},

    [bool]
    ${AttachmentIsUnsupported},

    [System.Object[]]
    ${AttachmentMatchesPatterns},

    [System.Object[]]
    ${AttachmentNameMatchesPatterns},

    [bool]
    ${AttachmentProcessingLimitExceeded},

    [System.Object[]]
    ${AttachmentPropertyContainsWords},

    ${AttachmentSizeOver},

    [System.Object[]]
    ${BetweenMemberOf1},

    [System.Object[]]
    ${BetweenMemberOf2},

    [System.Object[]]
    ${BlindCopyTo},

    [string]
    ${Comments},

    [System.Object[]]
    ${ContentCharacterSetContainsWords},

    [System.Object[]]
    ${CopyTo},

    [bool]
    ${DeleteMessage},

    [bool]
    ${Disconnect},

    [string]
    ${DlpPolicy},

    ${ExceptIfAdComparisonAttribute},

    ${ExceptIfAdComparisonOperator},

    [System.Object[]]
    ${ExceptIfAnyOfCcHeader},

    [System.Object[]]
    ${ExceptIfAnyOfCcHeaderMemberOf},

    [System.Object[]]
    ${ExceptIfAnyOfRecipientAddressContainsWords},

    [System.Object[]]
    ${ExceptIfAnyOfRecipientAddressMatchesPatterns},

    [System.Object[]]
    ${ExceptIfAnyOfToCcHeader},

    [System.Object[]]
    ${ExceptIfAnyOfToCcHeaderMemberOf},

    [System.Object[]]
    ${ExceptIfAnyOfToHeader},

    [System.Object[]]
    ${ExceptIfAnyOfToHeaderMemberOf},

    [System.Object[]]
    ${ExceptIfAttachmentContainsWords},

    [System.Object[]]
    ${ExceptIfAttachmentExtensionMatchesWords},

    [bool]
    ${ExceptIfAttachmentHasExecutableContent},

    [bool]
    ${ExceptIfAttachmentIsPasswordProtected},

    [bool]
    ${ExceptIfAttachmentIsUnsupported},

    [System.Object[]]
    ${ExceptIfAttachmentMatchesPatterns},

    [System.Object[]]
    ${ExceptIfAttachmentNameMatchesPatterns},

    [bool]
    ${ExceptIfAttachmentProcessingLimitExceeded},

    [System.Object[]]
    ${ExceptIfAttachmentPropertyContainsWords},

    ${ExceptIfAttachmentSizeOver},

    [System.Object[]]
    ${ExceptIfBetweenMemberOf1},

    [System.Object[]]
    ${ExceptIfBetweenMemberOf2},

    [System.Object[]]
    ${ExceptIfContentCharacterSetContainsWords},

    [System.Object[]]
    ${ExceptIfFrom},

    [System.Object[]]
    ${ExceptIfFromAddressContainsWords},

    [System.Object[]]
    ${ExceptIfFromAddressMatchesPatterns},

    [System.Object[]]
    ${ExceptIfFromMemberOf},

    ${ExceptIfFromScope},

    [string]
    ${ExceptIfHasClassification},

    [bool]
    ${ExceptIfHasNoClassification},

    [bool]
    ${ExceptIfHasSenderOverride},

    ${ExceptIfHeaderContainsMessageHeader},

    [System.Object[]]
    ${ExceptIfHeaderContainsWords},

    ${ExceptIfHeaderMatchesMessageHeader},

    [System.Object[]]
    ${ExceptIfHeaderMatchesPatterns},

    [System.Object[]]
    ${ExceptIfManagerAddresses},

    ${ExceptIfManagerForEvaluatedUser},

    [hashtable[]]
    ${ExceptIfMessageContainsDataClassifications},

    ${ExceptIfMessageSizeOver},

    ${ExceptIfMessageTypeMatches},

    [System.Object[]]
    ${ExceptIfRecipientADAttributeContainsWords},

    [System.Object[]]
    ${ExceptIfRecipientADAttributeMatchesPatterns},

    [System.Object[]]
    ${ExceptIfRecipientAddressContainsWords},

    [System.Object[]]
    ${ExceptIfRecipientAddressMatchesPatterns},

    [System.Object[]]
    ${ExceptIfRecipientDomainIs},

    [System.Object[]]
    ${ExceptIfRecipientInSenderList},

    ${ExceptIfSCLOver},

    [System.Object[]]
    ${ExceptIfSenderADAttributeContainsWords},

    [System.Object[]]
    ${ExceptIfSenderADAttributeMatchesPatterns},

    [System.Object[]]
    ${ExceptIfSenderDomainIs},

    [System.Object[]]
    ${ExceptIfSenderInRecipientList},

    ${ExceptIfSenderIpRanges},

    ${ExceptIfSenderManagementRelationship},

    [System.Object[]]
    ${ExceptIfSentTo},

    [System.Object[]]
    ${ExceptIfSentToMemberOf},

    ${ExceptIfSentToScope},

    [System.Object[]]
    ${ExceptIfSubjectContainsWords},

    [System.Object[]]
    ${ExceptIfSubjectMatchesPatterns},

    [System.Object[]]
    ${ExceptIfSubjectOrBodyContainsWords},

    [System.Object[]]
    ${ExceptIfSubjectOrBodyMatchesPatterns},

    ${ExceptIfWithImportance},

    ${ExpiryDate},

    [System.Object[]]
    ${From},

    [System.Object[]]
    ${FromAddressContainsWords},

    [System.Object[]]
    ${FromAddressMatchesPatterns},

    [System.Object[]]
    ${FromMemberOf},

    ${FromScope},

    ${GenerateIncidentReport},

    ${GenerateNotification},

    [string]
    ${HasClassification},

    [bool]
    ${HasNoClassification},

    [bool]
    ${HasSenderOverride},

    ${HeaderContainsMessageHeader},

    [System.Object[]]
    ${HeaderContainsWords},

    ${HeaderMatchesMessageHeader},

    [System.Object[]]
    ${HeaderMatchesPatterns},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [System.Object[]]
    ${IncidentReportContent},

    ${LogEventText},

    [System.Object[]]
    ${ManagerAddresses},

    ${ManagerForEvaluatedUser},

    [hashtable[]]
    ${MessageContainsDataClassifications},

    ${MessageSizeOver},

    ${MessageTypeMatches},

    ${Mode},

    [bool]
    ${ModerateMessageByManager},

    [System.Object[]]
    ${ModerateMessageByUser},

    [string]
    ${Name},

    ${NotifySender},

    ${PrependSubject},

    [int]
    ${Priority},

    [bool]
    ${Quarantine},

    [System.Object[]]
    ${RecipientADAttributeContainsWords},

    [System.Object[]]
    ${RecipientADAttributeMatchesPatterns},

    [System.Object[]]
    ${RecipientAddressContainsWords},

    [System.Object[]]
    ${RecipientAddressMatchesPatterns},

    ${RecipientAddressType},

    [System.Object[]]
    ${RecipientDomainIs},

    [System.Object[]]
    ${RecipientInSenderList},

    [System.Object[]]
    ${RedirectMessageTo},

    ${RejectMessageEnhancedStatusCode},

    ${RejectMessageReasonText},

    ${RemoveHeader},

    [bool]
    ${RemoveOME},

    [bool]
    ${RemoveOMEv2},

    [bool]
    ${RemoveRMSAttachmentEncryption},

    ${RouteMessageOutboundConnector},

    [bool]
    ${RouteMessageOutboundRequireTls},

    ${RuleErrorAction},

    ${RuleSubType},

    ${SCLOver},

    [System.Object[]]
    ${SenderADAttributeContainsWords},

    [System.Object[]]
    ${SenderADAttributeMatchesPatterns},

    ${SenderAddressLocation},

    [System.Object[]]
    ${SenderDomainIs},

    [System.Object[]]
    ${SenderInRecipientList},

    ${SenderIpRanges},

    ${SenderManagementRelationship},

    [System.Object[]]
    ${SentTo},

    [System.Object[]]
    ${SentToMemberOf},

    ${SentToScope},

    [string]
    ${SetAuditSeverity},

    ${SetHeaderName},

    ${SetHeaderValue},

    ${SetSCL},

    ${SmtpRejectMessageRejectStatusCode},

    ${SmtpRejectMessageRejectText},

    [bool]
    ${StopRuleProcessing},

    [System.Object[]]
    ${SubjectContainsWords},

    [System.Object[]]
    ${SubjectMatchesPatterns},

    [System.Object[]]
    ${SubjectOrBodyContainsWords},

    [System.Object[]]
    ${SubjectOrBodyMatchesPatterns},

    ${WithImportance}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-TransportRule' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-UnifiedAuditSetting
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-UnifiedAuditSetting' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-UnifiedGroup
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${AcceptMessagesOnlyFromSendersOrMembers},

    [ValidateNotNullOrEmpty()]
    ${AccessType},

    [string]
    ${Alias},

    [switch]
    ${AlwaysSubscribeMembersToCalendarEvents},

    [ValidateNotNullOrEmpty()]
    ${AuditLogAgeLimit},

    [switch]
    ${AutoSubscribeNewMembers},

    [switch]
    ${CalendarMemberReadOnly},

    [string]
    ${Classification},

    [switch]
    ${ConnectorsEnabled},

    [string]
    ${CustomAttribute1},

    [string]
    ${CustomAttribute10},

    [string]
    ${CustomAttribute11},

    [string]
    ${CustomAttribute12},

    [string]
    ${CustomAttribute13},

    [string]
    ${CustomAttribute14},

    [string]
    ${CustomAttribute15},

    [string]
    ${CustomAttribute2},

    [string]
    ${CustomAttribute3},

    [string]
    ${CustomAttribute4},

    [string]
    ${CustomAttribute5},

    [string]
    ${CustomAttribute6},

    [string]
    ${CustomAttribute7},

    [string]
    ${CustomAttribute8},

    [string]
    ${CustomAttribute9},

    ${DataEncryptionPolicy},

    [string]
    ${DisplayName},

    ${EmailAddresses},

    ${ExtensionCustomAttribute1},

    ${ExtensionCustomAttribute2},

    ${ExtensionCustomAttribute3},

    ${ExtensionCustomAttribute4},

    ${ExtensionCustomAttribute5},

    [switch]
    ${ForceUpgrade},

    ${GrantSendOnBehalfTo},

    [bool]
    ${HiddenFromAddressListsEnabled},

    [switch]
    ${HiddenFromExchangeClientsEnabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${InformationBarrierMode},

    ${IsMemberAllowedToEditContent},

    [cultureinfo]
    ${Language},

    [string]
    ${MailboxRegion},

    [string]
    ${MailTip},

    ${MailTipTranslations},

    ${MaxReceiveSize},

    ${MaxSendSize},

    ${ModeratedBy},

    [bool]
    ${ModerationEnabled},

    [string]
    ${Notes},

    ${PrimarySmtpAddress},

    ${RejectMessagesFromSendersOrMembers},

    [bool]
    ${RequireSenderAuthenticationEnabled},

    ${SensitivityLabelId},

    [switch]
    ${SubscriptionEnabled},

    [switch]
    ${UnifiedGroupWelcomeMessageEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-UnifiedGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Set-User
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [string]
    ${AssistantName},

    ${AuthenticationPolicy},

    [bool]
    ${BlockCloudCache},

    [bool]
    ${CanHaveCloudCache},

    [string]
    ${City},

    [switch]
    ${ClearDataEncryptionPolicy},

    [string]
    ${Company},

    ${CountryOrRegion},

    [string]
    ${Department},

    [AllowNull()]
    ${DesiredWorkloads},

    [string]
    ${DisplayName},

    [bool]
    ${EXOModuleEnabled},

    [string]
    ${Fax},

    [string]
    ${FirstName},

    [switch]
    ${Force},

    ${GeoCoordinates},

    [string]
    ${HomePhone},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [string]
    ${Initials},

    [bool]
    ${IsShadowMailbox},

    [string]
    ${LastName},

    [string]
    ${MailboxRegion},

    ${MailboxRegionSuffix},

    ${ManagedOnboardingType},

    ${Manager},

    [string]
    ${MobilePhone},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Name},

    [string]
    ${Notes},

    [string]
    ${Office},

    ${OtherFax},

    ${OtherHomePhone},

    ${OtherTelephone},

    [string]
    ${Pager},

    [switch]
    ${PermanentlyClearPreviousMailboxInfo},

    [string]
    ${Phone},

    [string]
    ${PhoneticDisplayName},

    [string]
    ${PostalCode},

    ${PostOfficeBox},

    [switch]
    ${PublicFolder},

    [bool]
    ${RemotePowerShellEnabled},

    [switch]
    ${RemoveMailboxProvisioningConstraint},

    [bool]
    ${ResetPasswordOnNextLogon},

    ${SeniorityIndex},

    [string]
    ${SimpleDisplayName},

    [string]
    ${StateOrProvince},

    [string]
    ${StreetAddress},

    ${StsRefreshTokensValidFrom},

    [string]
    ${Title},

    [bool]
    ${VIP},

    [string]
    ${WebPage},

    ${WindowsEmailAddress}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Set-User' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Start-AuditAssistant
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='AuditBacklogAssistant', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Start-AuditAssistant' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Start-HistoricalSearch
{
    [CmdletBinding()]
    param(
    
    [string]
    ${BlockStatus},

    [bool]
    ${CompressFile},

    [string]
    ${ConnectorType},

    [string]
    ${DeliveryStatus},

    ${Direction},

    ${DLPPolicy},

    [string]
    ${EncryptionTemplate},

    [string]
    ${EncryptionType},

    [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [datetime]
    ${EndDate},

    [cultureinfo]
    ${Locale},

    ${MessageID},

    ${NetworkMessageID},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    ${NotifyAddress},

    [string]
    ${OriginalClientIP},

    ${RecipientAddress},

    [Parameter(Mandatory=$true)]
    [string]
    ${ReportTitle},

    [Parameter(Mandatory=$true)]
    ${ReportType},

    ${SenderAddress},

    [string]
    ${SmtpSecurityError},

    [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [datetime]
    ${StartDate},

    [string]
    ${TLSUsed},

    ${TransportRule},

    [string]
    ${Url}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Start-HistoricalSearch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Start-ManagedFolderAssistant
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='ComplianceBoundaryAssistantParameterSet')]
    [switch]
    ${AdaptiveScope},

    [switch]
    ${AggMailboxCleanup},

    [Parameter(ParameterSetName='ElcB2DumpsterArchiverAssistantParameterSet')]
    [switch]
    ${B2DumpsterArchiver},

    [Parameter(ParameterSetName='ElcB2IPMArchiverAssistantParameterSet')]
    [switch]
    ${B2IPMArchiver},

    [Parameter(ParameterSetName='ComplianceJobAssistantParameterSet')]
    [switch]
    ${ComplianceJob},

    [Parameter(ParameterSetName='DataGovernanceAssistantParameterSet')]
    [switch]
    ${DataGovernance},

    [switch]
    ${FullCrawl},

    [Parameter(ParameterSetName='HoldCleanupParameterSet', Mandatory=$true)]
    [switch]
    ${HoldCleanup},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='HoldCleanupParameterSet', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='StopHoldCleanupParameterSet', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='ComplianceBoundaryAssistantParameterSet', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='ComplianceJobAssistantParameterSet', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='ElcB2DumpsterArchiverAssistantParameterSet', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='ElcB2IPMArchiverAssistantParameterSet', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='DataGovernanceAssistantParameterSet', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='DumpsterExpirationAssistantParameterSet', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='MailboxLifecycleAssistantParameterSet', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    ${Identity},

    [switch]
    ${InactiveMailbox},

    [Parameter(ParameterSetName='StopHoldCleanupParameterSet', Mandatory=$true)]
    [switch]
    ${StopHoldCleanup}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Start-ManagedFolderAssistant' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Start-MigrationBatch
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Partition}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Start-MigrationBatch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Start-MigrationUser
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Partition}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Start-MigrationUser' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Stop-HistoricalSearch
{
    [CmdletBinding()]
    param(
    
    [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [guid]
    ${JobId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Stop-HistoricalSearch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Stop-MigrationBatch
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Partition}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Stop-MigrationBatch' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Stop-MigrationUser
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${Partition}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Stop-MigrationUser' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Suspend-MailboxAnalysisRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Suspend-MailboxAnalysisRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Suspend-MailboxRestoreRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [ValidateLength(1, 4096)]
    [string]
    ${SuspendComment}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Suspend-MailboxRestoreRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Suspend-MoveRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    ${ProxyToMailbox},

    [ValidateNotNullOrEmpty()]
    [ValidateLength(1, 4096)]
    [string]
    ${SuspendComment}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Suspend-MoveRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Suspend-PublicFolderMailboxMigrationRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [ValidateLength(1, 4096)]
    [string]
    ${SuspendComment}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Suspend-PublicFolderMailboxMigrationRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Suspend-SyncRequest
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Suspend-SyncRequest' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Sync-CrossTenantAccessPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [bool]
    ${DeleteExistingPoliciesBeforeSync}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Sync-CrossTenantAccessPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Test-ApplicationAccessPolicy
{
    [CmdletBinding()]
    param(
    
    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${AppId},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Test-ApplicationAccessPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Test-ArchiveConnectivity
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${AllowCrossSite},

    [switch]
    ${IncludeArchiveMRMConfiguration},

    [string]
    ${MessageId},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    ${UserSmtp}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Test-ArchiveConnectivity' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

function script:Test-DatabaseEvent
{
    [CmdletBinding()]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${AssistantName},

    [Parameter(Mandatory=$true)]
    [ValidateRange(0, 9223372036854775807)]
    [long]
    ${Counter},

    ${DomainController},

    [ValidateSet('MSExchangeMailboxAssistants','MSExchangeSubmission','Microsoft.Exchange.Notifications.Broker','MSExchangeMailboxAssistantsOrchestrator')]
    [AllowNull()]
    [string]
    ${Process},

    [ValidateNotNullOrEmpty()]
    [string]
    ${RestItemFilter}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Test-DatabaseEvent' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Test-DataClassification
{
    [CmdletBinding()]
    param(
    
    [ValidateLength(1, 256)]
    [string[]]
    ${ClassificationNames},

    [string]
    ${FileExtension},

    [Parameter(ValueFromPipeline=$true)]
    [System.Object[]]
    ${TestTextExtractionResults},

    [string]
    ${TextToClassify}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Test-DataClassification' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Test-DataEncryptionPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Test-DataEncryptionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Test-InformationBarrierPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Test-InformationBarrierPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailControl-Help.xml
function script:Test-IRMConfiguration
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [ValidateNotNullOrEmpty()]
    [ValidateCount(1, 100)]
    [System.Object[]]
    ${Recipient},

    [switch]
    ${RMSOnline},

    ${Sender}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Test-IRMConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Test-M365DataAtRestEncryptionPolicy
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${DomainController},

    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Test-M365DataAtRestEncryptionPolicy' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

function script:Test-MailboxAssistant
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${AssistantName},

    ${DomainController},

    [ValidateSet('MSExchangeMailboxAssistants','MSExchangeMailboxAssistantsOrchestrator')]
    [AllowNull()]
    [string]
    ${Process},

    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${SoftDeletedMailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Test-MailboxAssistant' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Test-MAPIConnectivity
{
    [CmdletBinding(DefaultParameterSetName='Server', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity')]
    [switch]
    ${Archive},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Test-MAPIConnectivity' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ProvisioningAndMigration-Help.xml
function script:Test-MigrationServerAvailability
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='ExchangeOutlookAnywhere')]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhereAutoDiscover')]
    [Parameter(ParameterSetName='IMAP')]
    [switch]
    ${AcceptUntrustedCertificates},

    [Parameter(ParameterSetName='IMAP')]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhere')]
    [Parameter(ParameterSetName='PublicFolder')]
    [Parameter(ParameterSetName='LegacyPublicFolderToUnifiedGroup')]
    ${Authentication},

    [Parameter(ParameterSetName='ExchangeOutlookAnywhereAutoDiscover', Mandatory=$true)]
    [Parameter(ParameterSetName='ExchangeRemoteMoveAutoDiscover', Mandatory=$true)]
    [switch]
    ${Autodiscover},

    [Parameter(ParameterSetName='Compliance', Mandatory=$true)]
    [switch]
    ${Compliance},

    [Parameter(ParameterSetName='ExchangeOutlookAnywhere', Mandatory=$true)]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhereAutoDiscover', Mandatory=$true)]
    [Parameter(ParameterSetName='ExchangeRemoteMove')]
    [Parameter(ParameterSetName='ExchangeRemoteMoveAutoDiscover', Mandatory=$true)]
    [Parameter(ParameterSetName='PSTImport', Mandatory=$true)]
    [Parameter(ParameterSetName='PublicFolder', Mandatory=$true)]
    [Parameter(ParameterSetName='Compliance', Mandatory=$true)]
    [Parameter(ParameterSetName='MrsProxyPublicFolder', Mandatory=$true)]
    [Parameter(ParameterSetName='LegacyPublicFolderToUnifiedGroup', Mandatory=$true)]
    [Parameter(ParameterSetName='MrsProxyPublicFolderToUnifiedGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [pscredential]
    ${Credentials},

    [Parameter(ParameterSetName='Gmail')]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhere')]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhereAutoDiscover', Mandatory=$true)]
    [Parameter(ParameterSetName='ExchangeRemoteMoveAutoDiscover', Mandatory=$true)]
    ${EmailAddress},

    [Parameter(ParameterSetName='TestEndpoint', Mandatory=$true)]
    [ValidateNotNull()]
    ${Endpoint},

    [Parameter(ParameterSetName='ExchangeOutlookAnywhere', Mandatory=$true)]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhereAutoDiscover', Mandatory=$true)]
    [switch]
    ${ExchangeOutlookAnywhere},

    [Parameter(ParameterSetName='ExchangeRemoteMove', Mandatory=$true)]
    [Parameter(ParameterSetName='ExchangeRemoteMoveAutoDiscover', Mandatory=$true)]
    [switch]
    ${ExchangeRemoteMove},

    [Parameter(ParameterSetName='ExchangeOutlookAnywhere', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${ExchangeServer},

    [Parameter(ParameterSetName='PSTImport')]
    [string]
    ${FilePath},

    [Parameter(ParameterSetName='Gmail', Mandatory=$true)]
    [switch]
    ${Gmail},

    [Parameter(ParameterSetName='IMAP', Mandatory=$true)]
    [switch]
    ${Imap},

    [Parameter(ParameterSetName='ExchangeOutlookAnywhere')]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhereAutoDiscover')]
    ${MailboxPermission},

    ${Partition},

    [Parameter(ParameterSetName='IMAP', Mandatory=$true)]
    [int]
    ${Port},

    [Parameter(ParameterSetName='PublicFolder', Mandatory=$true)]
    [Parameter(ParameterSetName='MrsProxyPublicFolder', Mandatory=$true)]
    [switch]
    ${PublicFolder},

    [Parameter(ParameterSetName='PublicFolder', Mandatory=$true)]
    [Parameter(ParameterSetName='LegacyPublicFolderToUnifiedGroup', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${PublicFolderDatabaseServerLegacyDN},

    [Parameter(ParameterSetName='LegacyPublicFolderToUnifiedGroup', Mandatory=$true)]
    [Parameter(ParameterSetName='MrsProxyPublicFolderToUnifiedGroup', Mandatory=$true)]
    [switch]
    ${PublicFolderToUnifiedGroup},

    [Parameter(ParameterSetName='IMAP', Mandatory=$true)]
    [Parameter(ParameterSetName='ExchangeRemoteMove', Mandatory=$true)]
    [Parameter(ParameterSetName='PSTImport', Mandatory=$true)]
    [Parameter(ParameterSetName='Compliance')]
    [Parameter(ParameterSetName='MrsProxyPublicFolder', Mandatory=$true)]
    [Parameter(ParameterSetName='MrsProxyPublicFolderToUnifiedGroup', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${RemoteServer},

    [Parameter(ParameterSetName='ExchangeOutlookAnywhere', Mandatory=$true)]
    [Parameter(ParameterSetName='PublicFolder', Mandatory=$true)]
    [Parameter(ParameterSetName='LegacyPublicFolderToUnifiedGroup', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${RPCProxyServer},

    [Parameter(ParameterSetName='IMAP')]
    ${Security},

    [Parameter(ParameterSetName='Gmail', Mandatory=$true)]
    [ValidateNotNull()]
    [byte[]]
    ${ServiceAccountKeyFileData},

    [Parameter(ParameterSetName='ExchangeOutlookAnywhere')]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhereAutoDiscover')]
    [Parameter(ParameterSetName='PublicFolder', Mandatory=$true)]
    [Parameter(ParameterSetName='LegacyPublicFolderToUnifiedGroup', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourceMailboxLegacyDN},

    [Parameter(ParameterSetName='Gmail')]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhere')]
    [Parameter(ParameterSetName='ExchangeOutlookAnywhereAutoDiscover')]
    [Parameter(ParameterSetName='PublicFolder')]
    [Parameter(ParameterSetName='LegacyPublicFolderToUnifiedGroup')]
    [Parameter(ParameterSetName='MrsProxyPublicFolderToUnifiedGroup')]
    [Parameter(ParameterSetName='TestEndpoint')]
    [ValidateNotNull()]
    ${TestMailbox}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credentials'))
            {
                $Credentials__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credentials'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credentials'] = Encrypt-Value -UnsecureString $Credentials__Unsecure;
            }
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Test-MigrationServerAvailability' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Test-OAuthConnectivity
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${AppOnly},

    ${Mailbox},

    [switch]
    ${ReloadConfig},

    [Parameter(Mandatory=$true)]
    ${Service},

    [Parameter(Mandatory=$true)]
    [uri]
    ${TargetUri},

    [switch]
    ${UseCachedToken}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Test-OAuthConnectivity' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Test-OrganizationRelationship
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    ${UserIdentity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Test-OrganizationRelationship' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Test-ServicePrincipalAuthorization
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Resource}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Test-ServicePrincipalAuthorization' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:Test-StoreAdminConnectivity
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Test-StoreAdminConnectivity' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RemoteConnections-Help.xml
function script:Test-TextExtraction
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${DomainController},

    [Parameter(Mandatory=$true, Position=0)]
    [byte[]]
    ${FileData}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Test-TextExtraction' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Troubleshoot-AgendaMail
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Troubleshoot-AgendaMail' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Undo-SoftDeletedMailbox
{
    [CmdletBinding(DefaultParameterSetName='SoftDeletedMailbox', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='PublicFolder')]
    [Parameter(ParameterSetName='SoftDeletedMailbox')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='SoftDeletedMailbox')]
    [securestring]
    ${Password},

    [Parameter(ParameterSetName='PublicFolder', Mandatory=$true)]
    [switch]
    ${PublicFolder},

    [Parameter(ParameterSetName='PublicFolder', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='SoftDeletedMailbox', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    ${SoftDeletedObject},

    [Parameter(ParameterSetName='SoftDeletedMailbox')]
    ${WindowsLiveID}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Password'))
            {
                $Password__Unsecure = [System.Net.NetworkCredential]::new('', $PSCmdlet.MyInvocation.BoundParameters['Password']).Password;
                $PSCmdlet.MyInvocation.BoundParameters['Password'] = Encrypt-Value -UnsecureString $Password__Unsecure;
            }
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Undo-SoftDeletedMailbox' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Undo-SoftDeletedUnifiedGroup
{
    [CmdletBinding(DefaultParameterSetName='SoftDeletedMailbox', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='SoftDeletedMailbox', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    ${SoftDeletedObject}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Undo-SoftDeletedUnifiedGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Update-DistributionGroupMember
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ValueFromPipeline=$true)]
    ${Members}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Update-DistributionGroupMember' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Update-HybridConfiguration
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${ForceUpgrade},

    [pscredential]
    ${OnPremisesCredentials},

    [switch]
    ${SuppressOAuthWarning},

    [pscredential]
    ${TenantCredentials}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('OnPremisesCredentials'))
            {
                $OnPremisesCredentials__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['OnPremisesCredentials'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['OnPremisesCredentials'] = Encrypt-Value -UnsecureString $OnPremisesCredentials__Unsecure;
            }
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('TenantCredentials'))
            {
                $TenantCredentials__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['TenantCredentials'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['TenantCredentials'] = Encrypt-Value -UnsecureString $TenantCredentials__Unsecure;
            }
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Update-HybridConfiguration' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Update-MaskingIndex
{
    [CmdletBinding()]
    param(
    
    [ValidateCount(1, 25)]
    ${Add},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [ValidateCount(1, 25)]
    ${Remove}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Update-MaskingIndex' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.WebClient-Help.xml
function script:Update-PublicFolderMailbox
{
    [CmdletBinding(DefaultParameterSetName='InvokeMailboxAssistant', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(ParameterSetName='InvokeSingleFolderSynchronizer')]
    [switch]
    ${CreateAssociatedDumpster},

    [Parameter(ParameterSetName='InvokeSingleFolderSynchronizer', Mandatory=$true)]
    [Parameter(ParameterSetName='ReconcileSingleFolder', Mandatory=$true)]
    ${FolderId},

    [Parameter(ParameterSetName='InvokeSynchronizer')]
    [switch]
    ${ForceOnlineSync},

    [Parameter(ParameterSetName='InvokeSynchronizer')]
    [switch]
    ${FullSync},

    [Parameter(ParameterSetName='AutoSplit', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InvokeMailboxAssistant', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InvokeSynchronizer', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InvokeSingleFolderSynchronizer', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='ReconcileSingleFolder', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [Parameter(ParameterSetName='InvokeSynchronizer')]
    [Parameter(ParameterSetName='InvokeSingleFolderSynchronizer', Mandatory=$true)]
    [Parameter(ParameterSetName='ReconcileSingleFolder', Mandatory=$true)]
    [switch]
    ${InvokeSynchronizer},

    [Parameter(ParameterSetName='InvokeSynchronizer')]
    [Parameter(ParameterSetName='ReconcileSingleFolder', Mandatory=$true)]
    [switch]
    ${ReconcileFolders},

    [Parameter(ParameterSetName='InvokeSynchronizer')]
    [switch]
    ${SuppressStatus}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Update-PublicFolderMailbox' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Update-Recipient
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [pscredential]
    ${Credential},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey('Credential'))
            {
                $Credential__Unsecure = $PSCmdlet.MyInvocation.BoundParameters['Credential'] | select UserName, @{ Name = 'Password'; Expression ={$_.GetNetworkCredential().Password} } | ConvertTo-Json -Compress;
                $PSCmdlet.MyInvocation.BoundParameters['Credential'] = Encrypt-Value -UnsecureString $Credential__Unsecure;
            }
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Update-Recipient' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RolesAndAccess-Help.xml
function script:Update-RoleGroupMember
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
    param(
    
    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [AllowNull()]
    ${Members}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 3
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Update-RoleGroupMember' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.CalendarsAndGroups-Help.xml
function script:Upgrade-DistributionGroup
{
    [CmdletBinding(DefaultParameterSetName='Default')]
    param(
    
    [string]
    ${ActionType},

    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    ${DlIdentities},

    ${ExecutingUser}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Upgrade-DistributionGroup' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Validate-OutboundConnector
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    ${Identity},

    [Parameter(Mandatory=$true)]
    ${Recipients}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Validate-OutboundConnector' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.TransportMailflow-Help.xml
function script:Validate-RetentionRuleQuery
{
    [CmdletBinding()]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${KqlQueryString}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Validate-RetentionRuleQuery' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.RecordsandEdge-Help.xml
function script:Write-AdminAuditLog
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [Parameter(Mandatory=$true)]
    [string]
    ${Comment}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Write-AdminAuditLog' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.ServerStatus-Help.xml
function script:set-CASMailboxPlan
{
    [CmdletBinding(DefaultParameterSetName='Identity', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [bool]
    ${ActiveSyncEnabled},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    ${Identity},

    [bool]
    ${ImapEnabled},

    ${OwaMailboxPolicy},

    [bool]
    ${PopEnabled}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'set-CASMailboxPlan' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.Management-Help.xml
function script:Get-Clutter
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNullOrEmpty()]
    ${Identity},

    [switch]
    ${UseCustomRouting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$false -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-Clutter' -Parameters $PSBoundParameters -ParameterBasedRoutingHintDelegate Get-MailboxIDBasedRoutingHint -ParameterBasedRoutingHintParameterValue $Identity -UseParameterBasedRouting (Should-UseCustomRoutingHint $UseCustomRouting.IsPresent) -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

function script:Get-ExportedCustomerContent
{
    [CmdletBinding()]
    param(
    
    [Parameter(Mandatory=$true, HelpMessage='The id of the DSR issued in the admin portal')]
    [guid]
    ${RequestId}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-ExportedCustomerContent' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.Management-Help.xml
function script:Get-FocusedInbox
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    [Parameter(ParameterSetName='Identity', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNullOrEmpty()]
    ${Identity},

    [switch]
    ${UseCustomRouting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$false -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Get-FocusedInbox' -Parameters $PSBoundParameters -ParameterBasedRoutingHintDelegate Get-MailboxIDBasedRoutingHint -ParameterBasedRoutingHintParameterValue $Identity -UseParameterBasedRouting (Should-UseCustomRoutingHint $UseCustomRouting.IsPresent) -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.Management-Help.xml
function script:Set-Clutter
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    ${Enable},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNullOrEmpty()]
    ${Identity},

    [switch]
    ${UseCustomRouting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$false -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Set-Clutter' -Parameters $PSBoundParameters -ParameterBasedRoutingHintDelegate Get-MailboxIDBasedRoutingHint -ParameterBasedRoutingHintParameterValue $Identity -UseParameterBasedRouting (Should-UseCustomRoutingHint $UseCustomRouting.IsPresent) -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.Management-Help.xml
function script:Set-FocusedInbox
{
    [CmdletBinding(DefaultParameterSetName='Identity')]
    param(
    
    ${FocusedInboxOn},

    [Parameter(ParameterSetName='Identity', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNullOrEmpty()]
    ${Identity},

    [switch]
    ${UseCustomRouting}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$false -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            Execute-Command -CmdletName 'Set-FocusedInbox' -Parameters $PSBoundParameters -ParameterBasedRoutingHintDelegate Get-MailboxIDBasedRoutingHint -ParameterBasedRoutingHintParameterValue $Identity -UseParameterBasedRouting (Should-UseCustomRoutingHint $UseCustomRouting.IsPresent) -CmdletRequestId $CmdletRequestId 
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.Management-Help.xml
function script:Test-DlpPolicies
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    ${ExecutionMode},

    [string]
    ${FileUniqueId},

    [string]
    ${FileUrl},

    ${SendReportTo},

    [string]
    ${SiteId},

    [string]
    ${Workload}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Test-DlpPolicies' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

# .ExternalHelp Microsoft.Exchange.Management-Help.xml
function script:Test-Message
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param(
    
    [switch]
    ${Force},

    [Parameter(ParameterSetName='TransportRules')]
    [Parameter(ParameterSetName='UnifiedDLPRules')]
    [byte[]]
    ${MessageFileData},

    [Parameter(ParameterSetName='TransportRules', Mandatory=$true)]
    [Parameter(ParameterSetName='UnifiedDLPRules', Mandatory=$true)]
    ${Recipients},

    [Parameter(ParameterSetName='TransportRules')]
    [Parameter(ParameterSetName='UnifiedDLPRules')]
    ${Sender},

    [Parameter(ParameterSetName='TransportRules', Mandatory=$true)]
    [Parameter(ParameterSetName='UnifiedDLPRules', Mandatory=$true)]
    ${SendReportTo},

    [Parameter(ParameterSetName='TransportRules', Mandatory=$true)]
    [switch]
    ${TransportRules},

    [Parameter(ParameterSetName='UnifiedDLPRules', Mandatory=$true)]
    [Parameter(ParameterSetName='TransportRules')]
    [switch]
    ${UnifiedDLPRules}
    )
    Begin {
        $CmdletRequestId, $cmdletRequestIdGeneratedInBegin, $cmdletIDList = Init-CmdletBegin -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
                $UseBatching, $BatchBodyObj, $BatchRequestParameters = Execute-CmdletBatchingBeginBody -EnableBatchingStatus:$true -ExpectingInput $PSCmdlet.MyInvocation.ExpectingInput
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

    }
    Process {      
        $cmdletRequestIdGeneratedInBegin, $cmdletRequestIdGeneratedInProcess, $CmdletRequestId, $cmdletIDList = Init-CmdletProcess -CmdletRequestIdGeneratedInBegin $cmdletRequestIdGeneratedInBegin -UseBatching $UseBatching -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList -CmdletParameters $MyInvocation.BoundParameters -CmdletName $MyInvocation.MyCommand.Name

        try
        {
            
            $ShowConfirmPrompt = $false
            $cmdletConfirmImpactValue = 2
            if ($ConfirmPreference -ne $null -and $ConfirmPreference.Value__ -gt 0 -and $ConfirmPreference.Value__ -le $cmdletConfirmImpactValue)
            {
                $ShowConfirmPrompt = $true
            }
    
            Execute-Command -CmdletName 'Test-Message' -Parameters $PSBoundParameters -CmdletRequestId $CmdletRequestId -ShowConfirmPrompt $ShowConfirmPrompt -PSCmdletObject $PSCmdlet
        }
        catch
        {
            Commit-CmdletLogOnError -CmdletRequestId $CmdletRequestId -ErrorRecord $_
            $global:EXO_LastExecutionStatus = $false;
            throw $_
        }

        finally
        {
            Log-EndTimeInCmdletProcessBlock -UseBatching $UseBatching -CmdletRequestId $CmdletRequestId
        }

    }
    End {
        Execute-CmdletEndBlock -BatchBodyObj $BatchBodyObj -CmdletRequestId $CmdletRequestId -CmdletIDList $cmdletIDList
    }
}

$HelpFileNames = @('Microsoft.Exchange.CalendarsAndGroups-Help.xml','Microsoft.Exchange.RolesAndAccess-Help.xml','Microsoft.Exchange.WebClient-Help.xml','Microsoft.Exchange.ProvisioningAndMigration-Help.xml','Microsoft.Exchange.MediaAndDevices-Help.xml','Microsoft.Exchange.RemoteConnections-Help.xml','Microsoft.Exchange.ServerStatus-Help.xml','Microsoft.Exchange.TransportMailflow-Help.xml','Microsoft.Exchange.TransportMailControl-Help.xml','Microsoft.Exchange.RecordsandEdge-Help.xml','Microsoft.Exchange.Management-Help.xml')
$PublicKey = '<RSAKeyValue><Modulus>31yPXtYRltEiVLHXaiF3nNtXPBqfNd0YNioi9HwVBOv9CPJhVpDE7sfszHZ0W9uHQP3kZE63zn8Dr/zXknMWuECGuqYOM170R1dc6FTybvkWYK4uFMuwnnNFfKYrhXTGINSfwvYglhaYuBhQIk3fn4hStf5qBA4Pt8BQyhZmMvov/gMh10yCbWDMi7MuXs7XoIBycTreQ7w2knCIrTD7sqtCzIxpowBhP0FyorIVwr+dQNSPhYfxbSlY2k2RrSmva6xgowDdzesUK1p6Y+jZ3PlSB9CuapaCDLMOGyc2tXMEtSjK+RW8k/8rtTLXaOWvMvfdMbF47S5TzkppcRhYTQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>'
##############################################################################
Export-ModuleMember -Function @("Add-AvailabilityAddressSpace", "Add-DistributionGroupMember", "Add-MailboxFolderPermission", "Add-MailboxLocation", "Add-MailboxPermission", "Add-ManagementRoleEntry", "Add-PublicFolderClientPermission", "Add-RecipientPermission", "Add-RoleGroupMember", "Add-UnifiedGroupLinks", "Approve-ElevatedAccessRequest", "Check-ExoInformationBarrierSymmetry", "Clear-ActiveSyncDevice", "Clear-MobileDevice", "Complete-MigrationBatch", "Debug-AdditionalCapacityProtection", "Delete-QuarantineMessage", "Deny-ElevatedAccessRequest", "Disable-AntiPhishRule", "Disable-App", "Disable-ATPEvaluationRule", "Disable-ATPProtectionPolicyRule", "Disable-BirthdayCalendar", "Disable-DnssecForVerifiedDomain", "Disable-ElevatedAccessControl", "Disable-EOPProtectionPolicyRule", "Disable-HostedContentFilterRule", "Disable-HostedOutboundSpamFilterRule", "Disable-InboxRule", "Disable-JournalArchiving", "disable-journalrule", "disable-Mailbox", "Disable-MailPublicFolder", "Disable-MalwareFilterRule", "Disable-OutlookProtectionRule", "Disable-ReportSubmissionRule", "Disable-SafeAttachmentRule", "Disable-SafeLinksRule", "Disable-SmtpDaneInbound", "Disable-SweepRule", "Disable-TransportRule", "Enable-AntiPhishRule", "Enable-App", "Enable-ATPEvaluationRule", "Enable-ATPProtectionPolicyRule", "Enable-BirthdayCalendar", "Enable-DnssecForVerifiedDomain", "Enable-ElevatedAccessControl", "Enable-EOPProtectionPolicyRule", "Enable-ExoInformationBarriersMultiSegment", "Enable-HostedContentFilterRule", "Enable-HostedOutboundSpamFilterRule", "Enable-InboxRule", "enable-journalrule", "enable-Mailbox", "Enable-MailPublicFolder", "Enable-MalwareFilterRule", "Enable-OrganizationCustomization", "Enable-OutlookProtectionRule", "Enable-ReportSubmissionRule", "Enable-SafeAttachmentRule", "Enable-SafeLinksRule", "Enable-SmtpDaneInbound", "Enable-SweepRule", "Enable-TransportRule", "Export-ApplicationData", "Export-DlpPolicyCollection", "Export-MailboxDiagnosticLogs", "Export-MigrationReport", "Export-QuarantineMessage", "Export-TransportRuleCollection", "Get-AcceptedDomain", "Get-AccessToCustomerDataRequest", "Get-ActiveSyncDevice", "Get-ActiveSyncDeviceAccessRule", "Get-ActiveSyncDeviceClass", "Get-ActiveSyncDeviceStatistics", "get-ActiveSyncMailboxPolicy", "Get-ActiveSyncOrganizationSettings", "Get-AdaptiveScope", "Get-AddressBookPolicy", "Get-AdminAuditLogConfig", "Get-AdministrativeUnit", "Get-AggregateZapReport", "Get-AntiPhishPolicy", "Get-AntiPhishRule", "Get-App", "Get-ApplicationAccessPolicy", "Get-ArcConfig", "Get-ATPBuiltInProtectionRule", "Get-ATPEvaluationRule", "Get-AtpPolicyForO365", "Get-ATPProtectionPolicyRule", "Get-ATPTotalTrafficReport", "Get-AuditConfig", "Get-AuditConfigurationPolicy", "Get-AuditConfigurationRule", "Get-AuditLogSearch", "Get-AuthenticationPolicy", "Get-AuthServer", "Get-AvailabilityAddressSpace", "Get-AvailabilityConfig", "Get-BlockedConnector", "Get-BlockedSenderAddress", "Get-BookingMailbox", "Get-CalendarDiagnosticAnalysis", "Get-CalendarDiagnosticLog", "Get-CalendarDiagnosticObjects", "Get-CalendarProcessing", "Get-CalendarSettings", "Get-CalendarViewDiagnostics", "Get-CASMailbox", "Get-CASMailboxPlan", "Get-ClassificationRuleCollection", "Get-CompliancePolicyFileSyncNotification", "Get-CompliancePolicySyncNotification", "Get-ComplianceTag", "Get-ComplianceTagStorage", "Get-CompromisedUserAggregateReport", "Get-CompromisedUserDetailReport", "Get-ConfigAnalyzerPolicyRecommendation", "Get-Contact", "Get-ContentMalwareMdoAggregateReport", "Get-ContentMalwareMdoDetailReport", "Get-CrossTenantAccessPolicy", "Get-CustomDlpEmailTemplates", "Get-CustomizedUserSubmission", "Get-DataClassification", "Get-DataClassificationConfig", "Get-DataEncryptionPolicy", "Get-DataRetentionReport", "Get-DetailZapReport", "Get-DeviceComplianceDetailsReport", "Get-DeviceComplianceDetailsReportFilter", "Get-DeviceCompliancePolicyInventory", "Get-DeviceComplianceReportDate", "Get-DeviceComplianceSummaryReport", "Get-DeviceComplianceUserInventory", "Get-DeviceComplianceUserReport", "Get-DeviceConditionalAccessPolicy", "Get-DeviceConditionalAccessRule", "Get-DeviceConfigurationPolicy", "Get-DeviceConfigurationRule", "Get-DevicePolicy", "Get-DeviceTenantPolicy", "Get-DeviceTenantRule", "Get-DistributionGroup", "Get-DistributionGroupMember", "Get-DkimSigningConfig", "Get-DlpDetailReport", "Get-DlpDetectionsReport", "Get-DlpIncidentDetailReport", "Get-DlpKeywordDictionary", "Get-DlpPolicy", "Get-DlpPolicyTemplate", "Get-DlpSensitiveInformationTypeConfig", "Get-DlpSensitiveInformationTypeRulePackage", "Get-DlpSiDetectionsReport", "Get-DnssecStatusForVerifiedDomain", "Get-DynamicDistributionGroup", "Get-DynamicDistributionGroupMember", "Get-ElevatedAccessApprovalPolicy", "Get-ElevatedAccessAuthorization", "Get-ElevatedAccessRequest", "Get-EligibleDistributionGroupForMigration", "Get-EmailAddressPolicy", "Get-EmailTenantSettings", "Get-EOPProtectionPolicyRule", "Get-EtrLimits", "Get-EvaluationModeReport", "Get-EvaluationModeReportSeries", "Get-EventsFromEmailConfiguration", "Get-ExoConnectivityTableSnapshot", "Get-ExoInformationBarrierPolicy", "Get-ExoInformationBarrierRelationship", "Get-ExoInformationBarrierRelationshipTable", "Get-ExoInformationBarrierSegment", "Get-ExoInformationBarrierUpgradeImpact", "Get-ExoPhishSimOverrideRule", "Get-ExoRecipientsStatus", "Get-ExoSecOpsOverrideRule", "Get-ExoSegmentsSnapshot", "Get-ExoUsersByIBSegment", "Get-ExternalInOutlook", "Get-FailedContentIndexDocuments", "Get-FederationInformation", "Get-FederationTrust", "Get-FfoMigrationReport", "Get-Group", "Get-HistoricalSearch", "Get-HostedConnectionFilterPolicy", "Get-HostedContentFilterPolicy", "Get-HostedContentFilterRule", "Get-HostedOutboundSpamFilterPolicy", "Get-HostedOutboundSpamFilterRule", "Get-HybridMailflowDatacenterIPs", "Get-InboundConnector", "Get-InboxRule", "Get-InformationBarrierReportDetails", "Get-InformationBarrierReportSummary", "Get-IntraOrganizationConfiguration", "Get-IntraOrganizationConnector", "Get-IRMConfiguration", "Get-JitConfiguration", "Get-JournalRule", "Get-LinkedUser", "Get-LogonStatistics", "Get-M365CrossTenantAccessPolicy", "Get-M365DataAtRestEncryptionPolicy", "Get-M365DataAtRestEncryptionPolicyAssignment", "Get-Mailbox", "Get-MailboxAnalysisRequest", "Get-MailboxAnalysisRequestStatistics", "Get-MailboxAuditBypassAssociation", "Get-MailboxAutoReplyConfiguration", "Get-MailboxCalendarConfiguration", "Get-MailboxCalendarFolder", "Get-MailboxExtendedProperty", "Get-MailboxFolderPermission", "Get-MailboxFolderStatistics", "Get-MailboxIRMAccess", "Get-MailboxJunkEmailConfiguration", "Get-MailboxLocation", "Get-MailboxMessageConfiguration", "Get-MailboxOverrideConfiguration", "Get-MailboxPermission", "Get-MailboxPlan", "Get-MailboxRegionalConfiguration", "Get-MailboxRestoreRequest", "Get-MailboxRestoreRequestStatistics", "Get-MailboxSearch", "Get-MailboxSpellingConfiguration", "Get-MailboxStatistics", "Get-MailboxUserConfiguration", "Get-MailContact", "Get-MailDetailATPReport", "Get-MailDetailDlpPolicyReport", "Get-MailDetailEncryptionReport", "Get-MailDetailEvaluationModeReport", "Get-MailDetailTransportRuleReport", "Get-MailFilterListReport", "Get-MailFlowStatusReport", "Get-MailPublicFolder", "Get-MailTrafficATPReport", "Get-MailTrafficEncryptionReport", "Get-MailTrafficPolicyReport", "Get-MailTrafficSummaryReport", "get-MailUser", "Get-MalwareFilterPolicy", "Get-MalwareFilterRule", "Get-ManagementRole", "Get-ManagementRoleAssignment", "Get-ManagementRoleEntry", "Get-ManagementScope", "Get-MessageCategory", "Get-MessageClassification", "Get-MessageTrace", "Get-MessageTraceDetail", "Get-MessageTraceDetailV2", "Get-MessageTraceV2", "Get-MessageTrackingReport", "Get-MigrationBatch", "Get-MigrationConfig", "Get-MigrationEndpoint", "Get-MigrationStatistics", "Get-MigrationUser", "Get-MigrationUserStatistics", "Get-MobileDevice", "Get-MobileDeviceDashboardSummaryReport", "get-MobileDeviceMailboxPolicy", "Get-MobileDeviceStatistics", "Get-MoveRequest", "Get-MoveRequestStatistics", "Get-MxRecordReport", "Get-MxRecordsReport", "Get-Notification", "Get-OMEConfiguration", "Get-OnlineMeetingConfiguration", "Get-OnPremisesOrganization", "Get-OnPremServerExemptionQuota", "Get-OnPremServerReportInfo", "Get-OrganizationalUnit", "Get-OrganizationConfig", "Get-OrganizationRelationship", "Get-OutboundConnector", "Get-OutboundConnectorReport", "Get-OutlookProtectionRule", "Get-OwaMailboxPolicy", "Get-PartnerApplication", "Get-PerimeterConfig", "Get-PerimeterMessageTrace", "Get-PhishSimOverridePolicy", "Get-PhishSimOverrideRule", "Get-Place", "Get-PolicyConfig", "Get-PolicyTipConfig", "Get-PublicFolder", "Get-PublicFolderClientPermission", "Get-PublicFolderItemStatistics", "Get-PublicFolderMailboxDiagnostics", "Get-PublicFolderMailboxMigrationRequest", "Get-PublicFolderMailboxMigrationRequestStatistics", "Get-PublicFolderMoveRequest", "Get-PublicFolderMoveRequestStatistics", "Get-PublicFolderStatistics", "Get-QuarantineMessage", "Get-QuarantineMessageHeader", "Get-QuarantinePolicy", "Get-RbacDiagnosticInfo", "Get-Recipient", "Get-RecipientPermission", "Get-RecipientStatisticsReport", "Get-RemoteDomain", "Get-ReportExecutionInstance", "Get-ReportSchedule", "Get-ReportScheduleList", "Get-ReportSubmissionPolicy", "Get-ReportSubmissionRule", "Get-ResourceConfig", "Get-RetentionEvent", "get-RetentionPolicy", "Get-RetentionPolicyTag", "Get-RMSTemplate", "Get-RoleAssignmentPolicy", "Get-RoleGroup", "Get-RoleGroupMember", "Get-SafeAttachmentPolicy", "Get-SafeAttachmentRule", "Get-SafeLinksAggregateReport", "Get-SafeLinksDetailReport", "Get-SafeLinksPolicy", "Get-SafeLinksRule", "Get-SCInsights", "Get-ScopeEntities", "Get-SearchDocumentFormat", "Get-SecOpsOverridePolicy", "Get-SecOpsOverrideRule", "Get-SecurityPrincipal", "Get-SensitivityLabelActivityDetailsReport", "Get-SensitivityLabelActivityReport", "Get-ServiceDeliveryReport", "Get-ServicePrincipal", "Get-ServiceStatus", "Get-SharingPolicy", "Get-SmimeConfig", "Get-SmtpDaneInboundStatus", "Get-SpoofIntelligenceInsight", "Get-SpoofMailReport", "Get-SupervisoryReviewActivity", "Get-SupervisoryReviewPolicyReport", "Get-SupervisoryReviewPolicyV2", "Get-SupervisoryReviewReport", "Get-SupervisoryReviewRule", "Get-SweepRule", "Get-SyncConfig", "Get-SyncRequest", "Get-SyncRequestStatistics", "Get-TDPReport", "Get-TeamsProtectionPolicy", "Get-TeamsProtectionPolicyRule", "Get-TenantAllowBlockListItems", "Get-TenantAllowBlockListSpoofItems", "Get-TenantExemptionInfo", "Get-TenantExemptionQuota", "Get-TenantExemptionQuotaEligibility", "Get-TenantScanRequestStatistics", "Get-TextMessagingAccount", "Get-ToolInformation", "Get-TransportConfig", "Get-TransportRule", "Get-TransportRuleAction", "Get-TransportRulePredicate", "Get-UnifiedAuditSetting", "Get-UnifiedGroup", "Get-UnifiedGroupLinks", "get-User", "Import-DlpPolicyCollection", "Import-RecipientDataProperty", "Import-TransportRuleCollection", "Invoke-BirthdayCalendarSync", "New-ActiveSyncDeviceAccessRule", "New-ActiveSyncMailboxPolicy", "New-AdminAuditLogSearch", "New-AntiPhishPolicy", "New-AntiPhishRule", "New-App", "New-ApplicationAccessPolicy", "New-ATPBuiltInProtectionRule", "New-ATPEvaluationRule", "New-ATPProtectionPolicyRule", "New-AuthenticationPolicy", "New-AvailabilityConfig", "New-ClassificationRuleCollection", "New-CompliancePolicySyncNotification", "New-DatabaseMaintenanceRequest", "New-DataClassification", "New-DataEncryptionPolicy", "New-DistributionGroup", "New-DkimSigningConfig", "New-DkimSigningConfigSelectorCnames", "New-DlpPolicy", "New-DynamicDistributionGroup", "New-ElevatedAccessApprovalPolicy", "New-ElevatedAccessRequest", "New-EmailAddressPolicy", "New-EOPProtectionPolicyRule", "New-ExoPhishSimOverrideRule", "New-ExoSecOpsOverrideRule", "New-Fingerprint", "New-HostedConnectionFilterPolicy", "New-HostedContentFilterPolicy", "New-HostedContentFilterRule", "New-HostedOutboundSpamFilterPolicy", "New-HostedOutboundSpamFilterRule", "New-InboundConnector", "New-InboxRule", "New-IntraOrganizationConnector", "new-journalrule", "New-M365DataAtRestEncryptionPolicy", "New-Mailbox", "New-MailboxAuditLogSearch", "New-MailboxRestoreRequest", "New-MailboxSearch", "New-MailContact", "New-MailMessage", "New-MailUser", "New-MalwareFilterPolicy", "New-MalwareFilterRule", "New-ManagementRole", "New-ManagementRoleAssignment", "New-ManagementScope", "New-MessageClassification", "New-MigrationBatch", "New-MigrationEndpoint", "New-MobileDeviceMailboxPolicy", "New-MoveRequest", "New-OnPremisesOrganization", "New-OrganizationRelationship", "New-OutboundConnector", "New-OutlookProtectionRule", "New-OwaMailboxPolicy", "New-PartnerApplication", "New-PhishSimOverridePolicy", "New-PolicyTipConfig", "New-PrivilegedIdentityManagementRequest", "New-ProtectionServicePolicy", "New-PublicFolder", "New-PublicFolderMoveRequest", "New-QuarantinePermissions", "New-QuarantinePolicy", "New-RemoteDomain", "New-ReportSchedule", "New-ReportSubmissionPolicy", "New-ReportSubmissionRule", "New-RetentionPolicy", "New-RetentionPolicyTag", "New-RoleAssignmentPolicy", "New-RoleGroup", "New-SafeAttachmentPolicy", "New-SafeAttachmentRule", "New-SafeLinksPolicy", "New-SafeLinksRule", "New-SchedulingMailbox", "New-SecOpsOverridePolicy", "New-ServicePrincipal", "New-SharingPolicy", "New-SweepRule", "New-SyncMailPublicFolder", "New-TeamsProtectionPolicy", "New-TeamsProtectionPolicyRule", "New-TenantAllowBlockListItems", "New-TenantAllowBlockListSpoofItems", "New-TenantExemptionInfo", "New-TenantExemptionQuota", "New-TenantScanRequest", "New-TransportRule", "New-UnifiedGroup", "Preview-QuarantineMessage", "Release-QuarantineMessage", "Remove-ActiveSyncDevice", "Remove-ActiveSyncDeviceAccessRule", "remove-ActiveSyncMailboxPolicy", "Remove-AntiPhishPolicy", "Remove-AntiPhishRule", "Remove-App", "Remove-ApplicationAccessPolicy", "Remove-ATPProtectionPolicyRule", "Remove-AuditConfigurationPolicy", "Remove-AuditConfigurationRule", "Remove-AuditStubFolder", "Remove-AuthenticationPolicy", "Remove-AvailabilityAddressSpace", "Remove-AvailabilityConfig", "Remove-BlockedConnector", "Remove-BlockedSenderAddress", "Remove-BookingMailbox", "Remove-CalendarEvents", "Remove-ClassificationRuleCollection", "Remove-CompliancePolicyFileSyncNotification", "Remove-CompliancePolicySyncNotification", "Remove-DataClassification", "Remove-DistributionGroup", "Remove-DistributionGroupMember", "Remove-DlpPolicy", "Remove-DynamicDistributionGroup", "Remove-ElevatedAccessApprovalPolicy", "Remove-EmailAddressPolicy", "Remove-EOPProtectionPolicyRule", "Remove-ExoInformationBarriersV1Configuration", "Remove-ExoPhishSimOverrideRule", "Remove-ExoSecOpsOverrideRule", "Remove-HostedConnectionFilterPolicy", "Remove-HostedContentFilterPolicy", "Remove-HostedContentFilterRule", "Remove-HostedOutboundSpamFilterPolicy", "Remove-HostedOutboundSpamFilterRule", "Remove-HybridConfiguration", "Remove-InboundConnector", "Remove-InboxRule", "Remove-IntraOrganizationConnector", "remove-journalrule", "Remove-M365CrossTenantAccessPolicy", "Remove-Mailbox", "Remove-MailboxAnalysisRequest", "Remove-MailboxFolderPermission", "Remove-MailboxIRMAccess", "Remove-MailboxLocation", "Remove-MailboxPermission", "Remove-MailboxRestoreRequest", "Remove-MailboxSearch", "Remove-MailboxUserConfiguration", "Remove-MailContact", "Remove-MailUser", "Remove-MalwareFilterPolicy", "Remove-MalwareFilterRule", "Remove-ManagementRole", "Remove-ManagementRoleAssignment", "Remove-ManagementRoleEntry", "Remove-ManagementScope", "remove-MessageClassification", "Remove-MigrationBatch", "Remove-MigrationEndpoint", "Remove-MigrationUser", "Remove-MobileDevice", "remove-MobileDeviceMailboxPolicy", "Remove-MoveRequest", "Remove-OnPremisesOrganization", "Remove-OrganizationRelationship", "Remove-OutboundConnector", "Remove-OutlookProtectionRule", "Remove-OwaMailboxPolicy", "Remove-PartnerApplication", "Remove-PhishSimOverridePolicy", "Remove-PolicyTipConfig", "Remove-PublicFolder", "Remove-PublicFolderClientPermission", "Remove-PublicFolderMailboxMigrationRequest", "Remove-PublicFolderMoveRequest", "Remove-QuarantinePolicy", "Remove-RecipientPermission", "Remove-RemoteDomain", "Remove-ReportSchedule", "Remove-ReportSubmissionPolicy", "Remove-ReportSubmissionRule", "remove-RetentionPolicy", "Remove-RetentionPolicyTag", "Remove-RoleAssignmentPolicy", "Remove-RoleGroup", "Remove-RoleGroupMember", "Remove-SafeAttachmentPolicy", "Remove-SafeAttachmentRule", "Remove-SafeLinksPolicy", "Remove-SafeLinksRule", "Remove-SecOpsOverridePolicy", "Remove-ServicePrincipal", "Remove-SharingPolicy", "Remove-SweepRule", "Remove-SyncMailPublicFolder", "Remove-SyncRequest", "Remove-TenantAllowBlockListItems", "Remove-TenantAllowBlockListSpoofItems", "Remove-TenantScanRequest", "Remove-TransportRule", "Remove-UnifiedGroup", "Remove-UnifiedGroupLinks", "Reset-EventsFromEmailBlockStatus", "Resume-MailboxAnalysisRequest", "Resume-MailboxRestoreRequest", "Resume-MoveRequest", "Resume-PublicFolderMailboxMigrationRequest", "Resume-SyncRequest", "Resume-TenantScanRequest", "Revoke-ElevatedAccessAuthorization", "Rotate-DkimSigningConfig", "Search-AdminAuditLog", "Search-MailboxAuditLog", "Search-MessageTrackingReport", "Search-UnifiedAuditLog", "Set-AcceptedDomain", "Set-AccessToCustomerDataRequest", "Set-ActiveSyncDeviceAccessRule", "set-ActiveSyncMailboxPolicy", "Set-ActiveSyncOrganizationSettings", "Set-AdminAuditLogConfig", "Set-AntiPhishPolicy", "Set-AntiPhishRule", "Set-App", "Set-ApplicationAccessPolicy", "Set-ArcConfig", "Set-ATPBuiltInProtectionRule", "Set-ATPEvaluationRule", "Set-AtpPolicyForO365", "Set-ATPProtectionPolicyRule", "Set-AuthenticationPolicy", "Set-AvailabilityConfig", "Set-BookingMailboxPermission", "Set-CalendarProcessing", "Set-CalendarSettings", "Set-CASMailbox", "Set-ClassificationRuleCollection", "Set-Contact", "Set-DataClassification", "Set-DataEncryptionPolicy", "Set-DistributionGroup", "Set-DkimSigningConfig", "Set-DlpPolicy", "Set-DynamicDistributionGroup", "Set-ElevatedAccessApprovalPolicy", "Set-ElevatedAccessRequest", "Set-EmailAddressPolicy", "Set-EmailTenantSettings", "Set-EOPProtectionPolicyRule", "Set-EventsFromEmailConfiguration", "Set-ExoPhishSimOverrideRule", "Set-ExoSecOpsOverrideRule", "Set-ExternalInOutlook", "Set-Group", "Set-HostedConnectionFilterPolicy", "Set-HostedContentFilterPolicy", "Set-HostedContentFilterRule", "Set-HostedOutboundSpamFilterPolicy", "Set-HostedOutboundSpamFilterRule", "Set-InboundConnector", "set-InboxRule", "Set-IntraOrganizationConnector", "Set-IRMConfiguration", "Set-JournalRule", "Set-LabelProperties", "set-LinkedUser", "Set-M365CrossTenantAccessPolicy", "Set-M365DataAtRestEncryptionPolicy", "Set-M365DataAtRestEncryptionPolicyAssignment", "Set-Mailbox", "Set-MailboxAnalysisRequest", "Set-MailboxAuditBypassAssociation", "Set-MailboxAutoReplyConfiguration", "Set-MailboxCalendarConfiguration", "Set-MailboxCalendarFolder", "Set-MailboxFolderPermission", "Set-MailboxIRMAccess", "Set-MailboxJunkEmailConfiguration", "Set-MailboxLocation", "Set-MailboxMessageConfiguration", "Set-MailboxPlan", "Set-MailboxRegionalConfiguration", "Set-MailboxRestoreRequest", "Set-MailboxSearch", "Set-MailboxSpellingConfiguration", "Set-MailContact", "Set-MailPublicFolder", "set-MailUser", "Set-MalwareFilterPolicy", "Set-MalwareFilterRule", "Set-ManagementRoleAssignment", "Set-ManagementRoleEntry", "Set-ManagementScope", "Set-MessageClassification", "Set-MigrationBatch", "Set-MigrationConfig", "Set-MigrationEndpoint", "Set-MigrationUser", "set-MobileDeviceMailboxPolicy", "Set-MoveRequest", "Set-Notification", "Set-OMEConfiguration", "Set-OnPremisesOrganization", "Set-Organization", "Set-OrganizationConfig", "Set-OrganizationRelationship", "Set-OutboundConnector", "Set-OutlookProtectionRule", "Set-OwaMailboxPolicy", "Set-PartnerApplication", "Set-PerimeterConfig", "Set-PhishSimOverridePolicy", "Set-Place", "Set-PolicyTipConfig", "Set-ProtectionServicePolicy", "Set-PublicFolder", "Set-PublicFolderMailboxMigrationRequest", "Set-QuarantinePermissions", "Set-QuarantinePolicy", "Set-RegulatoryComplianceUI", "Set-RemoteDomain", "Set-ReportSchedule", "Set-ReportSubmissionPolicy", "Set-ReportSubmissionRule", "Set-ResourceConfig", "set-RetentionPolicy", "Set-RetentionPolicyTag", "Set-RMSTemplate", "Set-RoleAssignmentPolicy", "Set-RoleGroup", "Set-SafeAttachmentPolicy", "Set-SafeAttachmentRule", "Set-SafeLinksPolicy", "Set-SafeLinksRule", "Set-SecOpsOverridePolicy", "set-ServicePrincipal", "Set-SharingPolicy", "Set-SmimeConfig", "Set-SweepRule", "Set-SyncRequest", "Set-TeamsProtectionPolicy", "Set-TeamsProtectionPolicyRule", "Set-TenantAllowBlockListItems", "Set-TenantAllowBlockListSpoofItems", "Set-TenantSettingCrossTenantAccessPolicy", "Set-TransportConfig", "Set-TransportRule", "Set-UnifiedAuditSetting", "Set-UnifiedGroup", "Set-User", "Start-AuditAssistant", "Start-HistoricalSearch", "Start-ManagedFolderAssistant", "Start-MigrationBatch", "Start-MigrationUser", "Stop-HistoricalSearch", "Stop-MigrationBatch", "Stop-MigrationUser", "Suspend-MailboxAnalysisRequest", "Suspend-MailboxRestoreRequest", "Suspend-MoveRequest", "Suspend-PublicFolderMailboxMigrationRequest", "Suspend-SyncRequest", "Sync-CrossTenantAccessPolicy", "Test-ApplicationAccessPolicy", "Test-ArchiveConnectivity", "Test-DatabaseEvent", "Test-DataClassification", "Test-DataEncryptionPolicy", "Test-InformationBarrierPolicy", "Test-IRMConfiguration", "Test-M365DataAtRestEncryptionPolicy", "Test-MailboxAssistant", "Test-MAPIConnectivity", "Test-MigrationServerAvailability", "Test-OAuthConnectivity", "Test-OrganizationRelationship", "Test-ServicePrincipalAuthorization", "Test-StoreAdminConnectivity", "Test-TextExtraction", "Troubleshoot-AgendaMail", "Undo-SoftDeletedMailbox", "Undo-SoftDeletedUnifiedGroup", "Update-DistributionGroupMember", "Update-HybridConfiguration", "Update-MaskingIndex", "Update-PublicFolderMailbox", "Update-Recipient", "Update-RoleGroupMember", "Upgrade-DistributionGroup", "Validate-OutboundConnector", "Validate-RetentionRuleQuery", "Write-AdminAuditLog", "set-CASMailboxPlan", "Get-Clutter", "Get-ExportedCustomerContent", "Get-FocusedInbox", "Set-Clutter", "Set-FocusedInbox", "Test-DlpPolicies", "Test-Message")
Export-ModuleMember -Alias @()
Export-ModuleMember -Variable @('HelpFileNames')
##############################################################################
$TokenProviderObjectId = '0f95f41f-9ac2-40a5-963a-dce01ae7fbac';
$ConnectionContextObjectId = '55927cde-a011-40cd-8b49-8fd056660909';
